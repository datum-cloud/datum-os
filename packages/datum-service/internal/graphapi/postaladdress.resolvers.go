package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/datum-cloud/datum-os/internal/ent/generated"
	"github.com/datum-cloud/datum-os/pkg/rout"
)

// CreatePostalAddress is the resolver for the createPostalAddress field.
func (r *mutationResolver) CreatePostalAddress(ctx context.Context, input generated.CreatePostalAddressInput) (*PostalAddressCreatePayload, error) {
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, input.OwnerID); err != nil {
		r.logger.Errorw("failed to set organization in auth context", "error", err)

		return nil, rout.NewMissingRequiredFieldError("owner_id")
	}

	res, err := withTransactionalMutation(ctx).PostalAddress.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "postaladdress"}, r.logger)
	}

	return &PostalAddressCreatePayload{
		PostalAddress: res,
	}, nil
}

// CreateBulkPostalAddress is the resolver for the createBulkPostalAddress field.
func (r *mutationResolver) CreateBulkPostalAddress(ctx context.Context, input []*generated.CreatePostalAddressInput) (*PostalAddressBulkCreatePayload, error) {
	return r.bulkCreatePostalAddress(ctx, input)
}

// CreateBulkCSVPostalAddress is the resolver for the createBulkCSVPostalAddress field.
func (r *mutationResolver) CreateBulkCSVPostalAddress(ctx context.Context, input graphql.Upload) (*PostalAddressBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreatePostalAddressInput](input)
	if err != nil {
		r.logger.Errorw("failed to unmarshal bulk data", "error", err)

		return nil, err
	}

	return r.bulkCreatePostalAddress(ctx, data)
}

// UpdatePostalAddress is the resolver for the updatePostalAddress field.
func (r *mutationResolver) UpdatePostalAddress(ctx context.Context, id string, input generated.UpdatePostalAddressInput) (*PostalAddressUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).PostalAddress.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "postaladdress"}, r.logger)
	}
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, &res.OwnerID); err != nil {
		r.logger.Errorw("failed to set organization in auth context", "error", err)

		return nil, ErrPermissionDenied
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags).AppendAddressLines(input.AppendAddressLines).AppendRecipients(input.AppendRecipients)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "postaladdress"}, r.logger)
	}

	return &PostalAddressUpdatePayload{
		PostalAddress: res,
	}, nil
}

// DeletePostalAddress is the resolver for the deletePostalAddress field.
func (r *mutationResolver) DeletePostalAddress(ctx context.Context, id string) (*PostalAddressDeletePayload, error) {
	if err := withTransactionalMutation(ctx).PostalAddress.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "postaladdress"}, r.logger)
	}

	if err := generated.PostalAddressEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &PostalAddressDeletePayload{
		DeletedID: id,
	}, nil
}

// PostalAddress is the resolver for the postalAddress field.
func (r *queryResolver) PostalAddress(ctx context.Context, id string) (*generated.PostalAddress, error) {
	res, err := withTransactionalMutation(ctx).PostalAddress.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "postaladdress"}, r.logger)
	}

	return res, nil
}
