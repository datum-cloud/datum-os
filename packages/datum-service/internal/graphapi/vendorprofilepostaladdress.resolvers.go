package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/datum-cloud/datum-os/internal/ent/generated"
)

// CreateVendorProfilePostalAddress is the resolver for the createVendorProfilePostalAddress field.
func (r *mutationResolver) CreateVendorProfilePostalAddress(ctx context.Context, input generated.CreateVendorProfilePostalAddressInput) (*VendorProfilePostalAddressCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).VendorProfilePostalAddress.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "vendorprofilepostaladdress"}, r.logger)
	}

	return &VendorProfilePostalAddressCreatePayload{
		VendorProfilePostalAddress: res,
	}, nil
}

// CreateBulkVendorProfilePostalAddress is the resolver for the createBulkVendorProfilePostalAddress field.
func (r *mutationResolver) CreateBulkVendorProfilePostalAddress(ctx context.Context, input []*generated.CreateVendorProfilePostalAddressInput) (*VendorProfilePostalAddressBulkCreatePayload, error) {
	return r.bulkCreateVendorProfilePostalAddress(ctx, input)
}

// CreateBulkCSVVendorProfilePostalAddress is the resolver for the createBulkCSVVendorProfilePostalAddress field.
func (r *mutationResolver) CreateBulkCSVVendorProfilePostalAddress(ctx context.Context, input graphql.Upload) (*VendorProfilePostalAddressBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateVendorProfilePostalAddressInput](input)
	if err != nil {
		r.logger.Errorw("failed to unmarshal bulk data", "error", err)

		return nil, err
	}

	return r.bulkCreateVendorProfilePostalAddress(ctx, data)
}

// UpdateVendorProfilePostalAddress is the resolver for the updateVendorProfilePostalAddress field.
func (r *mutationResolver) UpdateVendorProfilePostalAddress(ctx context.Context, id string, input generated.UpdateVendorProfilePostalAddressInput) (*VendorProfilePostalAddressUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).VendorProfilePostalAddress.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "vendorprofilepostaladdress"}, r.logger)
	}

	// setup update request
	req := res.Update().SetInput(input)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "vendorprofilepostaladdress"}, r.logger)
	}

	return &VendorProfilePostalAddressUpdatePayload{
		VendorProfilePostalAddress: res,
	}, nil
}

// DeleteVendorProfilePostalAddress is the resolver for the deleteVendorProfilePostalAddress field.
func (r *mutationResolver) DeleteVendorProfilePostalAddress(ctx context.Context, id string) (*VendorProfilePostalAddressDeletePayload, error) {
	if err := withTransactionalMutation(ctx).VendorProfilePostalAddress.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "vendorprofilepostaladdress"}, r.logger)
	}

	if err := generated.VendorProfilePostalAddressEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &VendorProfilePostalAddressDeletePayload{
		DeletedID: id,
	}, nil
}

// VendorProfilePostalAddress is the resolver for the vendorProfilePostalAddress field.
func (r *queryResolver) VendorProfilePostalAddress(ctx context.Context, id string) (*generated.VendorProfilePostalAddress, error) {
	res, err := withTransactionalMutation(ctx).VendorProfilePostalAddress.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "vendorprofilepostaladdress"}, r.logger)
	}

	return res, nil
}
