package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/datum-cloud/datum-os/internal/ent/generated"
	"github.com/datum-cloud/datum-os/pkg/rout"
)

// CreateVendorProfile is the resolver for the createVendorProfile field.
func (r *mutationResolver) CreateVendorProfile(ctx context.Context, input generated.CreateVendorProfileInput) (*VendorProfileCreatePayload, error) {
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, input.OwnerID); err != nil {
		r.logger.Errorw("failed to set organization in auth context", "error", err)

		return nil, rout.NewMissingRequiredFieldError("owner_id")
	}

	res, err := withTransactionalMutation(ctx).VendorProfile.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "vendorprofile"}, r.logger)
	}

	return &VendorProfileCreatePayload{
		VendorProfile: res,
	}, nil
}

// CreateBulkVendorProfile is the resolver for the createBulkVendorProfile field.
func (r *mutationResolver) CreateBulkVendorProfile(ctx context.Context, input []*generated.CreateVendorProfileInput) (*VendorProfileBulkCreatePayload, error) {
	return r.bulkCreateVendorProfile(ctx, input)
}

// CreateBulkCSVVendorProfile is the resolver for the createBulkCSVVendorProfile field.
func (r *mutationResolver) CreateBulkCSVVendorProfile(ctx context.Context, input graphql.Upload) (*VendorProfileBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateVendorProfileInput](input)
	if err != nil {
		r.logger.Errorw("failed to unmarshal bulk data", "error", err)

		return nil, err
	}

	return r.bulkCreateVendorProfile(ctx, data)
}

// UpdateVendorProfile is the resolver for the updateVendorProfile field.
func (r *mutationResolver) UpdateVendorProfile(ctx context.Context, id string, input generated.UpdateVendorProfileInput) (*VendorProfileUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).VendorProfile.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "vendorprofile"}, r.logger)
	}
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, &res.OwnerID); err != nil {
		r.logger.Errorw("failed to set organization in auth context", "error", err)

		return nil, ErrPermissionDenied
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "vendorprofile"}, r.logger)
	}

	return &VendorProfileUpdatePayload{
		VendorProfile: res,
	}, nil
}

// DeleteVendorProfile is the resolver for the deleteVendorProfile field.
func (r *mutationResolver) DeleteVendorProfile(ctx context.Context, id string) (*VendorProfileDeletePayload, error) {
	if err := withTransactionalMutation(ctx).VendorProfile.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "vendorprofile"}, r.logger)
	}

	if err := generated.VendorProfileEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &VendorProfileDeletePayload{
		DeletedID: id,
	}, nil
}

// VendorProfile is the resolver for the vendorProfile field.
func (r *queryResolver) VendorProfile(ctx context.Context, id string) (*generated.VendorProfile, error) {
	res, err := withTransactionalMutation(ctx).VendorProfile.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "vendorprofile"}, r.logger)
	}

	return res, nil
}
