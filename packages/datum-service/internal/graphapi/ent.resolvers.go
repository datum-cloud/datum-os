package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"entgo.io/contrib/entgql"
	"github.com/datum-cloud/datum-os/internal/ent/generated"
)

// Kind is the resolver for the kind field.
func (r *phoneNumberResolver) Kind(ctx context.Context, obj *generated.PhoneNumber) (string, error) {
	panic(fmt.Errorf("not implemented: Kind - kind"))
}

// Kind is the resolver for the kind field.
func (r *phoneNumberHistoryResolver) Kind(ctx context.Context, obj *generated.PhoneNumberHistory) (string, error) {
	panic(fmt.Errorf("not implemented: Kind - kind"))
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (generated.Noder, error) {
	return withTransactionalMutation(ctx).Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]generated.Noder, error) {
	return withTransactionalMutation(ctx).Noders(ctx, ids)
}

// APITokens is the resolver for the apiTokens field.
func (r *queryResolver) APITokens(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.APITokenWhereInput) (*generated.APITokenConnection, error) {
	return withTransactionalMutation(ctx).APIToken.Query().Paginate(ctx, after, first, before, last, generated.WithAPITokenFilter(where.Filter))
}

// Contacts is the resolver for the contacts field.
func (r *queryResolver) Contacts(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.ContactWhereInput) (*generated.ContactConnection, error) {
	return withTransactionalMutation(ctx).Contact.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithContactFilter(where.Filter))
}

// ContactHistories is the resolver for the contactHistories field.
func (r *queryResolver) ContactHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.ContactHistoryWhereInput) (*generated.ContactHistoryConnection, error) {
	return withTransactionalMutation(ctx).ContactHistory.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithContactHistoryFilter(where.Filter))
}

// ContactLists is the resolver for the contactLists field.
func (r *queryResolver) ContactLists(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.ContactListOrder, where *generated.ContactListWhereInput) (*generated.ContactListConnection, error) {
	return withTransactionalMutation(ctx).ContactList.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithContactListOrder(orderBy),
		generated.WithContactListFilter(where.Filter))
}

// ContactListHistories is the resolver for the contactListHistories field.
func (r *queryResolver) ContactListHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.ContactListHistoryOrder, where *generated.ContactListHistoryWhereInput) (*generated.ContactListHistoryConnection, error) {
	return withTransactionalMutation(ctx).ContactListHistory.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithContactListHistoryOrder(orderBy),
		generated.WithContactListHistoryFilter(where.Filter))
}

// ContactListMemberships is the resolver for the contactListMemberships field.
func (r *queryResolver) ContactListMemberships(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.ContactListMembershipWhereInput) (*generated.ContactListMembershipConnection, error) {
	return withTransactionalMutation(ctx).ContactListMembership.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithContactListMembershipFilter(where.Filter))
}

// ContactListMembershipHistories is the resolver for the contactListMembershipHistories field.
func (r *queryResolver) ContactListMembershipHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.ContactListMembershipHistoryWhereInput) (*generated.ContactListMembershipHistoryConnection, error) {
	return withTransactionalMutation(ctx).ContactListMembershipHistory.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithContactListMembershipHistoryFilter(where.Filter))
}

// DocumentDataSlice is the resolver for the documentDataSlice field.
func (r *queryResolver) DocumentDataSlice(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.DocumentDataWhereInput) (*generated.DocumentDataConnection, error) {
	return withTransactionalMutation(ctx).DocumentData.Query().Paginate(ctx, after, first, before, last, generated.WithDocumentDataFilter(where.Filter))
}

// DocumentDataHistories is the resolver for the documentDataHistories field.
func (r *queryResolver) DocumentDataHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.DocumentDataHistoryWhereInput) (*generated.DocumentDataHistoryConnection, error) {
	return withTransactionalMutation(ctx).DocumentDataHistory.Query().Paginate(ctx, after, first, before, last, generated.WithDocumentDataHistoryFilter(where.Filter))
}

// Entitlements is the resolver for the entitlements field.
func (r *queryResolver) Entitlements(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.EntitlementWhereInput) (*generated.EntitlementConnection, error) {
	return withTransactionalMutation(ctx).Entitlement.Query().Paginate(ctx, after, first, before, last, generated.WithEntitlementFilter(where.Filter))
}

// EntitlementHistories is the resolver for the entitlementHistories field.
func (r *queryResolver) EntitlementHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.EntitlementHistoryWhereInput) (*generated.EntitlementHistoryConnection, error) {
	return withTransactionalMutation(ctx).EntitlementHistory.Query().Paginate(ctx, after, first, before, last, generated.WithEntitlementHistoryFilter(where.Filter))
}

// EntitlementPlans is the resolver for the entitlementPlans field.
func (r *queryResolver) EntitlementPlans(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.EntitlementPlanWhereInput) (*generated.EntitlementPlanConnection, error) {
	return withTransactionalMutation(ctx).EntitlementPlan.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithEntitlementPlanFilter(where.Filter))
}

// EntitlementPlanFeatures is the resolver for the entitlementPlanFeatures field.
func (r *queryResolver) EntitlementPlanFeatures(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.EntitlementPlanFeatureWhereInput) (*generated.EntitlementPlanFeatureConnection, error) {
	return withTransactionalMutation(ctx).EntitlementPlanFeature.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithEntitlementPlanFeatureFilter(where.Filter))
}

// EntitlementPlanFeatureHistories is the resolver for the entitlementPlanFeatureHistories field.
func (r *queryResolver) EntitlementPlanFeatureHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.EntitlementPlanFeatureHistoryWhereInput) (*generated.EntitlementPlanFeatureHistoryConnection, error) {
	return withTransactionalMutation(ctx).EntitlementPlanFeatureHistory.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithEntitlementPlanFeatureHistoryFilter(where.Filter))
}

// EntitlementPlanHistories is the resolver for the entitlementPlanHistories field.
func (r *queryResolver) EntitlementPlanHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.EntitlementPlanHistoryWhereInput) (*generated.EntitlementPlanHistoryConnection, error) {
	return withTransactionalMutation(ctx).EntitlementPlanHistory.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithEntitlementPlanHistoryFilter(where.Filter))
}

// Entities is the resolver for the entities field.
func (r *queryResolver) Entities(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.EntityOrder, where *generated.EntityWhereInput) (*generated.EntityConnection, error) {
	return withTransactionalMutation(ctx).Entity.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithEntityOrder(orderBy),
		generated.WithEntityFilter(where.Filter))
}

// EntityHistories is the resolver for the entityHistories field.
func (r *queryResolver) EntityHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.EntityHistoryOrder, where *generated.EntityHistoryWhereInput) (*generated.EntityHistoryConnection, error) {
	return withTransactionalMutation(ctx).EntityHistory.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithEntityHistoryOrder(orderBy),
		generated.WithEntityHistoryFilter(where.Filter))
}

// EntityTypes is the resolver for the entityTypes field.
func (r *queryResolver) EntityTypes(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.EntityTypeOrder, where *generated.EntityTypeWhereInput) (*generated.EntityTypeConnection, error) {
	return withTransactionalMutation(ctx).EntityType.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithEntityTypeOrder(orderBy),
		generated.WithEntityTypeFilter(where.Filter))
}

// EntityTypeHistories is the resolver for the entityTypeHistories field.
func (r *queryResolver) EntityTypeHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.EntityTypeHistoryOrder, where *generated.EntityTypeHistoryWhereInput) (*generated.EntityTypeHistoryConnection, error) {
	return withTransactionalMutation(ctx).EntityTypeHistory.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithEntityTypeHistoryOrder(orderBy),
		generated.WithEntityTypeHistoryFilter(where.Filter))
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.EventWhereInput) (*generated.EventConnection, error) {
	return withTransactionalMutation(ctx).Event.Query().Paginate(ctx, after, first, before, last, generated.WithEventFilter(where.Filter))
}

// EventHistories is the resolver for the eventHistories field.
func (r *queryResolver) EventHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.EventHistoryWhereInput) (*generated.EventHistoryConnection, error) {
	return withTransactionalMutation(ctx).EventHistory.Query().Paginate(ctx, after, first, before, last, generated.WithEventHistoryFilter(where.Filter))
}

// Features is the resolver for the features field.
func (r *queryResolver) Features(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.FeatureWhereInput) (*generated.FeatureConnection, error) {
	return withTransactionalMutation(ctx).Feature.Query().Paginate(ctx, after, first, before, last, generated.WithFeatureFilter(where.Filter))
}

// FeatureHistories is the resolver for the featureHistories field.
func (r *queryResolver) FeatureHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.FeatureHistoryWhereInput) (*generated.FeatureHistoryConnection, error) {
	return withTransactionalMutation(ctx).FeatureHistory.Query().Paginate(ctx, after, first, before, last, generated.WithFeatureHistoryFilter(where.Filter))
}

// Files is the resolver for the files field.
func (r *queryResolver) Files(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.FileWhereInput) (*generated.FileConnection, error) {
	return withTransactionalMutation(ctx).File.Query().Paginate(ctx, after, first, before, last, generated.WithFileFilter(where.Filter))
}

// FileHistories is the resolver for the fileHistories field.
func (r *queryResolver) FileHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.FileHistoryWhereInput) (*generated.FileHistoryConnection, error) {
	return withTransactionalMutation(ctx).FileHistory.Query().Paginate(ctx, after, first, before, last, generated.WithFileHistoryFilter(where.Filter))
}

// Groups is the resolver for the groups field.
func (r *queryResolver) Groups(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.GroupOrder, where *generated.GroupWhereInput) (*generated.GroupConnection, error) {
	return withTransactionalMutation(ctx).Group.Query().Paginate(ctx, after, first, before, last, generated.WithGroupOrder(orderBy), generated.WithGroupFilter(where.Filter))
}

// GroupHistories is the resolver for the groupHistories field.
func (r *queryResolver) GroupHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.GroupHistoryOrder, where *generated.GroupHistoryWhereInput) (*generated.GroupHistoryConnection, error) {
	return withTransactionalMutation(ctx).GroupHistory.Query().Paginate(ctx, after, first, before, last, generated.WithGroupHistoryOrder(orderBy), generated.WithGroupHistoryFilter(where.Filter))
}

// GroupMemberships is the resolver for the groupMemberships field.
func (r *queryResolver) GroupMemberships(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.GroupMembershipWhereInput) (*generated.GroupMembershipConnection, error) {
	return withTransactionalMutation(ctx).GroupMembership.Query().Paginate(ctx, after, first, before, last, generated.WithGroupMembershipFilter(where.Filter))
}

// GroupMembershipHistories is the resolver for the groupMembershipHistories field.
func (r *queryResolver) GroupMembershipHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.GroupMembershipHistoryWhereInput) (*generated.GroupMembershipHistoryConnection, error) {
	return withTransactionalMutation(ctx).GroupMembershipHistory.Query().Paginate(ctx, after, first, before, last, generated.WithGroupMembershipHistoryFilter(where.Filter))
}

// GroupSettings is the resolver for the groupSettings field.
func (r *queryResolver) GroupSettings(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.GroupSettingWhereInput) (*generated.GroupSettingConnection, error) {
	return withTransactionalMutation(ctx).GroupSetting.Query().Paginate(ctx, after, first, before, last, generated.WithGroupSettingFilter(where.Filter))
}

// GroupSettingHistories is the resolver for the groupSettingHistories field.
func (r *queryResolver) GroupSettingHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.GroupSettingHistoryWhereInput) (*generated.GroupSettingHistoryConnection, error) {
	return withTransactionalMutation(ctx).GroupSettingHistory.Query().Paginate(ctx, after, first, before, last, generated.WithGroupSettingHistoryFilter(where.Filter))
}

// Hushes is the resolver for the hushes field.
func (r *queryResolver) Hushes(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.HushOrder, where *generated.HushWhereInput) (*generated.HushConnection, error) {
	return withTransactionalMutation(ctx).Hush.Query().Paginate(ctx, after, first, before, last, generated.WithHushOrder(orderBy), generated.WithHushFilter(where.Filter))
}

// HushHistories is the resolver for the hushHistories field.
func (r *queryResolver) HushHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.HushHistoryOrder, where *generated.HushHistoryWhereInput) (*generated.HushHistoryConnection, error) {
	return withTransactionalMutation(ctx).HushHistory.Query().Paginate(ctx, after, first, before, last, generated.WithHushHistoryOrder(orderBy), generated.WithHushHistoryFilter(where.Filter))
}

// Integrations is the resolver for the integrations field.
func (r *queryResolver) Integrations(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.IntegrationOrder, where *generated.IntegrationWhereInput) (*generated.IntegrationConnection, error) {
	return withTransactionalMutation(ctx).Integration.Query().Paginate(ctx, after, first, before, last, generated.WithIntegrationOrder(orderBy), generated.WithIntegrationFilter(where.Filter))
}

// IntegrationHistories is the resolver for the integrationHistories field.
func (r *queryResolver) IntegrationHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.IntegrationHistoryOrder, where *generated.IntegrationHistoryWhereInput) (*generated.IntegrationHistoryConnection, error) {
	return withTransactionalMutation(ctx).IntegrationHistory.Query().Paginate(ctx, after, first, before, last, generated.WithIntegrationHistoryOrder(orderBy), generated.WithIntegrationHistoryFilter(where.Filter))
}

// Invites is the resolver for the invites field.
func (r *queryResolver) Invites(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.InviteWhereInput) (*generated.InviteConnection, error) {
	return r.client.Invite.Query().Paginate(ctx, after, first, before, last, generated.WithInviteFilter(where.Filter))
}

// Notes is the resolver for the notes field.
func (r *queryResolver) Notes(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.NoteWhereInput) (*generated.NoteConnection, error) {
	return withTransactionalMutation(ctx).Note.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithNoteFilter(where.Filter))
}

// NoteHistories is the resolver for the noteHistories field.
func (r *queryResolver) NoteHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.NoteHistoryWhereInput) (*generated.NoteHistoryConnection, error) {
	return withTransactionalMutation(ctx).NoteHistory.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithNoteHistoryFilter(where.Filter))
}

// OauthProviders is the resolver for the oauthProviders field.
func (r *queryResolver) OauthProviders(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.OauthProviderWhereInput) (*generated.OauthProviderConnection, error) {
	return withTransactionalMutation(ctx).OauthProvider.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithOauthProviderFilter(where.Filter))
}

// OauthProviderHistories is the resolver for the oauthProviderHistories field.
func (r *queryResolver) OauthProviderHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.OauthProviderHistoryWhereInput) (*generated.OauthProviderHistoryConnection, error) {
	return withTransactionalMutation(ctx).OauthProviderHistory.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithOauthProviderHistoryFilter(where.Filter))
}

// OhAuthTooTokens is the resolver for the ohAuthTooTokens field.
func (r *queryResolver) OhAuthTooTokens(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.OhAuthTooTokenWhereInput) (*generated.OhAuthTooTokenConnection, error) {
	return withTransactionalMutation(ctx).OhAuthTooToken.Query().Paginate(ctx, after, first, before, last, generated.WithOhAuthTooTokenFilter(where.Filter))
}

// OrgMemberships is the resolver for the orgMemberships field.
func (r *queryResolver) OrgMemberships(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.OrgMembershipWhereInput) (*generated.OrgMembershipConnection, error) {
	return withTransactionalMutation(ctx).OrgMembership.Query().Paginate(ctx, after, first, before, last, generated.WithOrgMembershipFilter(where.Filter))
}

// OrgMembershipHistories is the resolver for the orgMembershipHistories field.
func (r *queryResolver) OrgMembershipHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.OrgMembershipHistoryWhereInput) (*generated.OrgMembershipHistoryConnection, error) {
	return withTransactionalMutation(ctx).OrgMembershipHistory.Query().Paginate(ctx, after, first, before, last, generated.WithOrgMembershipHistoryFilter(where.Filter))
}

// Organizations is the resolver for the organizations field.
func (r *queryResolver) Organizations(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.OrganizationOrder, where *generated.OrganizationWhereInput) (*generated.OrganizationConnection, error) {
	return withTransactionalMutation(ctx).Organization.Query().Paginate(ctx, after, first, before, last, generated.WithOrganizationOrder(orderBy), generated.WithOrganizationFilter(where.Filter))
}

// OrganizationHistories is the resolver for the organizationHistories field.
func (r *queryResolver) OrganizationHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.OrganizationHistoryOrder, where *generated.OrganizationHistoryWhereInput) (*generated.OrganizationHistoryConnection, error) {
	return withTransactionalMutation(ctx).OrganizationHistory.Query().Paginate(ctx, after, first, before, last, generated.WithOrganizationHistoryOrder(orderBy), generated.WithOrganizationHistoryFilter(where.Filter))
}

// OrganizationSettings is the resolver for the organizationSettings field.
func (r *queryResolver) OrganizationSettings(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.OrganizationSettingWhereInput) (*generated.OrganizationSettingConnection, error) {
	return withTransactionalMutation(ctx).OrganizationSetting.Query().Paginate(ctx, after, first, before, last, generated.WithOrganizationSettingFilter(where.Filter))
}

// OrganizationSettingHistories is the resolver for the organizationSettingHistories field.
func (r *queryResolver) OrganizationSettingHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.OrganizationSettingHistoryWhereInput) (*generated.OrganizationSettingHistoryConnection, error) {
	return withTransactionalMutation(ctx).OrganizationSettingHistory.Query().Paginate(ctx, after, first, before, last, generated.WithOrganizationSettingHistoryFilter(where.Filter))
}

// PersonalAccessTokens is the resolver for the personalAccessTokens field.
func (r *queryResolver) PersonalAccessTokens(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.PersonalAccessTokenWhereInput) (*generated.PersonalAccessTokenConnection, error) {
	return withTransactionalMutation(ctx).PersonalAccessToken.Query().Paginate(ctx, after, first, before, last, generated.WithPersonalAccessTokenFilter(where.Filter))
}

// PhoneNumbers is the resolver for the phoneNumbers field.
func (r *queryResolver) PhoneNumbers(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.PhoneNumberWhereInput) (*generated.PhoneNumberConnection, error) {
	return withTransactionalMutation(ctx).PhoneNumber.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithPhoneNumberFilter(where.Filter))
}

// PhoneNumberHistories is the resolver for the phoneNumberHistories field.
func (r *queryResolver) PhoneNumberHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.PhoneNumberHistoryWhereInput) (*generated.PhoneNumberHistoryConnection, error) {
	return withTransactionalMutation(ctx).PhoneNumberHistory.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithPhoneNumberHistoryFilter(where.Filter))
}

// PostalAddresses is the resolver for the postalAddresses field.
func (r *queryResolver) PostalAddresses(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.PostalAddressOrder, where *generated.PostalAddressWhereInput) (*generated.PostalAddressConnection, error) {
	return withTransactionalMutation(ctx).PostalAddress.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithPostalAddressOrder(orderBy),
		generated.WithPostalAddressFilter(where.Filter))
}

// PostalAddressHistories is the resolver for the postalAddressHistories field.
func (r *queryResolver) PostalAddressHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.PostalAddressHistoryOrder, where *generated.PostalAddressHistoryWhereInput) (*generated.PostalAddressHistoryConnection, error) {
	return withTransactionalMutation(ctx).PostalAddressHistory.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithPostalAddressHistoryOrder(orderBy),
		generated.WithPostalAddressHistoryFilter(where.Filter))
}

// Subscribers is the resolver for the subscribers field.
func (r *queryResolver) Subscribers(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.SubscriberWhereInput) (*generated.SubscriberConnection, error) {
	return withTransactionalMutation(ctx).Subscriber.Query().Paginate(ctx, after, first, before, last, generated.WithSubscriberFilter(where.Filter))
}

// TfaSettings is the resolver for the tfaSettings field.
func (r *queryResolver) TfaSettings(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.TFASettingWhereInput) (*generated.TFASettingConnection, error) {
	return withTransactionalMutation(ctx).TFASetting.Query().Paginate(ctx, after, first, before, last, generated.WithTFASettingFilter(where.Filter))
}

// Templates is the resolver for the templates field.
func (r *queryResolver) Templates(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.TemplateOrder, where *generated.TemplateWhereInput) (*generated.TemplateConnection, error) {
	return withTransactionalMutation(ctx).Template.Query().Paginate(ctx, after, first, before, last, generated.WithTemplateOrder(orderBy), generated.WithTemplateFilter(where.Filter))
}

// TemplateHistories is the resolver for the templateHistories field.
func (r *queryResolver) TemplateHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.TemplateHistoryOrder, where *generated.TemplateHistoryWhereInput) (*generated.TemplateHistoryConnection, error) {
	return withTransactionalMutation(ctx).TemplateHistory.Query().Paginate(ctx, after, first, before, last, generated.WithTemplateHistoryOrder(orderBy), generated.WithTemplateHistoryFilter(where.Filter))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.UserOrder, where *generated.UserWhereInput) (*generated.UserConnection, error) {
	return withTransactionalMutation(ctx).User.Query().Paginate(ctx, after, first, before, last, generated.WithUserOrder(orderBy), generated.WithUserFilter(where.Filter))
}

// UserHistories is the resolver for the userHistories field.
func (r *queryResolver) UserHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.UserHistoryOrder, where *generated.UserHistoryWhereInput) (*generated.UserHistoryConnection, error) {
	return withTransactionalMutation(ctx).UserHistory.Query().Paginate(ctx, after, first, before, last, generated.WithUserHistoryOrder(orderBy), generated.WithUserHistoryFilter(where.Filter))
}

// UserSettings is the resolver for the userSettings field.
func (r *queryResolver) UserSettings(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.UserSettingWhereInput) (*generated.UserSettingConnection, error) {
	return withTransactionalMutation(ctx).UserSetting.Query().Paginate(ctx, after, first, before, last, generated.WithUserSettingFilter(where.Filter))
}

// UserSettingHistories is the resolver for the userSettingHistories field.
func (r *queryResolver) UserSettingHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.UserSettingHistoryWhereInput) (*generated.UserSettingHistoryConnection, error) {
	return withTransactionalMutation(ctx).UserSettingHistory.Query().Paginate(ctx, after, first, before, last, generated.WithUserSettingHistoryFilter(where.Filter))
}

// Vendors is the resolver for the vendors field.
func (r *queryResolver) Vendors(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.VendorOrder, where *generated.VendorWhereInput) (*generated.VendorConnection, error) {
	return withTransactionalMutation(ctx).Vendor.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithVendorOrder(orderBy),
		generated.WithVendorFilter(where.Filter))
}

// VendorHistories is the resolver for the vendorHistories field.
func (r *queryResolver) VendorHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.VendorHistoryOrder, where *generated.VendorHistoryWhereInput) (*generated.VendorHistoryConnection, error) {
	return withTransactionalMutation(ctx).VendorHistory.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithVendorHistoryOrder(orderBy),
		generated.WithVendorHistoryFilter(where.Filter))
}

// VendorProfiles is the resolver for the vendorProfiles field.
func (r *queryResolver) VendorProfiles(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.VendorProfileOrder, where *generated.VendorProfileWhereInput) (*generated.VendorProfileConnection, error) {
	return withTransactionalMutation(ctx).VendorProfile.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithVendorProfileOrder(orderBy),
		generated.WithVendorProfileFilter(where.Filter))
}

// VendorProfileHistories is the resolver for the vendorProfileHistories field.
func (r *queryResolver) VendorProfileHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.VendorProfileHistoryOrder, where *generated.VendorProfileHistoryWhereInput) (*generated.VendorProfileHistoryConnection, error) {
	return withTransactionalMutation(ctx).VendorProfileHistory.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithVendorProfileHistoryOrder(orderBy),
		generated.WithVendorProfileHistoryFilter(where.Filter))
}

// VendorProfilePhoneNumbers is the resolver for the vendorProfilePhoneNumbers field.
func (r *queryResolver) VendorProfilePhoneNumbers(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.VendorProfilePhoneNumberWhereInput) (*generated.VendorProfilePhoneNumberConnection, error) {
	return withTransactionalMutation(ctx).VendorProfilePhoneNumber.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithVendorProfilePhoneNumberFilter(where.Filter))
}

// VendorProfilePhoneNumberHistories is the resolver for the vendorProfilePhoneNumberHistories field.
func (r *queryResolver) VendorProfilePhoneNumberHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.VendorProfilePhoneNumberHistoryWhereInput) (*generated.VendorProfilePhoneNumberHistoryConnection, error) {
	return withTransactionalMutation(ctx).VendorProfilePhoneNumberHistory.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithVendorProfilePhoneNumberHistoryFilter(where.Filter))
}

// VendorProfilePostalAddresses is the resolver for the vendorProfilePostalAddresses field.
func (r *queryResolver) VendorProfilePostalAddresses(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.VendorProfilePostalAddressWhereInput) (*generated.VendorProfilePostalAddressConnection, error) {
	return withTransactionalMutation(ctx).VendorProfilePostalAddress.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithVendorProfilePostalAddressFilter(where.Filter))
}

// VendorProfilePostalAddressHistories is the resolver for the vendorProfilePostalAddressHistories field.
func (r *queryResolver) VendorProfilePostalAddressHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.VendorProfilePostalAddressHistoryWhereInput) (*generated.VendorProfilePostalAddressHistoryConnection, error) {
	return withTransactionalMutation(ctx).VendorProfilePostalAddressHistory.Query().Paginate(
		ctx,
		after,
		first,
		before,
		last,
		generated.WithVendorProfilePostalAddressHistoryFilter(where.Filter))
}

// Webhooks is the resolver for the webhooks field.
func (r *queryResolver) Webhooks(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.WebhookOrder, where *generated.WebhookWhereInput) (*generated.WebhookConnection, error) {
	return withTransactionalMutation(ctx).Webhook.Query().Paginate(ctx, after, first, before, last, generated.WithWebhookOrder(orderBy), generated.WithWebhookFilter(where.Filter))
}

// WebhookHistories is the resolver for the webhookHistories field.
func (r *queryResolver) WebhookHistories(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.WebhookHistoryOrder, where *generated.WebhookHistoryWhereInput) (*generated.WebhookHistoryConnection, error) {
	return withTransactionalMutation(ctx).WebhookHistory.Query().Paginate(ctx, after, first, before, last, generated.WithWebhookHistoryOrder(orderBy), generated.WithWebhookHistoryFilter(where.Filter))
}

// Kind is the resolver for the kind field.
func (r *createPhoneNumberInputResolver) Kind(ctx context.Context, obj *generated.CreatePhoneNumberInput, data *string) error {
	panic(fmt.Errorf("not implemented: Kind - kind"))
}

// Kind is the resolver for the kind field.
func (r *phoneNumberHistoryWhereInputResolver) Kind(ctx context.Context, obj *generated.PhoneNumberHistoryWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: Kind - kind"))
}

// KindNeq is the resolver for the kindNEQ field.
func (r *phoneNumberHistoryWhereInputResolver) KindNeq(ctx context.Context, obj *generated.PhoneNumberHistoryWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: KindNeq - kindNEQ"))
}

// KindIn is the resolver for the kindIn field.
func (r *phoneNumberHistoryWhereInputResolver) KindIn(ctx context.Context, obj *generated.PhoneNumberHistoryWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: KindIn - kindIn"))
}

// KindNotIn is the resolver for the kindNotIn field.
func (r *phoneNumberHistoryWhereInputResolver) KindNotIn(ctx context.Context, obj *generated.PhoneNumberHistoryWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: KindNotIn - kindNotIn"))
}

// KindGt is the resolver for the kindGT field.
func (r *phoneNumberHistoryWhereInputResolver) KindGt(ctx context.Context, obj *generated.PhoneNumberHistoryWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: KindGt - kindGT"))
}

// KindGte is the resolver for the kindGTE field.
func (r *phoneNumberHistoryWhereInputResolver) KindGte(ctx context.Context, obj *generated.PhoneNumberHistoryWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: KindGte - kindGTE"))
}

// KindLt is the resolver for the kindLT field.
func (r *phoneNumberHistoryWhereInputResolver) KindLt(ctx context.Context, obj *generated.PhoneNumberHistoryWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: KindLt - kindLT"))
}

// KindLte is the resolver for the kindLTE field.
func (r *phoneNumberHistoryWhereInputResolver) KindLte(ctx context.Context, obj *generated.PhoneNumberHistoryWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: KindLte - kindLTE"))
}

// KindContains is the resolver for the kindContains field.
func (r *phoneNumberHistoryWhereInputResolver) KindContains(ctx context.Context, obj *generated.PhoneNumberHistoryWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: KindContains - kindContains"))
}

// KindHasPrefix is the resolver for the kindHasPrefix field.
func (r *phoneNumberHistoryWhereInputResolver) KindHasPrefix(ctx context.Context, obj *generated.PhoneNumberHistoryWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: KindHasPrefix - kindHasPrefix"))
}

// KindHasSuffix is the resolver for the kindHasSuffix field.
func (r *phoneNumberHistoryWhereInputResolver) KindHasSuffix(ctx context.Context, obj *generated.PhoneNumberHistoryWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: KindHasSuffix - kindHasSuffix"))
}

// KindEqualFold is the resolver for the kindEqualFold field.
func (r *phoneNumberHistoryWhereInputResolver) KindEqualFold(ctx context.Context, obj *generated.PhoneNumberHistoryWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: KindEqualFold - kindEqualFold"))
}

// KindContainsFold is the resolver for the kindContainsFold field.
func (r *phoneNumberHistoryWhereInputResolver) KindContainsFold(ctx context.Context, obj *generated.PhoneNumberHistoryWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: KindContainsFold - kindContainsFold"))
}

// Kind is the resolver for the kind field.
func (r *phoneNumberWhereInputResolver) Kind(ctx context.Context, obj *generated.PhoneNumberWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: Kind - kind"))
}

// KindNeq is the resolver for the kindNEQ field.
func (r *phoneNumberWhereInputResolver) KindNeq(ctx context.Context, obj *generated.PhoneNumberWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: KindNeq - kindNEQ"))
}

// KindIn is the resolver for the kindIn field.
func (r *phoneNumberWhereInputResolver) KindIn(ctx context.Context, obj *generated.PhoneNumberWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: KindIn - kindIn"))
}

// KindNotIn is the resolver for the kindNotIn field.
func (r *phoneNumberWhereInputResolver) KindNotIn(ctx context.Context, obj *generated.PhoneNumberWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: KindNotIn - kindNotIn"))
}

// KindGt is the resolver for the kindGT field.
func (r *phoneNumberWhereInputResolver) KindGt(ctx context.Context, obj *generated.PhoneNumberWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: KindGt - kindGT"))
}

// KindGte is the resolver for the kindGTE field.
func (r *phoneNumberWhereInputResolver) KindGte(ctx context.Context, obj *generated.PhoneNumberWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: KindGte - kindGTE"))
}

// KindLt is the resolver for the kindLT field.
func (r *phoneNumberWhereInputResolver) KindLt(ctx context.Context, obj *generated.PhoneNumberWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: KindLt - kindLT"))
}

// KindLte is the resolver for the kindLTE field.
func (r *phoneNumberWhereInputResolver) KindLte(ctx context.Context, obj *generated.PhoneNumberWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: KindLte - kindLTE"))
}

// KindContains is the resolver for the kindContains field.
func (r *phoneNumberWhereInputResolver) KindContains(ctx context.Context, obj *generated.PhoneNumberWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: KindContains - kindContains"))
}

// KindHasPrefix is the resolver for the kindHasPrefix field.
func (r *phoneNumberWhereInputResolver) KindHasPrefix(ctx context.Context, obj *generated.PhoneNumberWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: KindHasPrefix - kindHasPrefix"))
}

// KindHasSuffix is the resolver for the kindHasSuffix field.
func (r *phoneNumberWhereInputResolver) KindHasSuffix(ctx context.Context, obj *generated.PhoneNumberWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: KindHasSuffix - kindHasSuffix"))
}

// KindEqualFold is the resolver for the kindEqualFold field.
func (r *phoneNumberWhereInputResolver) KindEqualFold(ctx context.Context, obj *generated.PhoneNumberWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: KindEqualFold - kindEqualFold"))
}

// KindContainsFold is the resolver for the kindContainsFold field.
func (r *phoneNumberWhereInputResolver) KindContainsFold(ctx context.Context, obj *generated.PhoneNumberWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: KindContainsFold - kindContainsFold"))
}

// Kind is the resolver for the kind field.
func (r *updatePhoneNumberInputResolver) Kind(ctx context.Context, obj *generated.UpdatePhoneNumberInput, data *string) error {
	panic(fmt.Errorf("not implemented: Kind - kind"))
}

// PhoneNumber returns PhoneNumberResolver implementation.
func (r *Resolver) PhoneNumber() PhoneNumberResolver { return &phoneNumberResolver{r} }

// PhoneNumberHistory returns PhoneNumberHistoryResolver implementation.
func (r *Resolver) PhoneNumberHistory() PhoneNumberHistoryResolver {
	return &phoneNumberHistoryResolver{r}
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// CreateEntityInput returns CreateEntityInputResolver implementation.
func (r *Resolver) CreateEntityInput() CreateEntityInputResolver {
	return &createEntityInputResolver{r}
}

// CreateGroupInput returns CreateGroupInputResolver implementation.
func (r *Resolver) CreateGroupInput() CreateGroupInputResolver { return &createGroupInputResolver{r} }

// CreateOrganizationInput returns CreateOrganizationInputResolver implementation.
func (r *Resolver) CreateOrganizationInput() CreateOrganizationInputResolver {
	return &createOrganizationInputResolver{r}
}

// CreatePhoneNumberInput returns CreatePhoneNumberInputResolver implementation.
func (r *Resolver) CreatePhoneNumberInput() CreatePhoneNumberInputResolver {
	return &createPhoneNumberInputResolver{r}
}

// PhoneNumberHistoryWhereInput returns PhoneNumberHistoryWhereInputResolver implementation.
func (r *Resolver) PhoneNumberHistoryWhereInput() PhoneNumberHistoryWhereInputResolver {
	return &phoneNumberHistoryWhereInputResolver{r}
}

// PhoneNumberWhereInput returns PhoneNumberWhereInputResolver implementation.
func (r *Resolver) PhoneNumberWhereInput() PhoneNumberWhereInputResolver {
	return &phoneNumberWhereInputResolver{r}
}

// UpdateEntityInput returns UpdateEntityInputResolver implementation.
func (r *Resolver) UpdateEntityInput() UpdateEntityInputResolver {
	return &updateEntityInputResolver{r}
}

// UpdateGroupInput returns UpdateGroupInputResolver implementation.
func (r *Resolver) UpdateGroupInput() UpdateGroupInputResolver { return &updateGroupInputResolver{r} }

// UpdateOrganizationInput returns UpdateOrganizationInputResolver implementation.
func (r *Resolver) UpdateOrganizationInput() UpdateOrganizationInputResolver {
	return &updateOrganizationInputResolver{r}
}

// UpdatePhoneNumberInput returns UpdatePhoneNumberInputResolver implementation.
func (r *Resolver) UpdatePhoneNumberInput() UpdatePhoneNumberInputResolver {
	return &updatePhoneNumberInputResolver{r}
}

// UpdateTFASettingInput returns UpdateTFASettingInputResolver implementation.
func (r *Resolver) UpdateTFASettingInput() UpdateTFASettingInputResolver {
	return &updateTFASettingInputResolver{r}
}

type phoneNumberResolver struct{ *Resolver }
type phoneNumberHistoryResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type createEntityInputResolver struct{ *Resolver }
type createGroupInputResolver struct{ *Resolver }
type createOrganizationInputResolver struct{ *Resolver }
type createPhoneNumberInputResolver struct{ *Resolver }
type phoneNumberHistoryWhereInputResolver struct{ *Resolver }
type phoneNumberWhereInputResolver struct{ *Resolver }
type updateEntityInputResolver struct{ *Resolver }
type updateGroupInputResolver struct{ *Resolver }
type updateOrganizationInputResolver struct{ *Resolver }
type updatePhoneNumberInputResolver struct{ *Resolver }
type updateTFASettingInputResolver struct{ *Resolver }
