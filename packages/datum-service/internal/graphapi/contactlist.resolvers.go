package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/datum-cloud/datum-os/internal/ent/generated"
	"github.com/datum-cloud/datum-os/pkg/rout"
)

// CreateContactList is the resolver for the createContactList field.
func (r *mutationResolver) CreateContactList(ctx context.Context, input generated.CreateContactListInput) (*ContactListCreatePayload, error) {
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, input.OwnerID); err != nil {
		r.logger.Errorw("failed to set organization in auth context", "error", err)

		return nil, rout.NewMissingRequiredFieldError("owner_id")
	}

	res, err := withTransactionalMutation(ctx).ContactList.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "contactlist"}, r.logger)
	}

	return &ContactListCreatePayload{
		ContactList: res,
	}, nil
}

// CreateBulkContactList is the resolver for the createBulkContactList field.
func (r *mutationResolver) CreateBulkContactList(ctx context.Context, input []*generated.CreateContactListInput) (*ContactListBulkCreatePayload, error) {
	return r.bulkCreateContactList(ctx, input)
}

// CreateBulkCSVContactList is the resolver for the createBulkCSVContactList field.
func (r *mutationResolver) CreateBulkCSVContactList(ctx context.Context, input graphql.Upload) (*ContactListBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateContactListInput](input)
	if err != nil {
		r.logger.Errorw("failed to unmarshal bulk data", "error", err)

		return nil, err
	}

	return r.bulkCreateContactList(ctx, data)
}

// UpdateContactList is the resolver for the updateContactList field.
func (r *mutationResolver) UpdateContactList(ctx context.Context, id string, input generated.UpdateContactListInput) (*ContactListUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).ContactList.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "contactlist"}, r.logger)
	}
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, &res.OwnerID); err != nil {
		r.logger.Errorw("failed to set organization in auth context", "error", err)

		return nil, ErrPermissionDenied
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "contactlist"}, r.logger)
	}

	return &ContactListUpdatePayload{
		ContactList: res,
	}, nil
}

// DeleteContactList is the resolver for the deleteContactList field.
func (r *mutationResolver) DeleteContactList(ctx context.Context, id string) (*ContactListDeletePayload, error) {
	if err := withTransactionalMutation(ctx).ContactList.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "contactlist"}, r.logger)
	}

	if err := generated.ContactListEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &ContactListDeletePayload{
		DeletedID: id,
	}, nil
}

// ContactList is the resolver for the contactList field.
func (r *queryResolver) ContactList(ctx context.Context, id string) (*generated.ContactList, error) {
	res, err := withTransactionalMutation(ctx).ContactList.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "contactlist"}, r.logger)
	}

	return res, nil
}
