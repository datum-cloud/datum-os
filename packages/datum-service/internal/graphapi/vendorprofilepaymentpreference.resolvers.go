package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/datum-cloud/datum-os/internal/ent/generated"
	"github.com/datum-cloud/datum-os/pkg/rout"
)

// CreateVendorProfilePaymentPreference is the resolver for the createVendorProfilePaymentPreference field.
func (r *mutationResolver) CreateVendorProfilePaymentPreference(ctx context.Context, input generated.CreateVendorProfilePaymentPreferenceInput) (*VendorProfilePaymentPreferenceCreatePayload, error) {
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, input.OwnerID); err != nil {
		r.logger.Errorw("failed to set organization in auth context", "error", err)

		return nil, rout.NewMissingRequiredFieldError("owner_id")
	}

	res, err := withTransactionalMutation(ctx).VendorProfilePaymentPreference.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "vendorprofilepaymentpreference"}, r.logger)
	}

	return &VendorProfilePaymentPreferenceCreatePayload{
		VendorProfilePaymentPreference: res,
	}, nil
}

// CreateBulkVendorProfilePaymentPreference is the resolver for the createBulkVendorProfilePaymentPreference field.
func (r *mutationResolver) CreateBulkVendorProfilePaymentPreference(ctx context.Context, input []*generated.CreateVendorProfilePaymentPreferenceInput) (*VendorProfilePaymentPreferenceBulkCreatePayload, error) {
	return r.bulkCreateVendorProfilePaymentPreference(ctx, input)
}

// CreateBulkCSVVendorProfilePaymentPreference is the resolver for the createBulkCSVVendorProfilePaymentPreference field.
func (r *mutationResolver) CreateBulkCSVVendorProfilePaymentPreference(ctx context.Context, input graphql.Upload) (*VendorProfilePaymentPreferenceBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateVendorProfilePaymentPreferenceInput](input)
	if err != nil {
		r.logger.Errorw("failed to unmarshal bulk data", "error", err)

		return nil, err
	}

	return r.bulkCreateVendorProfilePaymentPreference(ctx, data)
}

// UpdateVendorProfilePaymentPreference is the resolver for the updateVendorProfilePaymentPreference field.
func (r *mutationResolver) UpdateVendorProfilePaymentPreference(ctx context.Context, id string, input generated.UpdateVendorProfilePaymentPreferenceInput) (*VendorProfilePaymentPreferenceUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).VendorProfilePaymentPreference.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "vendorprofilepaymentpreference"}, r.logger)
	}
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, &res.OwnerID); err != nil {
		r.logger.Errorw("failed to set organization in auth context", "error", err)

		return nil, ErrPermissionDenied
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "vendorprofilepaymentpreference"}, r.logger)
	}

	return &VendorProfilePaymentPreferenceUpdatePayload{
		VendorProfilePaymentPreference: res,
	}, nil
}

// DeleteVendorProfilePaymentPreference is the resolver for the deleteVendorProfilePaymentPreference field.
func (r *mutationResolver) DeleteVendorProfilePaymentPreference(ctx context.Context, id string) (*VendorProfilePaymentPreferenceDeletePayload, error) {
	if err := withTransactionalMutation(ctx).VendorProfilePaymentPreference.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "vendorprofilepaymentpreference"}, r.logger)
	}

	if err := generated.VendorProfilePaymentPreferenceEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &VendorProfilePaymentPreferenceDeletePayload{
		DeletedID: id,
	}, nil
}

// VendorProfilePaymentPreference is the resolver for the vendorProfilePaymentPreference field.
func (r *queryResolver) VendorProfilePaymentPreference(ctx context.Context, id string) (*generated.VendorProfilePaymentPreference, error) {
	res, err := withTransactionalMutation(ctx).VendorProfilePaymentPreference.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "vendorprofilepaymentpreference"}, r.logger)
	}

	return res, nil
}
