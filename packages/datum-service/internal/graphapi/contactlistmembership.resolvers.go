package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/datum-cloud/datum-os/internal/ent/generated"
)

// CreateContactListMembership is the resolver for the createContactListMembership field.
func (r *mutationResolver) CreateContactListMembership(ctx context.Context, input generated.CreateContactListMembershipInput) (*ContactListMembershipCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).ContactListMembership.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "contactlistmembership"}, r.logger)
	}

	return &ContactListMembershipCreatePayload{
		ContactListMembership: res,
	}, nil
}

// CreateBulkContactListMembership is the resolver for the createBulkContactListMembership field.
func (r *mutationResolver) CreateBulkContactListMembership(ctx context.Context, input []*generated.CreateContactListMembershipInput) (*ContactListMembershipBulkCreatePayload, error) {
	return r.bulkCreateContactListMembership(ctx, input)
}

// CreateBulkCSVContactListMembership is the resolver for the createBulkCSVContactListMembership field.
func (r *mutationResolver) CreateBulkCSVContactListMembership(ctx context.Context, input graphql.Upload) (*ContactListMembershipBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateContactListMembershipInput](input)
	if err != nil {
		r.logger.Errorw("failed to unmarshal bulk data", "error", err)

		return nil, err
	}

	return r.bulkCreateContactListMembership(ctx, data)
}

// UpdateContactListMembership is the resolver for the updateContactListMembership field.
func (r *mutationResolver) UpdateContactListMembership(ctx context.Context, id string, input generated.UpdateContactListMembershipInput) (*ContactListMembershipUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).ContactListMembership.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "contactlistmembership"}, r.logger)
	}

	// setup update request
	req := res.Update().SetInput(input)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "contactlistmembership"}, r.logger)
	}

	return &ContactListMembershipUpdatePayload{
		ContactListMembership: res,
	}, nil
}

// DeleteContactListMembership is the resolver for the deleteContactListMembership field.
func (r *mutationResolver) DeleteContactListMembership(ctx context.Context, id string) (*ContactListMembershipDeletePayload, error) {
	if err := withTransactionalMutation(ctx).ContactListMembership.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "contactlistmembership"}, r.logger)
	}

	if err := generated.ContactListMembershipEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &ContactListMembershipDeletePayload{
		DeletedID: id,
	}, nil
}

// ContactListMembership is the resolver for the contactListMembership field.
func (r *queryResolver) ContactListMembership(ctx context.Context, id string) (*generated.ContactListMembership, error) {
	res, err := withTransactionalMutation(ctx).ContactListMembership.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "contactlistmembership"}, r.logger)
	}

	return res, nil
}
