// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contact"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contactlist"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contactlistmembership"
	"github.com/datum-cloud/datum-os/internal/ent/generated/event"
)

// ContactListMembershipCreate is the builder for creating a ContactListMembership entity.
type ContactListMembershipCreate struct {
	config
	mutation *ContactListMembershipMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (clmc *ContactListMembershipCreate) SetCreatedAt(t time.Time) *ContactListMembershipCreate {
	clmc.mutation.SetCreatedAt(t)
	return clmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (clmc *ContactListMembershipCreate) SetNillableCreatedAt(t *time.Time) *ContactListMembershipCreate {
	if t != nil {
		clmc.SetCreatedAt(*t)
	}
	return clmc
}

// SetUpdatedAt sets the "updated_at" field.
func (clmc *ContactListMembershipCreate) SetUpdatedAt(t time.Time) *ContactListMembershipCreate {
	clmc.mutation.SetUpdatedAt(t)
	return clmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (clmc *ContactListMembershipCreate) SetNillableUpdatedAt(t *time.Time) *ContactListMembershipCreate {
	if t != nil {
		clmc.SetUpdatedAt(*t)
	}
	return clmc
}

// SetCreatedBy sets the "created_by" field.
func (clmc *ContactListMembershipCreate) SetCreatedBy(s string) *ContactListMembershipCreate {
	clmc.mutation.SetCreatedBy(s)
	return clmc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (clmc *ContactListMembershipCreate) SetNillableCreatedBy(s *string) *ContactListMembershipCreate {
	if s != nil {
		clmc.SetCreatedBy(*s)
	}
	return clmc
}

// SetUpdatedBy sets the "updated_by" field.
func (clmc *ContactListMembershipCreate) SetUpdatedBy(s string) *ContactListMembershipCreate {
	clmc.mutation.SetUpdatedBy(s)
	return clmc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (clmc *ContactListMembershipCreate) SetNillableUpdatedBy(s *string) *ContactListMembershipCreate {
	if s != nil {
		clmc.SetUpdatedBy(*s)
	}
	return clmc
}

// SetMappingID sets the "mapping_id" field.
func (clmc *ContactListMembershipCreate) SetMappingID(s string) *ContactListMembershipCreate {
	clmc.mutation.SetMappingID(s)
	return clmc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (clmc *ContactListMembershipCreate) SetNillableMappingID(s *string) *ContactListMembershipCreate {
	if s != nil {
		clmc.SetMappingID(*s)
	}
	return clmc
}

// SetDeletedAt sets the "deleted_at" field.
func (clmc *ContactListMembershipCreate) SetDeletedAt(t time.Time) *ContactListMembershipCreate {
	clmc.mutation.SetDeletedAt(t)
	return clmc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (clmc *ContactListMembershipCreate) SetNillableDeletedAt(t *time.Time) *ContactListMembershipCreate {
	if t != nil {
		clmc.SetDeletedAt(*t)
	}
	return clmc
}

// SetDeletedBy sets the "deleted_by" field.
func (clmc *ContactListMembershipCreate) SetDeletedBy(s string) *ContactListMembershipCreate {
	clmc.mutation.SetDeletedBy(s)
	return clmc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (clmc *ContactListMembershipCreate) SetNillableDeletedBy(s *string) *ContactListMembershipCreate {
	if s != nil {
		clmc.SetDeletedBy(*s)
	}
	return clmc
}

// SetContactListID sets the "contact_list_id" field.
func (clmc *ContactListMembershipCreate) SetContactListID(s string) *ContactListMembershipCreate {
	clmc.mutation.SetContactListID(s)
	return clmc
}

// SetContactID sets the "contact_id" field.
func (clmc *ContactListMembershipCreate) SetContactID(s string) *ContactListMembershipCreate {
	clmc.mutation.SetContactID(s)
	return clmc
}

// SetID sets the "id" field.
func (clmc *ContactListMembershipCreate) SetID(s string) *ContactListMembershipCreate {
	clmc.mutation.SetID(s)
	return clmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (clmc *ContactListMembershipCreate) SetNillableID(s *string) *ContactListMembershipCreate {
	if s != nil {
		clmc.SetID(*s)
	}
	return clmc
}

// SetContactList sets the "contact_list" edge to the ContactList entity.
func (clmc *ContactListMembershipCreate) SetContactList(c *ContactList) *ContactListMembershipCreate {
	return clmc.SetContactListID(c.ID)
}

// SetContact sets the "contact" edge to the Contact entity.
func (clmc *ContactListMembershipCreate) SetContact(c *Contact) *ContactListMembershipCreate {
	return clmc.SetContactID(c.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (clmc *ContactListMembershipCreate) AddEventIDs(ids ...string) *ContactListMembershipCreate {
	clmc.mutation.AddEventIDs(ids...)
	return clmc
}

// AddEvents adds the "events" edges to the Event entity.
func (clmc *ContactListMembershipCreate) AddEvents(e ...*Event) *ContactListMembershipCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return clmc.AddEventIDs(ids...)
}

// Mutation returns the ContactListMembershipMutation object of the builder.
func (clmc *ContactListMembershipCreate) Mutation() *ContactListMembershipMutation {
	return clmc.mutation
}

// Save creates the ContactListMembership in the database.
func (clmc *ContactListMembershipCreate) Save(ctx context.Context) (*ContactListMembership, error) {
	if err := clmc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, clmc.sqlSave, clmc.mutation, clmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (clmc *ContactListMembershipCreate) SaveX(ctx context.Context) *ContactListMembership {
	v, err := clmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clmc *ContactListMembershipCreate) Exec(ctx context.Context) error {
	_, err := clmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clmc *ContactListMembershipCreate) ExecX(ctx context.Context) {
	if err := clmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clmc *ContactListMembershipCreate) defaults() error {
	if _, ok := clmc.mutation.CreatedAt(); !ok {
		if contactlistmembership.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized contactlistmembership.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := contactlistmembership.DefaultCreatedAt()
		clmc.mutation.SetCreatedAt(v)
	}
	if _, ok := clmc.mutation.UpdatedAt(); !ok {
		if contactlistmembership.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized contactlistmembership.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := contactlistmembership.DefaultUpdatedAt()
		clmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := clmc.mutation.MappingID(); !ok {
		if contactlistmembership.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized contactlistmembership.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := contactlistmembership.DefaultMappingID()
		clmc.mutation.SetMappingID(v)
	}
	if _, ok := clmc.mutation.ID(); !ok {
		if contactlistmembership.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized contactlistmembership.DefaultID (forgotten import generated/runtime?)")
		}
		v := contactlistmembership.DefaultID()
		clmc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (clmc *ContactListMembershipCreate) check() error {
	if _, ok := clmc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "ContactListMembership.mapping_id"`)}
	}
	if _, ok := clmc.mutation.ContactListID(); !ok {
		return &ValidationError{Name: "contact_list_id", err: errors.New(`generated: missing required field "ContactListMembership.contact_list_id"`)}
	}
	if _, ok := clmc.mutation.ContactID(); !ok {
		return &ValidationError{Name: "contact_id", err: errors.New(`generated: missing required field "ContactListMembership.contact_id"`)}
	}
	if len(clmc.mutation.ContactListIDs()) == 0 {
		return &ValidationError{Name: "contact_list", err: errors.New(`generated: missing required edge "ContactListMembership.contact_list"`)}
	}
	if len(clmc.mutation.ContactIDs()) == 0 {
		return &ValidationError{Name: "contact", err: errors.New(`generated: missing required edge "ContactListMembership.contact"`)}
	}
	return nil
}

func (clmc *ContactListMembershipCreate) sqlSave(ctx context.Context) (*ContactListMembership, error) {
	if err := clmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := clmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ContactListMembership.ID type: %T", _spec.ID.Value)
		}
	}
	clmc.mutation.id = &_node.ID
	clmc.mutation.done = true
	return _node, nil
}

func (clmc *ContactListMembershipCreate) createSpec() (*ContactListMembership, *sqlgraph.CreateSpec) {
	var (
		_node = &ContactListMembership{config: clmc.config}
		_spec = sqlgraph.NewCreateSpec(contactlistmembership.Table, sqlgraph.NewFieldSpec(contactlistmembership.FieldID, field.TypeString))
	)
	_spec.Schema = clmc.schemaConfig.ContactListMembership
	if id, ok := clmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := clmc.mutation.CreatedAt(); ok {
		_spec.SetField(contactlistmembership.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := clmc.mutation.UpdatedAt(); ok {
		_spec.SetField(contactlistmembership.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := clmc.mutation.CreatedBy(); ok {
		_spec.SetField(contactlistmembership.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := clmc.mutation.UpdatedBy(); ok {
		_spec.SetField(contactlistmembership.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := clmc.mutation.MappingID(); ok {
		_spec.SetField(contactlistmembership.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := clmc.mutation.DeletedAt(); ok {
		_spec.SetField(contactlistmembership.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := clmc.mutation.DeletedBy(); ok {
		_spec.SetField(contactlistmembership.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if nodes := clmc.mutation.ContactListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contactlistmembership.ContactListTable,
			Columns: []string{contactlistmembership.ContactListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactlist.FieldID, field.TypeString),
			},
		}
		edge.Schema = clmc.schemaConfig.ContactListMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ContactListID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := clmc.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contactlistmembership.ContactTable,
			Columns: []string{contactlistmembership.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = clmc.schemaConfig.ContactListMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ContactID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := clmc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactlistmembership.EventsTable,
			Columns: []string{contactlistmembership.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = clmc.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ContactListMembershipCreateBulk is the builder for creating many ContactListMembership entities in bulk.
type ContactListMembershipCreateBulk struct {
	config
	err      error
	builders []*ContactListMembershipCreate
}

// Save creates the ContactListMembership entities in the database.
func (clmcb *ContactListMembershipCreateBulk) Save(ctx context.Context) ([]*ContactListMembership, error) {
	if clmcb.err != nil {
		return nil, clmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(clmcb.builders))
	nodes := make([]*ContactListMembership, len(clmcb.builders))
	mutators := make([]Mutator, len(clmcb.builders))
	for i := range clmcb.builders {
		func(i int, root context.Context) {
			builder := clmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContactListMembershipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clmcb *ContactListMembershipCreateBulk) SaveX(ctx context.Context) []*ContactListMembership {
	v, err := clmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clmcb *ContactListMembershipCreateBulk) Exec(ctx context.Context) error {
	_, err := clmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clmcb *ContactListMembershipCreateBulk) ExecX(ctx context.Context) {
	if err := clmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
