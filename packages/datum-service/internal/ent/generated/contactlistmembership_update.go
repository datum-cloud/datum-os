// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contactlistmembership"
	"github.com/datum-cloud/datum-os/internal/ent/generated/event"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// ContactListMembershipUpdate is the builder for updating ContactListMembership entities.
type ContactListMembershipUpdate struct {
	config
	hooks    []Hook
	mutation *ContactListMembershipMutation
}

// Where appends a list predicates to the ContactListMembershipUpdate builder.
func (clmu *ContactListMembershipUpdate) Where(ps ...predicate.ContactListMembership) *ContactListMembershipUpdate {
	clmu.mutation.Where(ps...)
	return clmu
}

// SetUpdatedAt sets the "updated_at" field.
func (clmu *ContactListMembershipUpdate) SetUpdatedAt(t time.Time) *ContactListMembershipUpdate {
	clmu.mutation.SetUpdatedAt(t)
	return clmu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (clmu *ContactListMembershipUpdate) ClearUpdatedAt() *ContactListMembershipUpdate {
	clmu.mutation.ClearUpdatedAt()
	return clmu
}

// SetUpdatedBy sets the "updated_by" field.
func (clmu *ContactListMembershipUpdate) SetUpdatedBy(s string) *ContactListMembershipUpdate {
	clmu.mutation.SetUpdatedBy(s)
	return clmu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (clmu *ContactListMembershipUpdate) SetNillableUpdatedBy(s *string) *ContactListMembershipUpdate {
	if s != nil {
		clmu.SetUpdatedBy(*s)
	}
	return clmu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (clmu *ContactListMembershipUpdate) ClearUpdatedBy() *ContactListMembershipUpdate {
	clmu.mutation.ClearUpdatedBy()
	return clmu
}

// SetDeletedAt sets the "deleted_at" field.
func (clmu *ContactListMembershipUpdate) SetDeletedAt(t time.Time) *ContactListMembershipUpdate {
	clmu.mutation.SetDeletedAt(t)
	return clmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (clmu *ContactListMembershipUpdate) SetNillableDeletedAt(t *time.Time) *ContactListMembershipUpdate {
	if t != nil {
		clmu.SetDeletedAt(*t)
	}
	return clmu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (clmu *ContactListMembershipUpdate) ClearDeletedAt() *ContactListMembershipUpdate {
	clmu.mutation.ClearDeletedAt()
	return clmu
}

// SetDeletedBy sets the "deleted_by" field.
func (clmu *ContactListMembershipUpdate) SetDeletedBy(s string) *ContactListMembershipUpdate {
	clmu.mutation.SetDeletedBy(s)
	return clmu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (clmu *ContactListMembershipUpdate) SetNillableDeletedBy(s *string) *ContactListMembershipUpdate {
	if s != nil {
		clmu.SetDeletedBy(*s)
	}
	return clmu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (clmu *ContactListMembershipUpdate) ClearDeletedBy() *ContactListMembershipUpdate {
	clmu.mutation.ClearDeletedBy()
	return clmu
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (clmu *ContactListMembershipUpdate) AddEventIDs(ids ...string) *ContactListMembershipUpdate {
	clmu.mutation.AddEventIDs(ids...)
	return clmu
}

// AddEvents adds the "events" edges to the Event entity.
func (clmu *ContactListMembershipUpdate) AddEvents(e ...*Event) *ContactListMembershipUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return clmu.AddEventIDs(ids...)
}

// Mutation returns the ContactListMembershipMutation object of the builder.
func (clmu *ContactListMembershipUpdate) Mutation() *ContactListMembershipMutation {
	return clmu.mutation
}

// ClearEvents clears all "events" edges to the Event entity.
func (clmu *ContactListMembershipUpdate) ClearEvents() *ContactListMembershipUpdate {
	clmu.mutation.ClearEvents()
	return clmu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (clmu *ContactListMembershipUpdate) RemoveEventIDs(ids ...string) *ContactListMembershipUpdate {
	clmu.mutation.RemoveEventIDs(ids...)
	return clmu
}

// RemoveEvents removes "events" edges to Event entities.
func (clmu *ContactListMembershipUpdate) RemoveEvents(e ...*Event) *ContactListMembershipUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return clmu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clmu *ContactListMembershipUpdate) Save(ctx context.Context) (int, error) {
	if err := clmu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, clmu.sqlSave, clmu.mutation, clmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clmu *ContactListMembershipUpdate) SaveX(ctx context.Context) int {
	affected, err := clmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clmu *ContactListMembershipUpdate) Exec(ctx context.Context) error {
	_, err := clmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clmu *ContactListMembershipUpdate) ExecX(ctx context.Context) {
	if err := clmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clmu *ContactListMembershipUpdate) defaults() error {
	if _, ok := clmu.mutation.UpdatedAt(); !ok && !clmu.mutation.UpdatedAtCleared() {
		if contactlistmembership.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized contactlistmembership.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := contactlistmembership.UpdateDefaultUpdatedAt()
		clmu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (clmu *ContactListMembershipUpdate) check() error {
	if clmu.mutation.ContactListCleared() && len(clmu.mutation.ContactListIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ContactListMembership.contact_list"`)
	}
	if clmu.mutation.ContactCleared() && len(clmu.mutation.ContactIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ContactListMembership.contact"`)
	}
	return nil
}

func (clmu *ContactListMembershipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := clmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(contactlistmembership.Table, contactlistmembership.Columns, sqlgraph.NewFieldSpec(contactlistmembership.FieldID, field.TypeString))
	if ps := clmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if clmu.mutation.CreatedAtCleared() {
		_spec.ClearField(contactlistmembership.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := clmu.mutation.UpdatedAt(); ok {
		_spec.SetField(contactlistmembership.FieldUpdatedAt, field.TypeTime, value)
	}
	if clmu.mutation.UpdatedAtCleared() {
		_spec.ClearField(contactlistmembership.FieldUpdatedAt, field.TypeTime)
	}
	if clmu.mutation.CreatedByCleared() {
		_spec.ClearField(contactlistmembership.FieldCreatedBy, field.TypeString)
	}
	if value, ok := clmu.mutation.UpdatedBy(); ok {
		_spec.SetField(contactlistmembership.FieldUpdatedBy, field.TypeString, value)
	}
	if clmu.mutation.UpdatedByCleared() {
		_spec.ClearField(contactlistmembership.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := clmu.mutation.DeletedAt(); ok {
		_spec.SetField(contactlistmembership.FieldDeletedAt, field.TypeTime, value)
	}
	if clmu.mutation.DeletedAtCleared() {
		_spec.ClearField(contactlistmembership.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := clmu.mutation.DeletedBy(); ok {
		_spec.SetField(contactlistmembership.FieldDeletedBy, field.TypeString, value)
	}
	if clmu.mutation.DeletedByCleared() {
		_spec.ClearField(contactlistmembership.FieldDeletedBy, field.TypeString)
	}
	if clmu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactlistmembership.EventsTable,
			Columns: []string{contactlistmembership.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = clmu.schemaConfig.Event
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clmu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !clmu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactlistmembership.EventsTable,
			Columns: []string{contactlistmembership.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = clmu.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clmu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactlistmembership.EventsTable,
			Columns: []string{contactlistmembership.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = clmu.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = clmu.schemaConfig.ContactListMembership
	ctx = internal.NewSchemaConfigContext(ctx, clmu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, clmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactlistmembership.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	clmu.mutation.done = true
	return n, nil
}

// ContactListMembershipUpdateOne is the builder for updating a single ContactListMembership entity.
type ContactListMembershipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContactListMembershipMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (clmuo *ContactListMembershipUpdateOne) SetUpdatedAt(t time.Time) *ContactListMembershipUpdateOne {
	clmuo.mutation.SetUpdatedAt(t)
	return clmuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (clmuo *ContactListMembershipUpdateOne) ClearUpdatedAt() *ContactListMembershipUpdateOne {
	clmuo.mutation.ClearUpdatedAt()
	return clmuo
}

// SetUpdatedBy sets the "updated_by" field.
func (clmuo *ContactListMembershipUpdateOne) SetUpdatedBy(s string) *ContactListMembershipUpdateOne {
	clmuo.mutation.SetUpdatedBy(s)
	return clmuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (clmuo *ContactListMembershipUpdateOne) SetNillableUpdatedBy(s *string) *ContactListMembershipUpdateOne {
	if s != nil {
		clmuo.SetUpdatedBy(*s)
	}
	return clmuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (clmuo *ContactListMembershipUpdateOne) ClearUpdatedBy() *ContactListMembershipUpdateOne {
	clmuo.mutation.ClearUpdatedBy()
	return clmuo
}

// SetDeletedAt sets the "deleted_at" field.
func (clmuo *ContactListMembershipUpdateOne) SetDeletedAt(t time.Time) *ContactListMembershipUpdateOne {
	clmuo.mutation.SetDeletedAt(t)
	return clmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (clmuo *ContactListMembershipUpdateOne) SetNillableDeletedAt(t *time.Time) *ContactListMembershipUpdateOne {
	if t != nil {
		clmuo.SetDeletedAt(*t)
	}
	return clmuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (clmuo *ContactListMembershipUpdateOne) ClearDeletedAt() *ContactListMembershipUpdateOne {
	clmuo.mutation.ClearDeletedAt()
	return clmuo
}

// SetDeletedBy sets the "deleted_by" field.
func (clmuo *ContactListMembershipUpdateOne) SetDeletedBy(s string) *ContactListMembershipUpdateOne {
	clmuo.mutation.SetDeletedBy(s)
	return clmuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (clmuo *ContactListMembershipUpdateOne) SetNillableDeletedBy(s *string) *ContactListMembershipUpdateOne {
	if s != nil {
		clmuo.SetDeletedBy(*s)
	}
	return clmuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (clmuo *ContactListMembershipUpdateOne) ClearDeletedBy() *ContactListMembershipUpdateOne {
	clmuo.mutation.ClearDeletedBy()
	return clmuo
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (clmuo *ContactListMembershipUpdateOne) AddEventIDs(ids ...string) *ContactListMembershipUpdateOne {
	clmuo.mutation.AddEventIDs(ids...)
	return clmuo
}

// AddEvents adds the "events" edges to the Event entity.
func (clmuo *ContactListMembershipUpdateOne) AddEvents(e ...*Event) *ContactListMembershipUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return clmuo.AddEventIDs(ids...)
}

// Mutation returns the ContactListMembershipMutation object of the builder.
func (clmuo *ContactListMembershipUpdateOne) Mutation() *ContactListMembershipMutation {
	return clmuo.mutation
}

// ClearEvents clears all "events" edges to the Event entity.
func (clmuo *ContactListMembershipUpdateOne) ClearEvents() *ContactListMembershipUpdateOne {
	clmuo.mutation.ClearEvents()
	return clmuo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (clmuo *ContactListMembershipUpdateOne) RemoveEventIDs(ids ...string) *ContactListMembershipUpdateOne {
	clmuo.mutation.RemoveEventIDs(ids...)
	return clmuo
}

// RemoveEvents removes "events" edges to Event entities.
func (clmuo *ContactListMembershipUpdateOne) RemoveEvents(e ...*Event) *ContactListMembershipUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return clmuo.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the ContactListMembershipUpdate builder.
func (clmuo *ContactListMembershipUpdateOne) Where(ps ...predicate.ContactListMembership) *ContactListMembershipUpdateOne {
	clmuo.mutation.Where(ps...)
	return clmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (clmuo *ContactListMembershipUpdateOne) Select(field string, fields ...string) *ContactListMembershipUpdateOne {
	clmuo.fields = append([]string{field}, fields...)
	return clmuo
}

// Save executes the query and returns the updated ContactListMembership entity.
func (clmuo *ContactListMembershipUpdateOne) Save(ctx context.Context) (*ContactListMembership, error) {
	if err := clmuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, clmuo.sqlSave, clmuo.mutation, clmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clmuo *ContactListMembershipUpdateOne) SaveX(ctx context.Context) *ContactListMembership {
	node, err := clmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (clmuo *ContactListMembershipUpdateOne) Exec(ctx context.Context) error {
	_, err := clmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clmuo *ContactListMembershipUpdateOne) ExecX(ctx context.Context) {
	if err := clmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clmuo *ContactListMembershipUpdateOne) defaults() error {
	if _, ok := clmuo.mutation.UpdatedAt(); !ok && !clmuo.mutation.UpdatedAtCleared() {
		if contactlistmembership.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized contactlistmembership.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := contactlistmembership.UpdateDefaultUpdatedAt()
		clmuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (clmuo *ContactListMembershipUpdateOne) check() error {
	if clmuo.mutation.ContactListCleared() && len(clmuo.mutation.ContactListIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ContactListMembership.contact_list"`)
	}
	if clmuo.mutation.ContactCleared() && len(clmuo.mutation.ContactIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ContactListMembership.contact"`)
	}
	return nil
}

func (clmuo *ContactListMembershipUpdateOne) sqlSave(ctx context.Context) (_node *ContactListMembership, err error) {
	if err := clmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contactlistmembership.Table, contactlistmembership.Columns, sqlgraph.NewFieldSpec(contactlistmembership.FieldID, field.TypeString))
	id, ok := clmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ContactListMembership.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := clmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contactlistmembership.FieldID)
		for _, f := range fields {
			if !contactlistmembership.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != contactlistmembership.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := clmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if clmuo.mutation.CreatedAtCleared() {
		_spec.ClearField(contactlistmembership.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := clmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(contactlistmembership.FieldUpdatedAt, field.TypeTime, value)
	}
	if clmuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(contactlistmembership.FieldUpdatedAt, field.TypeTime)
	}
	if clmuo.mutation.CreatedByCleared() {
		_spec.ClearField(contactlistmembership.FieldCreatedBy, field.TypeString)
	}
	if value, ok := clmuo.mutation.UpdatedBy(); ok {
		_spec.SetField(contactlistmembership.FieldUpdatedBy, field.TypeString, value)
	}
	if clmuo.mutation.UpdatedByCleared() {
		_spec.ClearField(contactlistmembership.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := clmuo.mutation.DeletedAt(); ok {
		_spec.SetField(contactlistmembership.FieldDeletedAt, field.TypeTime, value)
	}
	if clmuo.mutation.DeletedAtCleared() {
		_spec.ClearField(contactlistmembership.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := clmuo.mutation.DeletedBy(); ok {
		_spec.SetField(contactlistmembership.FieldDeletedBy, field.TypeString, value)
	}
	if clmuo.mutation.DeletedByCleared() {
		_spec.ClearField(contactlistmembership.FieldDeletedBy, field.TypeString)
	}
	if clmuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactlistmembership.EventsTable,
			Columns: []string{contactlistmembership.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = clmuo.schemaConfig.Event
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clmuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !clmuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactlistmembership.EventsTable,
			Columns: []string{contactlistmembership.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = clmuo.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clmuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactlistmembership.EventsTable,
			Columns: []string{contactlistmembership.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = clmuo.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = clmuo.schemaConfig.ContactListMembership
	ctx = internal.NewSchemaConfigContext(ctx, clmuo.schemaConfig)
	_node = &ContactListMembership{config: clmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, clmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactlistmembership.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	clmuo.mutation.done = true
	return _node, nil
}
