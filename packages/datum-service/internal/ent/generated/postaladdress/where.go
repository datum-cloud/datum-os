// Code generated by ent, DO NOT EDIT.

package postaladdress

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldDeletedBy, v))
}

// MappingID applies equality check predicate on the "mapping_id" field. It's identical to MappingIDEQ.
func MappingID(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldMappingID, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldOwnerID, v))
}

// RegionCode applies equality check predicate on the "region_code" field. It's identical to RegionCodeEQ.
func RegionCode(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldRegionCode, v))
}

// LanguageCode applies equality check predicate on the "language_code" field. It's identical to LanguageCodeEQ.
func LanguageCode(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldLanguageCode, v))
}

// PostalCode applies equality check predicate on the "postal_code" field. It's identical to PostalCodeEQ.
func PostalCode(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldPostalCode, v))
}

// SortingCode applies equality check predicate on the "sorting_code" field. It's identical to SortingCodeEQ.
func SortingCode(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldSortingCode, v))
}

// AdministrativeArea applies equality check predicate on the "administrative_area" field. It's identical to AdministrativeAreaEQ.
func AdministrativeArea(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldAdministrativeArea, v))
}

// Locality applies equality check predicate on the "locality" field. It's identical to LocalityEQ.
func Locality(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldLocality, v))
}

// Sublocality applies equality check predicate on the "sublocality" field. It's identical to SublocalityEQ.
func Sublocality(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldSublocality, v))
}

// Organization applies equality check predicate on the "organization" field. It's identical to OrganizationEQ.
func Organization(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldOrganization, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContainsFold(FieldDeletedBy, v))
}

// MappingIDEQ applies the EQ predicate on the "mapping_id" field.
func MappingIDEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldMappingID, v))
}

// MappingIDNEQ applies the NEQ predicate on the "mapping_id" field.
func MappingIDNEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNEQ(FieldMappingID, v))
}

// MappingIDIn applies the In predicate on the "mapping_id" field.
func MappingIDIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIn(FieldMappingID, vs...))
}

// MappingIDNotIn applies the NotIn predicate on the "mapping_id" field.
func MappingIDNotIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotIn(FieldMappingID, vs...))
}

// MappingIDGT applies the GT predicate on the "mapping_id" field.
func MappingIDGT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGT(FieldMappingID, v))
}

// MappingIDGTE applies the GTE predicate on the "mapping_id" field.
func MappingIDGTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGTE(FieldMappingID, v))
}

// MappingIDLT applies the LT predicate on the "mapping_id" field.
func MappingIDLT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLT(FieldMappingID, v))
}

// MappingIDLTE applies the LTE predicate on the "mapping_id" field.
func MappingIDLTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLTE(FieldMappingID, v))
}

// MappingIDContains applies the Contains predicate on the "mapping_id" field.
func MappingIDContains(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContains(FieldMappingID, v))
}

// MappingIDHasPrefix applies the HasPrefix predicate on the "mapping_id" field.
func MappingIDHasPrefix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasPrefix(FieldMappingID, v))
}

// MappingIDHasSuffix applies the HasSuffix predicate on the "mapping_id" field.
func MappingIDHasSuffix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasSuffix(FieldMappingID, v))
}

// MappingIDEqualFold applies the EqualFold predicate on the "mapping_id" field.
func MappingIDEqualFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEqualFold(FieldMappingID, v))
}

// MappingIDContainsFold applies the ContainsFold predicate on the "mapping_id" field.
func MappingIDContainsFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContainsFold(FieldMappingID, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotNull(FieldTags))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContains(FieldOwnerID, v))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasPrefix(FieldOwnerID, v))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasSuffix(FieldOwnerID, v))
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIsNull(FieldOwnerID))
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotNull(FieldOwnerID))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEqualFold(FieldOwnerID, v))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContainsFold(FieldOwnerID, v))
}

// RegionCodeEQ applies the EQ predicate on the "region_code" field.
func RegionCodeEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldRegionCode, v))
}

// RegionCodeNEQ applies the NEQ predicate on the "region_code" field.
func RegionCodeNEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNEQ(FieldRegionCode, v))
}

// RegionCodeIn applies the In predicate on the "region_code" field.
func RegionCodeIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIn(FieldRegionCode, vs...))
}

// RegionCodeNotIn applies the NotIn predicate on the "region_code" field.
func RegionCodeNotIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotIn(FieldRegionCode, vs...))
}

// RegionCodeGT applies the GT predicate on the "region_code" field.
func RegionCodeGT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGT(FieldRegionCode, v))
}

// RegionCodeGTE applies the GTE predicate on the "region_code" field.
func RegionCodeGTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGTE(FieldRegionCode, v))
}

// RegionCodeLT applies the LT predicate on the "region_code" field.
func RegionCodeLT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLT(FieldRegionCode, v))
}

// RegionCodeLTE applies the LTE predicate on the "region_code" field.
func RegionCodeLTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLTE(FieldRegionCode, v))
}

// RegionCodeContains applies the Contains predicate on the "region_code" field.
func RegionCodeContains(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContains(FieldRegionCode, v))
}

// RegionCodeHasPrefix applies the HasPrefix predicate on the "region_code" field.
func RegionCodeHasPrefix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasPrefix(FieldRegionCode, v))
}

// RegionCodeHasSuffix applies the HasSuffix predicate on the "region_code" field.
func RegionCodeHasSuffix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasSuffix(FieldRegionCode, v))
}

// RegionCodeEqualFold applies the EqualFold predicate on the "region_code" field.
func RegionCodeEqualFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEqualFold(FieldRegionCode, v))
}

// RegionCodeContainsFold applies the ContainsFold predicate on the "region_code" field.
func RegionCodeContainsFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContainsFold(FieldRegionCode, v))
}

// LanguageCodeEQ applies the EQ predicate on the "language_code" field.
func LanguageCodeEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldLanguageCode, v))
}

// LanguageCodeNEQ applies the NEQ predicate on the "language_code" field.
func LanguageCodeNEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNEQ(FieldLanguageCode, v))
}

// LanguageCodeIn applies the In predicate on the "language_code" field.
func LanguageCodeIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIn(FieldLanguageCode, vs...))
}

// LanguageCodeNotIn applies the NotIn predicate on the "language_code" field.
func LanguageCodeNotIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotIn(FieldLanguageCode, vs...))
}

// LanguageCodeGT applies the GT predicate on the "language_code" field.
func LanguageCodeGT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGT(FieldLanguageCode, v))
}

// LanguageCodeGTE applies the GTE predicate on the "language_code" field.
func LanguageCodeGTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGTE(FieldLanguageCode, v))
}

// LanguageCodeLT applies the LT predicate on the "language_code" field.
func LanguageCodeLT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLT(FieldLanguageCode, v))
}

// LanguageCodeLTE applies the LTE predicate on the "language_code" field.
func LanguageCodeLTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLTE(FieldLanguageCode, v))
}

// LanguageCodeContains applies the Contains predicate on the "language_code" field.
func LanguageCodeContains(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContains(FieldLanguageCode, v))
}

// LanguageCodeHasPrefix applies the HasPrefix predicate on the "language_code" field.
func LanguageCodeHasPrefix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasPrefix(FieldLanguageCode, v))
}

// LanguageCodeHasSuffix applies the HasSuffix predicate on the "language_code" field.
func LanguageCodeHasSuffix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasSuffix(FieldLanguageCode, v))
}

// LanguageCodeIsNil applies the IsNil predicate on the "language_code" field.
func LanguageCodeIsNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIsNull(FieldLanguageCode))
}

// LanguageCodeNotNil applies the NotNil predicate on the "language_code" field.
func LanguageCodeNotNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotNull(FieldLanguageCode))
}

// LanguageCodeEqualFold applies the EqualFold predicate on the "language_code" field.
func LanguageCodeEqualFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEqualFold(FieldLanguageCode, v))
}

// LanguageCodeContainsFold applies the ContainsFold predicate on the "language_code" field.
func LanguageCodeContainsFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContainsFold(FieldLanguageCode, v))
}

// PostalCodeEQ applies the EQ predicate on the "postal_code" field.
func PostalCodeEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldPostalCode, v))
}

// PostalCodeNEQ applies the NEQ predicate on the "postal_code" field.
func PostalCodeNEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNEQ(FieldPostalCode, v))
}

// PostalCodeIn applies the In predicate on the "postal_code" field.
func PostalCodeIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIn(FieldPostalCode, vs...))
}

// PostalCodeNotIn applies the NotIn predicate on the "postal_code" field.
func PostalCodeNotIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotIn(FieldPostalCode, vs...))
}

// PostalCodeGT applies the GT predicate on the "postal_code" field.
func PostalCodeGT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGT(FieldPostalCode, v))
}

// PostalCodeGTE applies the GTE predicate on the "postal_code" field.
func PostalCodeGTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGTE(FieldPostalCode, v))
}

// PostalCodeLT applies the LT predicate on the "postal_code" field.
func PostalCodeLT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLT(FieldPostalCode, v))
}

// PostalCodeLTE applies the LTE predicate on the "postal_code" field.
func PostalCodeLTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLTE(FieldPostalCode, v))
}

// PostalCodeContains applies the Contains predicate on the "postal_code" field.
func PostalCodeContains(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContains(FieldPostalCode, v))
}

// PostalCodeHasPrefix applies the HasPrefix predicate on the "postal_code" field.
func PostalCodeHasPrefix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasPrefix(FieldPostalCode, v))
}

// PostalCodeHasSuffix applies the HasSuffix predicate on the "postal_code" field.
func PostalCodeHasSuffix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasSuffix(FieldPostalCode, v))
}

// PostalCodeIsNil applies the IsNil predicate on the "postal_code" field.
func PostalCodeIsNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIsNull(FieldPostalCode))
}

// PostalCodeNotNil applies the NotNil predicate on the "postal_code" field.
func PostalCodeNotNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotNull(FieldPostalCode))
}

// PostalCodeEqualFold applies the EqualFold predicate on the "postal_code" field.
func PostalCodeEqualFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEqualFold(FieldPostalCode, v))
}

// PostalCodeContainsFold applies the ContainsFold predicate on the "postal_code" field.
func PostalCodeContainsFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContainsFold(FieldPostalCode, v))
}

// SortingCodeEQ applies the EQ predicate on the "sorting_code" field.
func SortingCodeEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldSortingCode, v))
}

// SortingCodeNEQ applies the NEQ predicate on the "sorting_code" field.
func SortingCodeNEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNEQ(FieldSortingCode, v))
}

// SortingCodeIn applies the In predicate on the "sorting_code" field.
func SortingCodeIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIn(FieldSortingCode, vs...))
}

// SortingCodeNotIn applies the NotIn predicate on the "sorting_code" field.
func SortingCodeNotIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotIn(FieldSortingCode, vs...))
}

// SortingCodeGT applies the GT predicate on the "sorting_code" field.
func SortingCodeGT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGT(FieldSortingCode, v))
}

// SortingCodeGTE applies the GTE predicate on the "sorting_code" field.
func SortingCodeGTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGTE(FieldSortingCode, v))
}

// SortingCodeLT applies the LT predicate on the "sorting_code" field.
func SortingCodeLT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLT(FieldSortingCode, v))
}

// SortingCodeLTE applies the LTE predicate on the "sorting_code" field.
func SortingCodeLTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLTE(FieldSortingCode, v))
}

// SortingCodeContains applies the Contains predicate on the "sorting_code" field.
func SortingCodeContains(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContains(FieldSortingCode, v))
}

// SortingCodeHasPrefix applies the HasPrefix predicate on the "sorting_code" field.
func SortingCodeHasPrefix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasPrefix(FieldSortingCode, v))
}

// SortingCodeHasSuffix applies the HasSuffix predicate on the "sorting_code" field.
func SortingCodeHasSuffix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasSuffix(FieldSortingCode, v))
}

// SortingCodeIsNil applies the IsNil predicate on the "sorting_code" field.
func SortingCodeIsNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIsNull(FieldSortingCode))
}

// SortingCodeNotNil applies the NotNil predicate on the "sorting_code" field.
func SortingCodeNotNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotNull(FieldSortingCode))
}

// SortingCodeEqualFold applies the EqualFold predicate on the "sorting_code" field.
func SortingCodeEqualFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEqualFold(FieldSortingCode, v))
}

// SortingCodeContainsFold applies the ContainsFold predicate on the "sorting_code" field.
func SortingCodeContainsFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContainsFold(FieldSortingCode, v))
}

// AdministrativeAreaEQ applies the EQ predicate on the "administrative_area" field.
func AdministrativeAreaEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldAdministrativeArea, v))
}

// AdministrativeAreaNEQ applies the NEQ predicate on the "administrative_area" field.
func AdministrativeAreaNEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNEQ(FieldAdministrativeArea, v))
}

// AdministrativeAreaIn applies the In predicate on the "administrative_area" field.
func AdministrativeAreaIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIn(FieldAdministrativeArea, vs...))
}

// AdministrativeAreaNotIn applies the NotIn predicate on the "administrative_area" field.
func AdministrativeAreaNotIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotIn(FieldAdministrativeArea, vs...))
}

// AdministrativeAreaGT applies the GT predicate on the "administrative_area" field.
func AdministrativeAreaGT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGT(FieldAdministrativeArea, v))
}

// AdministrativeAreaGTE applies the GTE predicate on the "administrative_area" field.
func AdministrativeAreaGTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGTE(FieldAdministrativeArea, v))
}

// AdministrativeAreaLT applies the LT predicate on the "administrative_area" field.
func AdministrativeAreaLT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLT(FieldAdministrativeArea, v))
}

// AdministrativeAreaLTE applies the LTE predicate on the "administrative_area" field.
func AdministrativeAreaLTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLTE(FieldAdministrativeArea, v))
}

// AdministrativeAreaContains applies the Contains predicate on the "administrative_area" field.
func AdministrativeAreaContains(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContains(FieldAdministrativeArea, v))
}

// AdministrativeAreaHasPrefix applies the HasPrefix predicate on the "administrative_area" field.
func AdministrativeAreaHasPrefix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasPrefix(FieldAdministrativeArea, v))
}

// AdministrativeAreaHasSuffix applies the HasSuffix predicate on the "administrative_area" field.
func AdministrativeAreaHasSuffix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasSuffix(FieldAdministrativeArea, v))
}

// AdministrativeAreaIsNil applies the IsNil predicate on the "administrative_area" field.
func AdministrativeAreaIsNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIsNull(FieldAdministrativeArea))
}

// AdministrativeAreaNotNil applies the NotNil predicate on the "administrative_area" field.
func AdministrativeAreaNotNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotNull(FieldAdministrativeArea))
}

// AdministrativeAreaEqualFold applies the EqualFold predicate on the "administrative_area" field.
func AdministrativeAreaEqualFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEqualFold(FieldAdministrativeArea, v))
}

// AdministrativeAreaContainsFold applies the ContainsFold predicate on the "administrative_area" field.
func AdministrativeAreaContainsFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContainsFold(FieldAdministrativeArea, v))
}

// LocalityEQ applies the EQ predicate on the "locality" field.
func LocalityEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldLocality, v))
}

// LocalityNEQ applies the NEQ predicate on the "locality" field.
func LocalityNEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNEQ(FieldLocality, v))
}

// LocalityIn applies the In predicate on the "locality" field.
func LocalityIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIn(FieldLocality, vs...))
}

// LocalityNotIn applies the NotIn predicate on the "locality" field.
func LocalityNotIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotIn(FieldLocality, vs...))
}

// LocalityGT applies the GT predicate on the "locality" field.
func LocalityGT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGT(FieldLocality, v))
}

// LocalityGTE applies the GTE predicate on the "locality" field.
func LocalityGTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGTE(FieldLocality, v))
}

// LocalityLT applies the LT predicate on the "locality" field.
func LocalityLT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLT(FieldLocality, v))
}

// LocalityLTE applies the LTE predicate on the "locality" field.
func LocalityLTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLTE(FieldLocality, v))
}

// LocalityContains applies the Contains predicate on the "locality" field.
func LocalityContains(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContains(FieldLocality, v))
}

// LocalityHasPrefix applies the HasPrefix predicate on the "locality" field.
func LocalityHasPrefix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasPrefix(FieldLocality, v))
}

// LocalityHasSuffix applies the HasSuffix predicate on the "locality" field.
func LocalityHasSuffix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasSuffix(FieldLocality, v))
}

// LocalityIsNil applies the IsNil predicate on the "locality" field.
func LocalityIsNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIsNull(FieldLocality))
}

// LocalityNotNil applies the NotNil predicate on the "locality" field.
func LocalityNotNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotNull(FieldLocality))
}

// LocalityEqualFold applies the EqualFold predicate on the "locality" field.
func LocalityEqualFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEqualFold(FieldLocality, v))
}

// LocalityContainsFold applies the ContainsFold predicate on the "locality" field.
func LocalityContainsFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContainsFold(FieldLocality, v))
}

// SublocalityEQ applies the EQ predicate on the "sublocality" field.
func SublocalityEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldSublocality, v))
}

// SublocalityNEQ applies the NEQ predicate on the "sublocality" field.
func SublocalityNEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNEQ(FieldSublocality, v))
}

// SublocalityIn applies the In predicate on the "sublocality" field.
func SublocalityIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIn(FieldSublocality, vs...))
}

// SublocalityNotIn applies the NotIn predicate on the "sublocality" field.
func SublocalityNotIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotIn(FieldSublocality, vs...))
}

// SublocalityGT applies the GT predicate on the "sublocality" field.
func SublocalityGT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGT(FieldSublocality, v))
}

// SublocalityGTE applies the GTE predicate on the "sublocality" field.
func SublocalityGTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGTE(FieldSublocality, v))
}

// SublocalityLT applies the LT predicate on the "sublocality" field.
func SublocalityLT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLT(FieldSublocality, v))
}

// SublocalityLTE applies the LTE predicate on the "sublocality" field.
func SublocalityLTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLTE(FieldSublocality, v))
}

// SublocalityContains applies the Contains predicate on the "sublocality" field.
func SublocalityContains(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContains(FieldSublocality, v))
}

// SublocalityHasPrefix applies the HasPrefix predicate on the "sublocality" field.
func SublocalityHasPrefix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasPrefix(FieldSublocality, v))
}

// SublocalityHasSuffix applies the HasSuffix predicate on the "sublocality" field.
func SublocalityHasSuffix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasSuffix(FieldSublocality, v))
}

// SublocalityIsNil applies the IsNil predicate on the "sublocality" field.
func SublocalityIsNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIsNull(FieldSublocality))
}

// SublocalityNotNil applies the NotNil predicate on the "sublocality" field.
func SublocalityNotNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotNull(FieldSublocality))
}

// SublocalityEqualFold applies the EqualFold predicate on the "sublocality" field.
func SublocalityEqualFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEqualFold(FieldSublocality, v))
}

// SublocalityContainsFold applies the ContainsFold predicate on the "sublocality" field.
func SublocalityContainsFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContainsFold(FieldSublocality, v))
}

// OrganizationEQ applies the EQ predicate on the "organization" field.
func OrganizationEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEQ(FieldOrganization, v))
}

// OrganizationNEQ applies the NEQ predicate on the "organization" field.
func OrganizationNEQ(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNEQ(FieldOrganization, v))
}

// OrganizationIn applies the In predicate on the "organization" field.
func OrganizationIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIn(FieldOrganization, vs...))
}

// OrganizationNotIn applies the NotIn predicate on the "organization" field.
func OrganizationNotIn(vs ...string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotIn(FieldOrganization, vs...))
}

// OrganizationGT applies the GT predicate on the "organization" field.
func OrganizationGT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGT(FieldOrganization, v))
}

// OrganizationGTE applies the GTE predicate on the "organization" field.
func OrganizationGTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldGTE(FieldOrganization, v))
}

// OrganizationLT applies the LT predicate on the "organization" field.
func OrganizationLT(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLT(FieldOrganization, v))
}

// OrganizationLTE applies the LTE predicate on the "organization" field.
func OrganizationLTE(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldLTE(FieldOrganization, v))
}

// OrganizationContains applies the Contains predicate on the "organization" field.
func OrganizationContains(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContains(FieldOrganization, v))
}

// OrganizationHasPrefix applies the HasPrefix predicate on the "organization" field.
func OrganizationHasPrefix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasPrefix(FieldOrganization, v))
}

// OrganizationHasSuffix applies the HasSuffix predicate on the "organization" field.
func OrganizationHasSuffix(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldHasSuffix(FieldOrganization, v))
}

// OrganizationIsNil applies the IsNil predicate on the "organization" field.
func OrganizationIsNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldIsNull(FieldOrganization))
}

// OrganizationNotNil applies the NotNil predicate on the "organization" field.
func OrganizationNotNil() predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldNotNull(FieldOrganization))
}

// OrganizationEqualFold applies the EqualFold predicate on the "organization" field.
func OrganizationEqualFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldEqualFold(FieldOrganization, v))
}

// OrganizationContainsFold applies the ContainsFold predicate on the "organization" field.
func OrganizationContainsFold(v string) predicate.PostalAddress {
	return predicate.PostalAddress(sql.FieldContainsFold(FieldOrganization, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.PostalAddress {
	return predicate.PostalAddress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.PostalAddress
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Organization) predicate.PostalAddress {
	return predicate.PostalAddress(func(s *sql.Selector) {
		step := newOwnerStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.PostalAddress
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvents applies the HasEdge predicate on the "events" edge.
func HasEvents() predicate.PostalAddress {
	return predicate.PostalAddress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventsTable, EventsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.Event
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventsWith applies the HasEdge predicate on the "events" edge with a given conditions (other predicates).
func HasEventsWith(preds ...predicate.Event) predicate.PostalAddress {
	return predicate.PostalAddress(func(s *sql.Selector) {
		step := newEventsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.Event
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProfile applies the HasEdge predicate on the "profile" edge.
func HasProfile() predicate.PostalAddress {
	return predicate.PostalAddress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProfileTable, ProfilePrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.VendorProfile
		step.Edge.Schema = schemaConfig.VendorProfilePostalAddress
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileWith applies the HasEdge predicate on the "profile" edge with a given conditions (other predicates).
func HasProfileWith(preds ...predicate.VendorProfile) predicate.PostalAddress {
	return predicate.PostalAddress(func(s *sql.Selector) {
		step := newProfileStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.VendorProfile
		step.Edge.Schema = schemaConfig.VendorProfilePostalAddress
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVendorProfilePostalAddresses applies the HasEdge predicate on the "vendor_profile_postal_addresses" edge.
func HasVendorProfilePostalAddresses() predicate.PostalAddress {
	return predicate.PostalAddress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, VendorProfilePostalAddressesTable, VendorProfilePostalAddressesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.VendorProfilePostalAddress
		step.Edge.Schema = schemaConfig.VendorProfilePostalAddress
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVendorProfilePostalAddressesWith applies the HasEdge predicate on the "vendor_profile_postal_addresses" edge with a given conditions (other predicates).
func HasVendorProfilePostalAddressesWith(preds ...predicate.VendorProfilePostalAddress) predicate.PostalAddress {
	return predicate.PostalAddress(func(s *sql.Selector) {
		step := newVendorProfilePostalAddressesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.VendorProfilePostalAddress
		step.Edge.Schema = schemaConfig.VendorProfilePostalAddress
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PostalAddress) predicate.PostalAddress {
	return predicate.PostalAddress(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PostalAddress) predicate.PostalAddress {
	return predicate.PostalAddress(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PostalAddress) predicate.PostalAddress {
	return predicate.PostalAddress(sql.NotPredicates(p))
}
