// Code generated by ent, DO NOT EDIT.

package postaladdress

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the postaladdress type in the database.
	Label = "postal_address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldMappingID holds the string denoting the mapping_id field in the database.
	FieldMappingID = "mapping_id"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldRegionCode holds the string denoting the region_code field in the database.
	FieldRegionCode = "region_code"
	// FieldLanguageCode holds the string denoting the language_code field in the database.
	FieldLanguageCode = "language_code"
	// FieldPostalCode holds the string denoting the postal_code field in the database.
	FieldPostalCode = "postal_code"
	// FieldSortingCode holds the string denoting the sorting_code field in the database.
	FieldSortingCode = "sorting_code"
	// FieldAdministrativeArea holds the string denoting the administrative_area field in the database.
	FieldAdministrativeArea = "administrative_area"
	// FieldLocality holds the string denoting the locality field in the database.
	FieldLocality = "locality"
	// FieldSublocality holds the string denoting the sublocality field in the database.
	FieldSublocality = "sublocality"
	// FieldAddressLines holds the string denoting the address_lines field in the database.
	FieldAddressLines = "address_lines"
	// FieldRecipients holds the string denoting the recipients field in the database.
	FieldRecipients = "recipients"
	// FieldOrganization holds the string denoting the organization field in the database.
	FieldOrganization = "organization"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "events"
	// EdgeProfile holds the string denoting the profile edge name in mutations.
	EdgeProfile = "profile"
	// EdgeVendorProfilePostalAddresses holds the string denoting the vendor_profile_postal_addresses edge name in mutations.
	EdgeVendorProfilePostalAddresses = "vendor_profile_postal_addresses"
	// Table holds the table name of the postaladdress in the database.
	Table = "postal_addresses"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "postal_addresses"
	// OwnerInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OwnerInverseTable = "organizations"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// EventsTable is the table that holds the events relation/edge.
	EventsTable = "events"
	// EventsInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventsInverseTable = "events"
	// EventsColumn is the table column denoting the events relation/edge.
	EventsColumn = "postal_address_events"
	// ProfileTable is the table that holds the profile relation/edge. The primary key declared below.
	ProfileTable = "vendor_profile_postal_addresses"
	// ProfileInverseTable is the table name for the VendorProfile entity.
	// It exists in this package in order to avoid circular dependency with the "vendorprofile" package.
	ProfileInverseTable = "vendor_profiles"
	// VendorProfilePostalAddressesTable is the table that holds the vendor_profile_postal_addresses relation/edge.
	VendorProfilePostalAddressesTable = "vendor_profile_postal_addresses"
	// VendorProfilePostalAddressesInverseTable is the table name for the VendorProfilePostalAddress entity.
	// It exists in this package in order to avoid circular dependency with the "vendorprofilepostaladdress" package.
	VendorProfilePostalAddressesInverseTable = "vendor_profile_postal_addresses"
	// VendorProfilePostalAddressesColumn is the table column denoting the vendor_profile_postal_addresses relation/edge.
	VendorProfilePostalAddressesColumn = "postal_address_id"
)

// Columns holds all SQL columns for postaladdress fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldMappingID,
	FieldTags,
	FieldOwnerID,
	FieldRegionCode,
	FieldLanguageCode,
	FieldPostalCode,
	FieldSortingCode,
	FieldAdministrativeArea,
	FieldLocality,
	FieldSublocality,
	FieldAddressLines,
	FieldRecipients,
	FieldOrganization,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "postal_addresses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"entity_postal_addresses",
}

var (
	// ProfilePrimaryKey and ProfileColumn2 are the table columns denoting the
	// primary key for the profile relation (M2M).
	ProfilePrimaryKey = []string{"vendor_profile_id", "postal_address_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/datum-cloud/datum-os/internal/ent/generated/runtime"
var (
	Hooks        [4]ent.Hook
	Interceptors [2]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultMappingID holds the default value on creation for the "mapping_id" field.
	DefaultMappingID func() string
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// OwnerIDValidator is a validator for the "owner_id" field. It is called by the builders before save.
	OwnerIDValidator func(string) error
	// RegionCodeValidator is a validator for the "region_code" field. It is called by the builders before save.
	RegionCodeValidator func(string) error
	// LanguageCodeValidator is a validator for the "language_code" field. It is called by the builders before save.
	LanguageCodeValidator func(string) error
	// PostalCodeValidator is a validator for the "postal_code" field. It is called by the builders before save.
	PostalCodeValidator func(string) error
	// SortingCodeValidator is a validator for the "sorting_code" field. It is called by the builders before save.
	SortingCodeValidator func(string) error
	// AdministrativeAreaValidator is a validator for the "administrative_area" field. It is called by the builders before save.
	AdministrativeAreaValidator func(string) error
	// LocalityValidator is a validator for the "locality" field. It is called by the builders before save.
	LocalityValidator func(string) error
	// SublocalityValidator is a validator for the "sublocality" field. It is called by the builders before save.
	SublocalityValidator func(string) error
	// OrganizationValidator is a validator for the "organization" field. It is called by the builders before save.
	OrganizationValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the PostalAddress queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByMappingID orders the results by the mapping_id field.
func ByMappingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMappingID, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByRegionCode orders the results by the region_code field.
func ByRegionCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegionCode, opts...).ToFunc()
}

// ByLanguageCode orders the results by the language_code field.
func ByLanguageCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguageCode, opts...).ToFunc()
}

// ByPostalCode orders the results by the postal_code field.
func ByPostalCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostalCode, opts...).ToFunc()
}

// BySortingCode orders the results by the sorting_code field.
func BySortingCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSortingCode, opts...).ToFunc()
}

// ByAdministrativeArea orders the results by the administrative_area field.
func ByAdministrativeArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdministrativeArea, opts...).ToFunc()
}

// ByLocality orders the results by the locality field.
func ByLocality(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocality, opts...).ToFunc()
}

// BySublocality orders the results by the sublocality field.
func BySublocality(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSublocality, opts...).ToFunc()
}

// ByOrganization orders the results by the organization field.
func ByOrganization(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganization, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByEventsCount orders the results by events count.
func ByEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventsStep(), opts...)
	}
}

// ByEvents orders the results by events terms.
func ByEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProfileCount orders the results by profile count.
func ByProfileCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProfileStep(), opts...)
	}
}

// ByProfile orders the results by profile terms.
func ByProfile(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfileStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVendorProfilePostalAddressesCount orders the results by vendor_profile_postal_addresses count.
func ByVendorProfilePostalAddressesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVendorProfilePostalAddressesStep(), opts...)
	}
}

// ByVendorProfilePostalAddresses orders the results by vendor_profile_postal_addresses terms.
func ByVendorProfilePostalAddresses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVendorProfilePostalAddressesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EventsTable, EventsColumn),
	)
}
func newProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProfileTable, ProfilePrimaryKey...),
	)
}
func newVendorProfilePostalAddressesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VendorProfilePostalAddressesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, VendorProfilePostalAddressesTable, VendorProfilePostalAddressesColumn),
	)
}
