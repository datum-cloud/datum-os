// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/event"
	"github.com/datum-cloud/datum-os/internal/ent/generated/organization"
	"github.com/datum-cloud/datum-os/internal/ent/generated/postaladdress"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofile"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilepostaladdress"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// PostalAddressQuery is the builder for querying PostalAddress entities.
type PostalAddressQuery struct {
	config
	ctx                                   *QueryContext
	order                                 []postaladdress.OrderOption
	inters                                []Interceptor
	predicates                            []predicate.PostalAddress
	withOwner                             *OrganizationQuery
	withEvents                            *EventQuery
	withProfile                           *VendorProfileQuery
	withVendorProfilePostalAddresses      *VendorProfilePostalAddressQuery
	withFKs                               bool
	modifiers                             []func(*sql.Selector)
	loadTotal                             []func(context.Context, []*PostalAddress) error
	withNamedEvents                       map[string]*EventQuery
	withNamedProfile                      map[string]*VendorProfileQuery
	withNamedVendorProfilePostalAddresses map[string]*VendorProfilePostalAddressQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PostalAddressQuery builder.
func (paq *PostalAddressQuery) Where(ps ...predicate.PostalAddress) *PostalAddressQuery {
	paq.predicates = append(paq.predicates, ps...)
	return paq
}

// Limit the number of records to be returned by this query.
func (paq *PostalAddressQuery) Limit(limit int) *PostalAddressQuery {
	paq.ctx.Limit = &limit
	return paq
}

// Offset to start from.
func (paq *PostalAddressQuery) Offset(offset int) *PostalAddressQuery {
	paq.ctx.Offset = &offset
	return paq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (paq *PostalAddressQuery) Unique(unique bool) *PostalAddressQuery {
	paq.ctx.Unique = &unique
	return paq
}

// Order specifies how the records should be ordered.
func (paq *PostalAddressQuery) Order(o ...postaladdress.OrderOption) *PostalAddressQuery {
	paq.order = append(paq.order, o...)
	return paq
}

// QueryOwner chains the current query on the "owner" edge.
func (paq *PostalAddressQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: paq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := paq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := paq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(postaladdress.Table, postaladdress.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, postaladdress.OwnerTable, postaladdress.OwnerColumn),
		)
		schemaConfig := paq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.PostalAddress
		fromU = sqlgraph.SetNeighbors(paq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvents chains the current query on the "events" edge.
func (paq *PostalAddressQuery) QueryEvents() *EventQuery {
	query := (&EventClient{config: paq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := paq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := paq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(postaladdress.Table, postaladdress.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, postaladdress.EventsTable, postaladdress.EventsColumn),
		)
		schemaConfig := paq.schemaConfig
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.Event
		fromU = sqlgraph.SetNeighbors(paq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProfile chains the current query on the "profile" edge.
func (paq *PostalAddressQuery) QueryProfile() *VendorProfileQuery {
	query := (&VendorProfileClient{config: paq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := paq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := paq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(postaladdress.Table, postaladdress.FieldID, selector),
			sqlgraph.To(vendorprofile.Table, vendorprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, postaladdress.ProfileTable, postaladdress.ProfilePrimaryKey...),
		)
		schemaConfig := paq.schemaConfig
		step.To.Schema = schemaConfig.VendorProfile
		step.Edge.Schema = schemaConfig.VendorProfilePostalAddress
		fromU = sqlgraph.SetNeighbors(paq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVendorProfilePostalAddresses chains the current query on the "vendor_profile_postal_addresses" edge.
func (paq *PostalAddressQuery) QueryVendorProfilePostalAddresses() *VendorProfilePostalAddressQuery {
	query := (&VendorProfilePostalAddressClient{config: paq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := paq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := paq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(postaladdress.Table, postaladdress.FieldID, selector),
			sqlgraph.To(vendorprofilepostaladdress.Table, vendorprofilepostaladdress.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, postaladdress.VendorProfilePostalAddressesTable, postaladdress.VendorProfilePostalAddressesColumn),
		)
		schemaConfig := paq.schemaConfig
		step.To.Schema = schemaConfig.VendorProfilePostalAddress
		step.Edge.Schema = schemaConfig.VendorProfilePostalAddress
		fromU = sqlgraph.SetNeighbors(paq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PostalAddress entity from the query.
// Returns a *NotFoundError when no PostalAddress was found.
func (paq *PostalAddressQuery) First(ctx context.Context) (*PostalAddress, error) {
	nodes, err := paq.Limit(1).All(setContextOp(ctx, paq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{postaladdress.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (paq *PostalAddressQuery) FirstX(ctx context.Context) *PostalAddress {
	node, err := paq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PostalAddress ID from the query.
// Returns a *NotFoundError when no PostalAddress ID was found.
func (paq *PostalAddressQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = paq.Limit(1).IDs(setContextOp(ctx, paq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{postaladdress.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (paq *PostalAddressQuery) FirstIDX(ctx context.Context) string {
	id, err := paq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PostalAddress entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PostalAddress entity is found.
// Returns a *NotFoundError when no PostalAddress entities are found.
func (paq *PostalAddressQuery) Only(ctx context.Context) (*PostalAddress, error) {
	nodes, err := paq.Limit(2).All(setContextOp(ctx, paq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{postaladdress.Label}
	default:
		return nil, &NotSingularError{postaladdress.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (paq *PostalAddressQuery) OnlyX(ctx context.Context) *PostalAddress {
	node, err := paq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PostalAddress ID in the query.
// Returns a *NotSingularError when more than one PostalAddress ID is found.
// Returns a *NotFoundError when no entities are found.
func (paq *PostalAddressQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = paq.Limit(2).IDs(setContextOp(ctx, paq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{postaladdress.Label}
	default:
		err = &NotSingularError{postaladdress.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (paq *PostalAddressQuery) OnlyIDX(ctx context.Context) string {
	id, err := paq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PostalAddresses.
func (paq *PostalAddressQuery) All(ctx context.Context) ([]*PostalAddress, error) {
	ctx = setContextOp(ctx, paq.ctx, ent.OpQueryAll)
	if err := paq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PostalAddress, *PostalAddressQuery]()
	return withInterceptors[[]*PostalAddress](ctx, paq, qr, paq.inters)
}

// AllX is like All, but panics if an error occurs.
func (paq *PostalAddressQuery) AllX(ctx context.Context) []*PostalAddress {
	nodes, err := paq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PostalAddress IDs.
func (paq *PostalAddressQuery) IDs(ctx context.Context) (ids []string, err error) {
	if paq.ctx.Unique == nil && paq.path != nil {
		paq.Unique(true)
	}
	ctx = setContextOp(ctx, paq.ctx, ent.OpQueryIDs)
	if err = paq.Select(postaladdress.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (paq *PostalAddressQuery) IDsX(ctx context.Context) []string {
	ids, err := paq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (paq *PostalAddressQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, paq.ctx, ent.OpQueryCount)
	if err := paq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, paq, querierCount[*PostalAddressQuery](), paq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (paq *PostalAddressQuery) CountX(ctx context.Context) int {
	count, err := paq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (paq *PostalAddressQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, paq.ctx, ent.OpQueryExist)
	switch _, err := paq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (paq *PostalAddressQuery) ExistX(ctx context.Context) bool {
	exist, err := paq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PostalAddressQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (paq *PostalAddressQuery) Clone() *PostalAddressQuery {
	if paq == nil {
		return nil
	}
	return &PostalAddressQuery{
		config:                           paq.config,
		ctx:                              paq.ctx.Clone(),
		order:                            append([]postaladdress.OrderOption{}, paq.order...),
		inters:                           append([]Interceptor{}, paq.inters...),
		predicates:                       append([]predicate.PostalAddress{}, paq.predicates...),
		withOwner:                        paq.withOwner.Clone(),
		withEvents:                       paq.withEvents.Clone(),
		withProfile:                      paq.withProfile.Clone(),
		withVendorProfilePostalAddresses: paq.withVendorProfilePostalAddresses.Clone(),
		// clone intermediate query.
		sql:  paq.sql.Clone(),
		path: paq.path,
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (paq *PostalAddressQuery) WithOwner(opts ...func(*OrganizationQuery)) *PostalAddressQuery {
	query := (&OrganizationClient{config: paq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	paq.withOwner = query
	return paq
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (paq *PostalAddressQuery) WithEvents(opts ...func(*EventQuery)) *PostalAddressQuery {
	query := (&EventClient{config: paq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	paq.withEvents = query
	return paq
}

// WithProfile tells the query-builder to eager-load the nodes that are connected to
// the "profile" edge. The optional arguments are used to configure the query builder of the edge.
func (paq *PostalAddressQuery) WithProfile(opts ...func(*VendorProfileQuery)) *PostalAddressQuery {
	query := (&VendorProfileClient{config: paq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	paq.withProfile = query
	return paq
}

// WithVendorProfilePostalAddresses tells the query-builder to eager-load the nodes that are connected to
// the "vendor_profile_postal_addresses" edge. The optional arguments are used to configure the query builder of the edge.
func (paq *PostalAddressQuery) WithVendorProfilePostalAddresses(opts ...func(*VendorProfilePostalAddressQuery)) *PostalAddressQuery {
	query := (&VendorProfilePostalAddressClient{config: paq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	paq.withVendorProfilePostalAddresses = query
	return paq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PostalAddress.Query().
//		GroupBy(postaladdress.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (paq *PostalAddressQuery) GroupBy(field string, fields ...string) *PostalAddressGroupBy {
	paq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PostalAddressGroupBy{build: paq}
	grbuild.flds = &paq.ctx.Fields
	grbuild.label = postaladdress.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.PostalAddress.Query().
//		Select(postaladdress.FieldCreatedAt).
//		Scan(ctx, &v)
func (paq *PostalAddressQuery) Select(fields ...string) *PostalAddressSelect {
	paq.ctx.Fields = append(paq.ctx.Fields, fields...)
	sbuild := &PostalAddressSelect{PostalAddressQuery: paq}
	sbuild.label = postaladdress.Label
	sbuild.flds, sbuild.scan = &paq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PostalAddressSelect configured with the given aggregations.
func (paq *PostalAddressQuery) Aggregate(fns ...AggregateFunc) *PostalAddressSelect {
	return paq.Select().Aggregate(fns...)
}

func (paq *PostalAddressQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range paq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, paq); err != nil {
				return err
			}
		}
	}
	for _, f := range paq.ctx.Fields {
		if !postaladdress.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if paq.path != nil {
		prev, err := paq.path(ctx)
		if err != nil {
			return err
		}
		paq.sql = prev
	}
	if postaladdress.Policy == nil {
		return errors.New("generated: uninitialized postaladdress.Policy (forgotten import generated/runtime?)")
	}
	if err := postaladdress.Policy.EvalQuery(ctx, paq); err != nil {
		return err
	}
	return nil
}

func (paq *PostalAddressQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PostalAddress, error) {
	var (
		nodes       = []*PostalAddress{}
		withFKs     = paq.withFKs
		_spec       = paq.querySpec()
		loadedTypes = [4]bool{
			paq.withOwner != nil,
			paq.withEvents != nil,
			paq.withProfile != nil,
			paq.withVendorProfilePostalAddresses != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, postaladdress.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PostalAddress).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PostalAddress{config: paq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = paq.schemaConfig.PostalAddress
	ctx = internal.NewSchemaConfigContext(ctx, paq.schemaConfig)
	if len(paq.modifiers) > 0 {
		_spec.Modifiers = paq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, paq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := paq.withOwner; query != nil {
		if err := paq.loadOwner(ctx, query, nodes, nil,
			func(n *PostalAddress, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := paq.withEvents; query != nil {
		if err := paq.loadEvents(ctx, query, nodes,
			func(n *PostalAddress) { n.Edges.Events = []*Event{} },
			func(n *PostalAddress, e *Event) { n.Edges.Events = append(n.Edges.Events, e) }); err != nil {
			return nil, err
		}
	}
	if query := paq.withProfile; query != nil {
		if err := paq.loadProfile(ctx, query, nodes,
			func(n *PostalAddress) { n.Edges.Profile = []*VendorProfile{} },
			func(n *PostalAddress, e *VendorProfile) { n.Edges.Profile = append(n.Edges.Profile, e) }); err != nil {
			return nil, err
		}
	}
	if query := paq.withVendorProfilePostalAddresses; query != nil {
		if err := paq.loadVendorProfilePostalAddresses(ctx, query, nodes,
			func(n *PostalAddress) { n.Edges.VendorProfilePostalAddresses = []*VendorProfilePostalAddress{} },
			func(n *PostalAddress, e *VendorProfilePostalAddress) {
				n.Edges.VendorProfilePostalAddresses = append(n.Edges.VendorProfilePostalAddresses, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range paq.withNamedEvents {
		if err := paq.loadEvents(ctx, query, nodes,
			func(n *PostalAddress) { n.appendNamedEvents(name) },
			func(n *PostalAddress, e *Event) { n.appendNamedEvents(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range paq.withNamedProfile {
		if err := paq.loadProfile(ctx, query, nodes,
			func(n *PostalAddress) { n.appendNamedProfile(name) },
			func(n *PostalAddress, e *VendorProfile) { n.appendNamedProfile(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range paq.withNamedVendorProfilePostalAddresses {
		if err := paq.loadVendorProfilePostalAddresses(ctx, query, nodes,
			func(n *PostalAddress) { n.appendNamedVendorProfilePostalAddresses(name) },
			func(n *PostalAddress, e *VendorProfilePostalAddress) {
				n.appendNamedVendorProfilePostalAddresses(name, e)
			}); err != nil {
			return nil, err
		}
	}
	for i := range paq.loadTotal {
		if err := paq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (paq *PostalAddressQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*PostalAddress, init func(*PostalAddress), assign func(*PostalAddress, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*PostalAddress)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (paq *PostalAddressQuery) loadEvents(ctx context.Context, query *EventQuery, nodes []*PostalAddress, init func(*PostalAddress), assign func(*PostalAddress, *Event)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*PostalAddress)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Event(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(postaladdress.EventsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.postal_address_events
		if fk == nil {
			return fmt.Errorf(`foreign-key "postal_address_events" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "postal_address_events" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (paq *PostalAddressQuery) loadProfile(ctx context.Context, query *VendorProfileQuery, nodes []*PostalAddress, init func(*PostalAddress), assign func(*PostalAddress, *VendorProfile)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*PostalAddress)
	nids := make(map[string]map[*PostalAddress]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(postaladdress.ProfileTable)
		joinT.Schema(paq.schemaConfig.VendorProfilePostalAddress)
		s.Join(joinT).On(s.C(vendorprofile.FieldID), joinT.C(postaladdress.ProfilePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(postaladdress.ProfilePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(postaladdress.ProfilePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*PostalAddress]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*VendorProfile](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "profile" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (paq *PostalAddressQuery) loadVendorProfilePostalAddresses(ctx context.Context, query *VendorProfilePostalAddressQuery, nodes []*PostalAddress, init func(*PostalAddress), assign func(*PostalAddress, *VendorProfilePostalAddress)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*PostalAddress)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(vendorprofilepostaladdress.FieldPostalAddressID)
	}
	query.Where(predicate.VendorProfilePostalAddress(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(postaladdress.VendorProfilePostalAddressesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.PostalAddressID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "postal_address_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (paq *PostalAddressQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := paq.querySpec()
	_spec.Node.Schema = paq.schemaConfig.PostalAddress
	ctx = internal.NewSchemaConfigContext(ctx, paq.schemaConfig)
	if len(paq.modifiers) > 0 {
		_spec.Modifiers = paq.modifiers
	}
	_spec.Node.Columns = paq.ctx.Fields
	if len(paq.ctx.Fields) > 0 {
		_spec.Unique = paq.ctx.Unique != nil && *paq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, paq.driver, _spec)
}

func (paq *PostalAddressQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(postaladdress.Table, postaladdress.Columns, sqlgraph.NewFieldSpec(postaladdress.FieldID, field.TypeString))
	_spec.From = paq.sql
	if unique := paq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if paq.path != nil {
		_spec.Unique = true
	}
	if fields := paq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, postaladdress.FieldID)
		for i := range fields {
			if fields[i] != postaladdress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if paq.withOwner != nil {
			_spec.Node.AddColumnOnce(postaladdress.FieldOwnerID)
		}
	}
	if ps := paq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := paq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := paq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := paq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (paq *PostalAddressQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(paq.driver.Dialect())
	t1 := builder.Table(postaladdress.Table)
	columns := paq.ctx.Fields
	if len(columns) == 0 {
		columns = postaladdress.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if paq.sql != nil {
		selector = paq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if paq.ctx.Unique != nil && *paq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(paq.schemaConfig.PostalAddress)
	ctx = internal.NewSchemaConfigContext(ctx, paq.schemaConfig)
	selector.WithContext(ctx)
	for _, p := range paq.predicates {
		p(selector)
	}
	for _, p := range paq.order {
		p(selector)
	}
	if offset := paq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := paq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedEvents tells the query-builder to eager-load the nodes that are connected to the "events"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (paq *PostalAddressQuery) WithNamedEvents(name string, opts ...func(*EventQuery)) *PostalAddressQuery {
	query := (&EventClient{config: paq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if paq.withNamedEvents == nil {
		paq.withNamedEvents = make(map[string]*EventQuery)
	}
	paq.withNamedEvents[name] = query
	return paq
}

// WithNamedProfile tells the query-builder to eager-load the nodes that are connected to the "profile"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (paq *PostalAddressQuery) WithNamedProfile(name string, opts ...func(*VendorProfileQuery)) *PostalAddressQuery {
	query := (&VendorProfileClient{config: paq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if paq.withNamedProfile == nil {
		paq.withNamedProfile = make(map[string]*VendorProfileQuery)
	}
	paq.withNamedProfile[name] = query
	return paq
}

// WithNamedVendorProfilePostalAddresses tells the query-builder to eager-load the nodes that are connected to the "vendor_profile_postal_addresses"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (paq *PostalAddressQuery) WithNamedVendorProfilePostalAddresses(name string, opts ...func(*VendorProfilePostalAddressQuery)) *PostalAddressQuery {
	query := (&VendorProfilePostalAddressClient{config: paq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if paq.withNamedVendorProfilePostalAddresses == nil {
		paq.withNamedVendorProfilePostalAddresses = make(map[string]*VendorProfilePostalAddressQuery)
	}
	paq.withNamedVendorProfilePostalAddresses[name] = query
	return paq
}

// PostalAddressGroupBy is the group-by builder for PostalAddress entities.
type PostalAddressGroupBy struct {
	selector
	build *PostalAddressQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pagb *PostalAddressGroupBy) Aggregate(fns ...AggregateFunc) *PostalAddressGroupBy {
	pagb.fns = append(pagb.fns, fns...)
	return pagb
}

// Scan applies the selector query and scans the result into the given value.
func (pagb *PostalAddressGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pagb.build.ctx, ent.OpQueryGroupBy)
	if err := pagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PostalAddressQuery, *PostalAddressGroupBy](ctx, pagb.build, pagb, pagb.build.inters, v)
}

func (pagb *PostalAddressGroupBy) sqlScan(ctx context.Context, root *PostalAddressQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pagb.fns))
	for _, fn := range pagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pagb.flds)+len(pagb.fns))
		for _, f := range *pagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PostalAddressSelect is the builder for selecting fields of PostalAddress entities.
type PostalAddressSelect struct {
	*PostalAddressQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pas *PostalAddressSelect) Aggregate(fns ...AggregateFunc) *PostalAddressSelect {
	pas.fns = append(pas.fns, fns...)
	return pas
}

// Scan applies the selector query and scans the result into the given value.
func (pas *PostalAddressSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pas.ctx, ent.OpQuerySelect)
	if err := pas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PostalAddressQuery, *PostalAddressSelect](ctx, pas.PostalAddressQuery, pas, pas.inters, v)
}

func (pas *PostalAddressSelect) sqlScan(ctx context.Context, root *PostalAddressQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pas.fns))
	for _, fn := range pas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
