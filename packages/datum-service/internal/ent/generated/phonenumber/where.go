// Code generated by ent, DO NOT EDIT.

package phonenumber

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"
	"github.com/datum-cloud/datum-os/pkg/enums"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldDeletedBy, v))
}

// MappingID applies equality check predicate on the "mapping_id" field. It's identical to MappingIDEQ.
func MappingID(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldMappingID, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldOwnerID, v))
}

// RegionCode applies equality check predicate on the "region_code" field. It's identical to RegionCodeEQ.
func RegionCode(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldRegionCode, v))
}

// ShortCode applies equality check predicate on the "short_code" field. It's identical to ShortCodeEQ.
func ShortCode(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldShortCode, v))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldNumber, v))
}

// Extension applies equality check predicate on the "extension" field. It's identical to ExtensionEQ.
func Extension(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldExtension, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldContainsFold(FieldDeletedBy, v))
}

// MappingIDEQ applies the EQ predicate on the "mapping_id" field.
func MappingIDEQ(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldMappingID, v))
}

// MappingIDNEQ applies the NEQ predicate on the "mapping_id" field.
func MappingIDNEQ(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNEQ(FieldMappingID, v))
}

// MappingIDIn applies the In predicate on the "mapping_id" field.
func MappingIDIn(vs ...string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIn(FieldMappingID, vs...))
}

// MappingIDNotIn applies the NotIn predicate on the "mapping_id" field.
func MappingIDNotIn(vs ...string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotIn(FieldMappingID, vs...))
}

// MappingIDGT applies the GT predicate on the "mapping_id" field.
func MappingIDGT(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGT(FieldMappingID, v))
}

// MappingIDGTE applies the GTE predicate on the "mapping_id" field.
func MappingIDGTE(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGTE(FieldMappingID, v))
}

// MappingIDLT applies the LT predicate on the "mapping_id" field.
func MappingIDLT(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLT(FieldMappingID, v))
}

// MappingIDLTE applies the LTE predicate on the "mapping_id" field.
func MappingIDLTE(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLTE(FieldMappingID, v))
}

// MappingIDContains applies the Contains predicate on the "mapping_id" field.
func MappingIDContains(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldContains(FieldMappingID, v))
}

// MappingIDHasPrefix applies the HasPrefix predicate on the "mapping_id" field.
func MappingIDHasPrefix(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldHasPrefix(FieldMappingID, v))
}

// MappingIDHasSuffix applies the HasSuffix predicate on the "mapping_id" field.
func MappingIDHasSuffix(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldHasSuffix(FieldMappingID, v))
}

// MappingIDEqualFold applies the EqualFold predicate on the "mapping_id" field.
func MappingIDEqualFold(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEqualFold(FieldMappingID, v))
}

// MappingIDContainsFold applies the ContainsFold predicate on the "mapping_id" field.
func MappingIDContainsFold(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldContainsFold(FieldMappingID, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotNull(FieldTags))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldContains(FieldOwnerID, v))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldHasPrefix(FieldOwnerID, v))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldHasSuffix(FieldOwnerID, v))
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIsNull(FieldOwnerID))
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotNull(FieldOwnerID))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEqualFold(FieldOwnerID, v))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldContainsFold(FieldOwnerID, v))
}

// KindEQ applies the EQ predicate on the "kind" field.
func KindEQ(v enums.PhoneNumberType) predicate.PhoneNumber {
	vc := v
	return predicate.PhoneNumber(sql.FieldEQ(FieldKind, vc))
}

// KindNEQ applies the NEQ predicate on the "kind" field.
func KindNEQ(v enums.PhoneNumberType) predicate.PhoneNumber {
	vc := v
	return predicate.PhoneNumber(sql.FieldNEQ(FieldKind, vc))
}

// KindIn applies the In predicate on the "kind" field.
func KindIn(vs ...enums.PhoneNumberType) predicate.PhoneNumber {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PhoneNumber(sql.FieldIn(FieldKind, v...))
}

// KindNotIn applies the NotIn predicate on the "kind" field.
func KindNotIn(vs ...enums.PhoneNumberType) predicate.PhoneNumber {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PhoneNumber(sql.FieldNotIn(FieldKind, v...))
}

// RegionCodeEQ applies the EQ predicate on the "region_code" field.
func RegionCodeEQ(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldRegionCode, v))
}

// RegionCodeNEQ applies the NEQ predicate on the "region_code" field.
func RegionCodeNEQ(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNEQ(FieldRegionCode, v))
}

// RegionCodeIn applies the In predicate on the "region_code" field.
func RegionCodeIn(vs ...string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIn(FieldRegionCode, vs...))
}

// RegionCodeNotIn applies the NotIn predicate on the "region_code" field.
func RegionCodeNotIn(vs ...string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotIn(FieldRegionCode, vs...))
}

// RegionCodeGT applies the GT predicate on the "region_code" field.
func RegionCodeGT(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGT(FieldRegionCode, v))
}

// RegionCodeGTE applies the GTE predicate on the "region_code" field.
func RegionCodeGTE(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGTE(FieldRegionCode, v))
}

// RegionCodeLT applies the LT predicate on the "region_code" field.
func RegionCodeLT(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLT(FieldRegionCode, v))
}

// RegionCodeLTE applies the LTE predicate on the "region_code" field.
func RegionCodeLTE(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLTE(FieldRegionCode, v))
}

// RegionCodeContains applies the Contains predicate on the "region_code" field.
func RegionCodeContains(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldContains(FieldRegionCode, v))
}

// RegionCodeHasPrefix applies the HasPrefix predicate on the "region_code" field.
func RegionCodeHasPrefix(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldHasPrefix(FieldRegionCode, v))
}

// RegionCodeHasSuffix applies the HasSuffix predicate on the "region_code" field.
func RegionCodeHasSuffix(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldHasSuffix(FieldRegionCode, v))
}

// RegionCodeIsNil applies the IsNil predicate on the "region_code" field.
func RegionCodeIsNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIsNull(FieldRegionCode))
}

// RegionCodeNotNil applies the NotNil predicate on the "region_code" field.
func RegionCodeNotNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotNull(FieldRegionCode))
}

// RegionCodeEqualFold applies the EqualFold predicate on the "region_code" field.
func RegionCodeEqualFold(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEqualFold(FieldRegionCode, v))
}

// RegionCodeContainsFold applies the ContainsFold predicate on the "region_code" field.
func RegionCodeContainsFold(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldContainsFold(FieldRegionCode, v))
}

// ShortCodeEQ applies the EQ predicate on the "short_code" field.
func ShortCodeEQ(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldShortCode, v))
}

// ShortCodeNEQ applies the NEQ predicate on the "short_code" field.
func ShortCodeNEQ(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNEQ(FieldShortCode, v))
}

// ShortCodeIn applies the In predicate on the "short_code" field.
func ShortCodeIn(vs ...string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIn(FieldShortCode, vs...))
}

// ShortCodeNotIn applies the NotIn predicate on the "short_code" field.
func ShortCodeNotIn(vs ...string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotIn(FieldShortCode, vs...))
}

// ShortCodeGT applies the GT predicate on the "short_code" field.
func ShortCodeGT(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGT(FieldShortCode, v))
}

// ShortCodeGTE applies the GTE predicate on the "short_code" field.
func ShortCodeGTE(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGTE(FieldShortCode, v))
}

// ShortCodeLT applies the LT predicate on the "short_code" field.
func ShortCodeLT(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLT(FieldShortCode, v))
}

// ShortCodeLTE applies the LTE predicate on the "short_code" field.
func ShortCodeLTE(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLTE(FieldShortCode, v))
}

// ShortCodeContains applies the Contains predicate on the "short_code" field.
func ShortCodeContains(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldContains(FieldShortCode, v))
}

// ShortCodeHasPrefix applies the HasPrefix predicate on the "short_code" field.
func ShortCodeHasPrefix(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldHasPrefix(FieldShortCode, v))
}

// ShortCodeHasSuffix applies the HasSuffix predicate on the "short_code" field.
func ShortCodeHasSuffix(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldHasSuffix(FieldShortCode, v))
}

// ShortCodeIsNil applies the IsNil predicate on the "short_code" field.
func ShortCodeIsNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIsNull(FieldShortCode))
}

// ShortCodeNotNil applies the NotNil predicate on the "short_code" field.
func ShortCodeNotNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotNull(FieldShortCode))
}

// ShortCodeEqualFold applies the EqualFold predicate on the "short_code" field.
func ShortCodeEqualFold(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEqualFold(FieldShortCode, v))
}

// ShortCodeContainsFold applies the ContainsFold predicate on the "short_code" field.
func ShortCodeContainsFold(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldContainsFold(FieldShortCode, v))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLTE(FieldNumber, v))
}

// NumberContains applies the Contains predicate on the "number" field.
func NumberContains(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldContains(FieldNumber, v))
}

// NumberHasPrefix applies the HasPrefix predicate on the "number" field.
func NumberHasPrefix(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldHasPrefix(FieldNumber, v))
}

// NumberHasSuffix applies the HasSuffix predicate on the "number" field.
func NumberHasSuffix(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldHasSuffix(FieldNumber, v))
}

// NumberIsNil applies the IsNil predicate on the "number" field.
func NumberIsNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIsNull(FieldNumber))
}

// NumberNotNil applies the NotNil predicate on the "number" field.
func NumberNotNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotNull(FieldNumber))
}

// NumberEqualFold applies the EqualFold predicate on the "number" field.
func NumberEqualFold(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEqualFold(FieldNumber, v))
}

// NumberContainsFold applies the ContainsFold predicate on the "number" field.
func NumberContainsFold(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldContainsFold(FieldNumber, v))
}

// ExtensionEQ applies the EQ predicate on the "extension" field.
func ExtensionEQ(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEQ(FieldExtension, v))
}

// ExtensionNEQ applies the NEQ predicate on the "extension" field.
func ExtensionNEQ(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNEQ(FieldExtension, v))
}

// ExtensionIn applies the In predicate on the "extension" field.
func ExtensionIn(vs ...string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIn(FieldExtension, vs...))
}

// ExtensionNotIn applies the NotIn predicate on the "extension" field.
func ExtensionNotIn(vs ...string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotIn(FieldExtension, vs...))
}

// ExtensionGT applies the GT predicate on the "extension" field.
func ExtensionGT(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGT(FieldExtension, v))
}

// ExtensionGTE applies the GTE predicate on the "extension" field.
func ExtensionGTE(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldGTE(FieldExtension, v))
}

// ExtensionLT applies the LT predicate on the "extension" field.
func ExtensionLT(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLT(FieldExtension, v))
}

// ExtensionLTE applies the LTE predicate on the "extension" field.
func ExtensionLTE(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldLTE(FieldExtension, v))
}

// ExtensionContains applies the Contains predicate on the "extension" field.
func ExtensionContains(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldContains(FieldExtension, v))
}

// ExtensionHasPrefix applies the HasPrefix predicate on the "extension" field.
func ExtensionHasPrefix(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldHasPrefix(FieldExtension, v))
}

// ExtensionHasSuffix applies the HasSuffix predicate on the "extension" field.
func ExtensionHasSuffix(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldHasSuffix(FieldExtension, v))
}

// ExtensionIsNil applies the IsNil predicate on the "extension" field.
func ExtensionIsNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldIsNull(FieldExtension))
}

// ExtensionNotNil applies the NotNil predicate on the "extension" field.
func ExtensionNotNil() predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldNotNull(FieldExtension))
}

// ExtensionEqualFold applies the EqualFold predicate on the "extension" field.
func ExtensionEqualFold(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldEqualFold(FieldExtension, v))
}

// ExtensionContainsFold applies the ContainsFold predicate on the "extension" field.
func ExtensionContainsFold(v string) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.FieldContainsFold(FieldExtension, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.PhoneNumber {
	return predicate.PhoneNumber(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.PhoneNumber
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Organization) predicate.PhoneNumber {
	return predicate.PhoneNumber(func(s *sql.Selector) {
		step := newOwnerStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.PhoneNumber
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProfile applies the HasEdge predicate on the "profile" edge.
func HasProfile() predicate.PhoneNumber {
	return predicate.PhoneNumber(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProfileTable, ProfilePrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.VendorProfile
		step.Edge.Schema = schemaConfig.VendorProfilePhoneNumber
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileWith applies the HasEdge predicate on the "profile" edge with a given conditions (other predicates).
func HasProfileWith(preds ...predicate.VendorProfile) predicate.PhoneNumber {
	return predicate.PhoneNumber(func(s *sql.Selector) {
		step := newProfileStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.VendorProfile
		step.Edge.Schema = schemaConfig.VendorProfilePhoneNumber
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvents applies the HasEdge predicate on the "events" edge.
func HasEvents() predicate.PhoneNumber {
	return predicate.PhoneNumber(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventsTable, EventsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.Event
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventsWith applies the HasEdge predicate on the "events" edge with a given conditions (other predicates).
func HasEventsWith(preds ...predicate.Event) predicate.PhoneNumber {
	return predicate.PhoneNumber(func(s *sql.Selector) {
		step := newEventsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.Event
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVendorProfilePhoneNumbers applies the HasEdge predicate on the "vendor_profile_phone_numbers" edge.
func HasVendorProfilePhoneNumbers() predicate.PhoneNumber {
	return predicate.PhoneNumber(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, VendorProfilePhoneNumbersTable, VendorProfilePhoneNumbersColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.VendorProfilePhoneNumber
		step.Edge.Schema = schemaConfig.VendorProfilePhoneNumber
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVendorProfilePhoneNumbersWith applies the HasEdge predicate on the "vendor_profile_phone_numbers" edge with a given conditions (other predicates).
func HasVendorProfilePhoneNumbersWith(preds ...predicate.VendorProfilePhoneNumber) predicate.PhoneNumber {
	return predicate.PhoneNumber(func(s *sql.Selector) {
		step := newVendorProfilePhoneNumbersStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.VendorProfilePhoneNumber
		step.Edge.Schema = schemaConfig.VendorProfilePhoneNumber
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PhoneNumber) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PhoneNumber) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PhoneNumber) predicate.PhoneNumber {
	return predicate.PhoneNumber(sql.NotPredicates(p))
}
