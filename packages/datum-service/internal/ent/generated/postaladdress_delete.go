// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
	"github.com/datum-cloud/datum-os/internal/ent/generated/postaladdress"
)

// PostalAddressDelete is the builder for deleting a PostalAddress entity.
type PostalAddressDelete struct {
	config
	hooks    []Hook
	mutation *PostalAddressMutation
}

// Where appends a list predicates to the PostalAddressDelete builder.
func (pad *PostalAddressDelete) Where(ps ...predicate.PostalAddress) *PostalAddressDelete {
	pad.mutation.Where(ps...)
	return pad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pad *PostalAddressDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pad.sqlExec, pad.mutation, pad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pad *PostalAddressDelete) ExecX(ctx context.Context) int {
	n, err := pad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pad *PostalAddressDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(postaladdress.Table, sqlgraph.NewFieldSpec(postaladdress.FieldID, field.TypeString))
	_spec.Node.Schema = pad.schemaConfig.PostalAddress
	ctx = internal.NewSchemaConfigContext(ctx, pad.schemaConfig)
	if ps := pad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pad.mutation.done = true
	return affected, err
}

// PostalAddressDeleteOne is the builder for deleting a single PostalAddress entity.
type PostalAddressDeleteOne struct {
	pad *PostalAddressDelete
}

// Where appends a list predicates to the PostalAddressDelete builder.
func (pado *PostalAddressDeleteOne) Where(ps ...predicate.PostalAddress) *PostalAddressDeleteOne {
	pado.pad.mutation.Where(ps...)
	return pado
}

// Exec executes the deletion query.
func (pado *PostalAddressDeleteOne) Exec(ctx context.Context) error {
	n, err := pado.pad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{postaladdress.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pado *PostalAddressDeleteOne) ExecX(ctx context.Context) {
	if err := pado.Exec(ctx); err != nil {
		panic(err)
	}
}
