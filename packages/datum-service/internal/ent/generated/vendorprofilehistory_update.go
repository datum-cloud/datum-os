// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilehistory"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// VendorProfileHistoryUpdate is the builder for updating VendorProfileHistory entities.
type VendorProfileHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *VendorProfileHistoryMutation
}

// Where appends a list predicates to the VendorProfileHistoryUpdate builder.
func (vphu *VendorProfileHistoryUpdate) Where(ps ...predicate.VendorProfileHistory) *VendorProfileHistoryUpdate {
	vphu.mutation.Where(ps...)
	return vphu
}

// SetUpdatedAt sets the "updated_at" field.
func (vphu *VendorProfileHistoryUpdate) SetUpdatedAt(t time.Time) *VendorProfileHistoryUpdate {
	vphu.mutation.SetUpdatedAt(t)
	return vphu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vphu *VendorProfileHistoryUpdate) ClearUpdatedAt() *VendorProfileHistoryUpdate {
	vphu.mutation.ClearUpdatedAt()
	return vphu
}

// SetUpdatedBy sets the "updated_by" field.
func (vphu *VendorProfileHistoryUpdate) SetUpdatedBy(s string) *VendorProfileHistoryUpdate {
	vphu.mutation.SetUpdatedBy(s)
	return vphu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vphu *VendorProfileHistoryUpdate) SetNillableUpdatedBy(s *string) *VendorProfileHistoryUpdate {
	if s != nil {
		vphu.SetUpdatedBy(*s)
	}
	return vphu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vphu *VendorProfileHistoryUpdate) ClearUpdatedBy() *VendorProfileHistoryUpdate {
	vphu.mutation.ClearUpdatedBy()
	return vphu
}

// SetDeletedAt sets the "deleted_at" field.
func (vphu *VendorProfileHistoryUpdate) SetDeletedAt(t time.Time) *VendorProfileHistoryUpdate {
	vphu.mutation.SetDeletedAt(t)
	return vphu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vphu *VendorProfileHistoryUpdate) SetNillableDeletedAt(t *time.Time) *VendorProfileHistoryUpdate {
	if t != nil {
		vphu.SetDeletedAt(*t)
	}
	return vphu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vphu *VendorProfileHistoryUpdate) ClearDeletedAt() *VendorProfileHistoryUpdate {
	vphu.mutation.ClearDeletedAt()
	return vphu
}

// SetDeletedBy sets the "deleted_by" field.
func (vphu *VendorProfileHistoryUpdate) SetDeletedBy(s string) *VendorProfileHistoryUpdate {
	vphu.mutation.SetDeletedBy(s)
	return vphu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vphu *VendorProfileHistoryUpdate) SetNillableDeletedBy(s *string) *VendorProfileHistoryUpdate {
	if s != nil {
		vphu.SetDeletedBy(*s)
	}
	return vphu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (vphu *VendorProfileHistoryUpdate) ClearDeletedBy() *VendorProfileHistoryUpdate {
	vphu.mutation.ClearDeletedBy()
	return vphu
}

// SetTags sets the "tags" field.
func (vphu *VendorProfileHistoryUpdate) SetTags(s []string) *VendorProfileHistoryUpdate {
	vphu.mutation.SetTags(s)
	return vphu
}

// AppendTags appends s to the "tags" field.
func (vphu *VendorProfileHistoryUpdate) AppendTags(s []string) *VendorProfileHistoryUpdate {
	vphu.mutation.AppendTags(s)
	return vphu
}

// ClearTags clears the value of the "tags" field.
func (vphu *VendorProfileHistoryUpdate) ClearTags() *VendorProfileHistoryUpdate {
	vphu.mutation.ClearTags()
	return vphu
}

// SetOwnerID sets the "owner_id" field.
func (vphu *VendorProfileHistoryUpdate) SetOwnerID(s string) *VendorProfileHistoryUpdate {
	vphu.mutation.SetOwnerID(s)
	return vphu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (vphu *VendorProfileHistoryUpdate) SetNillableOwnerID(s *string) *VendorProfileHistoryUpdate {
	if s != nil {
		vphu.SetOwnerID(*s)
	}
	return vphu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (vphu *VendorProfileHistoryUpdate) ClearOwnerID() *VendorProfileHistoryUpdate {
	vphu.mutation.ClearOwnerID()
	return vphu
}

// SetName sets the "name" field.
func (vphu *VendorProfileHistoryUpdate) SetName(s string) *VendorProfileHistoryUpdate {
	vphu.mutation.SetName(s)
	return vphu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vphu *VendorProfileHistoryUpdate) SetNillableName(s *string) *VendorProfileHistoryUpdate {
	if s != nil {
		vphu.SetName(*s)
	}
	return vphu
}

// SetDbaName sets the "dba_name" field.
func (vphu *VendorProfileHistoryUpdate) SetDbaName(s string) *VendorProfileHistoryUpdate {
	vphu.mutation.SetDbaName(s)
	return vphu
}

// SetNillableDbaName sets the "dba_name" field if the given value is not nil.
func (vphu *VendorProfileHistoryUpdate) SetNillableDbaName(s *string) *VendorProfileHistoryUpdate {
	if s != nil {
		vphu.SetDbaName(*s)
	}
	return vphu
}

// ClearDbaName clears the value of the "dba_name" field.
func (vphu *VendorProfileHistoryUpdate) ClearDbaName() *VendorProfileHistoryUpdate {
	vphu.mutation.ClearDbaName()
	return vphu
}

// SetDescription sets the "description" field.
func (vphu *VendorProfileHistoryUpdate) SetDescription(s string) *VendorProfileHistoryUpdate {
	vphu.mutation.SetDescription(s)
	return vphu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vphu *VendorProfileHistoryUpdate) SetNillableDescription(s *string) *VendorProfileHistoryUpdate {
	if s != nil {
		vphu.SetDescription(*s)
	}
	return vphu
}

// ClearDescription clears the value of the "description" field.
func (vphu *VendorProfileHistoryUpdate) ClearDescription() *VendorProfileHistoryUpdate {
	vphu.mutation.ClearDescription()
	return vphu
}

// SetWebsiteURI sets the "website_uri" field.
func (vphu *VendorProfileHistoryUpdate) SetWebsiteURI(s string) *VendorProfileHistoryUpdate {
	vphu.mutation.SetWebsiteURI(s)
	return vphu
}

// SetNillableWebsiteURI sets the "website_uri" field if the given value is not nil.
func (vphu *VendorProfileHistoryUpdate) SetNillableWebsiteURI(s *string) *VendorProfileHistoryUpdate {
	if s != nil {
		vphu.SetWebsiteURI(*s)
	}
	return vphu
}

// ClearWebsiteURI clears the value of the "website_uri" field.
func (vphu *VendorProfileHistoryUpdate) ClearWebsiteURI() *VendorProfileHistoryUpdate {
	vphu.mutation.ClearWebsiteURI()
	return vphu
}

// Mutation returns the VendorProfileHistoryMutation object of the builder.
func (vphu *VendorProfileHistoryUpdate) Mutation() *VendorProfileHistoryMutation {
	return vphu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vphu *VendorProfileHistoryUpdate) Save(ctx context.Context) (int, error) {
	vphu.defaults()
	return withHooks(ctx, vphu.sqlSave, vphu.mutation, vphu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vphu *VendorProfileHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := vphu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vphu *VendorProfileHistoryUpdate) Exec(ctx context.Context) error {
	_, err := vphu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vphu *VendorProfileHistoryUpdate) ExecX(ctx context.Context) {
	if err := vphu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vphu *VendorProfileHistoryUpdate) defaults() {
	if _, ok := vphu.mutation.UpdatedAt(); !ok && !vphu.mutation.UpdatedAtCleared() {
		v := vendorprofilehistory.UpdateDefaultUpdatedAt()
		vphu.mutation.SetUpdatedAt(v)
	}
}

func (vphu *VendorProfileHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(vendorprofilehistory.Table, vendorprofilehistory.Columns, sqlgraph.NewFieldSpec(vendorprofilehistory.FieldID, field.TypeString))
	if ps := vphu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vphu.mutation.RefCleared() {
		_spec.ClearField(vendorprofilehistory.FieldRef, field.TypeString)
	}
	if vphu.mutation.CreatedAtCleared() {
		_spec.ClearField(vendorprofilehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vphu.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofilehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if vphu.mutation.UpdatedAtCleared() {
		_spec.ClearField(vendorprofilehistory.FieldUpdatedAt, field.TypeTime)
	}
	if vphu.mutation.CreatedByCleared() {
		_spec.ClearField(vendorprofilehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vphu.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofilehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if vphu.mutation.UpdatedByCleared() {
		_spec.ClearField(vendorprofilehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vphu.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofilehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if vphu.mutation.DeletedAtCleared() {
		_spec.ClearField(vendorprofilehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vphu.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofilehistory.FieldDeletedBy, field.TypeString, value)
	}
	if vphu.mutation.DeletedByCleared() {
		_spec.ClearField(vendorprofilehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := vphu.mutation.Tags(); ok {
		_spec.SetField(vendorprofilehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := vphu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vendorprofilehistory.FieldTags, value)
		})
	}
	if vphu.mutation.TagsCleared() {
		_spec.ClearField(vendorprofilehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := vphu.mutation.OwnerID(); ok {
		_spec.SetField(vendorprofilehistory.FieldOwnerID, field.TypeString, value)
	}
	if vphu.mutation.OwnerIDCleared() {
		_spec.ClearField(vendorprofilehistory.FieldOwnerID, field.TypeString)
	}
	if vphu.mutation.VendorIDCleared() {
		_spec.ClearField(vendorprofilehistory.FieldVendorID, field.TypeString)
	}
	if value, ok := vphu.mutation.Name(); ok {
		_spec.SetField(vendorprofilehistory.FieldName, field.TypeString, value)
	}
	if value, ok := vphu.mutation.DbaName(); ok {
		_spec.SetField(vendorprofilehistory.FieldDbaName, field.TypeString, value)
	}
	if vphu.mutation.DbaNameCleared() {
		_spec.ClearField(vendorprofilehistory.FieldDbaName, field.TypeString)
	}
	if value, ok := vphu.mutation.Description(); ok {
		_spec.SetField(vendorprofilehistory.FieldDescription, field.TypeString, value)
	}
	if vphu.mutation.DescriptionCleared() {
		_spec.ClearField(vendorprofilehistory.FieldDescription, field.TypeString)
	}
	if value, ok := vphu.mutation.WebsiteURI(); ok {
		_spec.SetField(vendorprofilehistory.FieldWebsiteURI, field.TypeString, value)
	}
	if vphu.mutation.WebsiteURICleared() {
		_spec.ClearField(vendorprofilehistory.FieldWebsiteURI, field.TypeString)
	}
	_spec.Node.Schema = vphu.schemaConfig.VendorProfileHistory
	ctx = internal.NewSchemaConfigContext(ctx, vphu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, vphu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorprofilehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vphu.mutation.done = true
	return n, nil
}

// VendorProfileHistoryUpdateOne is the builder for updating a single VendorProfileHistory entity.
type VendorProfileHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VendorProfileHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vphuo *VendorProfileHistoryUpdateOne) SetUpdatedAt(t time.Time) *VendorProfileHistoryUpdateOne {
	vphuo.mutation.SetUpdatedAt(t)
	return vphuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vphuo *VendorProfileHistoryUpdateOne) ClearUpdatedAt() *VendorProfileHistoryUpdateOne {
	vphuo.mutation.ClearUpdatedAt()
	return vphuo
}

// SetUpdatedBy sets the "updated_by" field.
func (vphuo *VendorProfileHistoryUpdateOne) SetUpdatedBy(s string) *VendorProfileHistoryUpdateOne {
	vphuo.mutation.SetUpdatedBy(s)
	return vphuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vphuo *VendorProfileHistoryUpdateOne) SetNillableUpdatedBy(s *string) *VendorProfileHistoryUpdateOne {
	if s != nil {
		vphuo.SetUpdatedBy(*s)
	}
	return vphuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vphuo *VendorProfileHistoryUpdateOne) ClearUpdatedBy() *VendorProfileHistoryUpdateOne {
	vphuo.mutation.ClearUpdatedBy()
	return vphuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vphuo *VendorProfileHistoryUpdateOne) SetDeletedAt(t time.Time) *VendorProfileHistoryUpdateOne {
	vphuo.mutation.SetDeletedAt(t)
	return vphuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vphuo *VendorProfileHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *VendorProfileHistoryUpdateOne {
	if t != nil {
		vphuo.SetDeletedAt(*t)
	}
	return vphuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vphuo *VendorProfileHistoryUpdateOne) ClearDeletedAt() *VendorProfileHistoryUpdateOne {
	vphuo.mutation.ClearDeletedAt()
	return vphuo
}

// SetDeletedBy sets the "deleted_by" field.
func (vphuo *VendorProfileHistoryUpdateOne) SetDeletedBy(s string) *VendorProfileHistoryUpdateOne {
	vphuo.mutation.SetDeletedBy(s)
	return vphuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vphuo *VendorProfileHistoryUpdateOne) SetNillableDeletedBy(s *string) *VendorProfileHistoryUpdateOne {
	if s != nil {
		vphuo.SetDeletedBy(*s)
	}
	return vphuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (vphuo *VendorProfileHistoryUpdateOne) ClearDeletedBy() *VendorProfileHistoryUpdateOne {
	vphuo.mutation.ClearDeletedBy()
	return vphuo
}

// SetTags sets the "tags" field.
func (vphuo *VendorProfileHistoryUpdateOne) SetTags(s []string) *VendorProfileHistoryUpdateOne {
	vphuo.mutation.SetTags(s)
	return vphuo
}

// AppendTags appends s to the "tags" field.
func (vphuo *VendorProfileHistoryUpdateOne) AppendTags(s []string) *VendorProfileHistoryUpdateOne {
	vphuo.mutation.AppendTags(s)
	return vphuo
}

// ClearTags clears the value of the "tags" field.
func (vphuo *VendorProfileHistoryUpdateOne) ClearTags() *VendorProfileHistoryUpdateOne {
	vphuo.mutation.ClearTags()
	return vphuo
}

// SetOwnerID sets the "owner_id" field.
func (vphuo *VendorProfileHistoryUpdateOne) SetOwnerID(s string) *VendorProfileHistoryUpdateOne {
	vphuo.mutation.SetOwnerID(s)
	return vphuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (vphuo *VendorProfileHistoryUpdateOne) SetNillableOwnerID(s *string) *VendorProfileHistoryUpdateOne {
	if s != nil {
		vphuo.SetOwnerID(*s)
	}
	return vphuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (vphuo *VendorProfileHistoryUpdateOne) ClearOwnerID() *VendorProfileHistoryUpdateOne {
	vphuo.mutation.ClearOwnerID()
	return vphuo
}

// SetName sets the "name" field.
func (vphuo *VendorProfileHistoryUpdateOne) SetName(s string) *VendorProfileHistoryUpdateOne {
	vphuo.mutation.SetName(s)
	return vphuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vphuo *VendorProfileHistoryUpdateOne) SetNillableName(s *string) *VendorProfileHistoryUpdateOne {
	if s != nil {
		vphuo.SetName(*s)
	}
	return vphuo
}

// SetDbaName sets the "dba_name" field.
func (vphuo *VendorProfileHistoryUpdateOne) SetDbaName(s string) *VendorProfileHistoryUpdateOne {
	vphuo.mutation.SetDbaName(s)
	return vphuo
}

// SetNillableDbaName sets the "dba_name" field if the given value is not nil.
func (vphuo *VendorProfileHistoryUpdateOne) SetNillableDbaName(s *string) *VendorProfileHistoryUpdateOne {
	if s != nil {
		vphuo.SetDbaName(*s)
	}
	return vphuo
}

// ClearDbaName clears the value of the "dba_name" field.
func (vphuo *VendorProfileHistoryUpdateOne) ClearDbaName() *VendorProfileHistoryUpdateOne {
	vphuo.mutation.ClearDbaName()
	return vphuo
}

// SetDescription sets the "description" field.
func (vphuo *VendorProfileHistoryUpdateOne) SetDescription(s string) *VendorProfileHistoryUpdateOne {
	vphuo.mutation.SetDescription(s)
	return vphuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vphuo *VendorProfileHistoryUpdateOne) SetNillableDescription(s *string) *VendorProfileHistoryUpdateOne {
	if s != nil {
		vphuo.SetDescription(*s)
	}
	return vphuo
}

// ClearDescription clears the value of the "description" field.
func (vphuo *VendorProfileHistoryUpdateOne) ClearDescription() *VendorProfileHistoryUpdateOne {
	vphuo.mutation.ClearDescription()
	return vphuo
}

// SetWebsiteURI sets the "website_uri" field.
func (vphuo *VendorProfileHistoryUpdateOne) SetWebsiteURI(s string) *VendorProfileHistoryUpdateOne {
	vphuo.mutation.SetWebsiteURI(s)
	return vphuo
}

// SetNillableWebsiteURI sets the "website_uri" field if the given value is not nil.
func (vphuo *VendorProfileHistoryUpdateOne) SetNillableWebsiteURI(s *string) *VendorProfileHistoryUpdateOne {
	if s != nil {
		vphuo.SetWebsiteURI(*s)
	}
	return vphuo
}

// ClearWebsiteURI clears the value of the "website_uri" field.
func (vphuo *VendorProfileHistoryUpdateOne) ClearWebsiteURI() *VendorProfileHistoryUpdateOne {
	vphuo.mutation.ClearWebsiteURI()
	return vphuo
}

// Mutation returns the VendorProfileHistoryMutation object of the builder.
func (vphuo *VendorProfileHistoryUpdateOne) Mutation() *VendorProfileHistoryMutation {
	return vphuo.mutation
}

// Where appends a list predicates to the VendorProfileHistoryUpdate builder.
func (vphuo *VendorProfileHistoryUpdateOne) Where(ps ...predicate.VendorProfileHistory) *VendorProfileHistoryUpdateOne {
	vphuo.mutation.Where(ps...)
	return vphuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vphuo *VendorProfileHistoryUpdateOne) Select(field string, fields ...string) *VendorProfileHistoryUpdateOne {
	vphuo.fields = append([]string{field}, fields...)
	return vphuo
}

// Save executes the query and returns the updated VendorProfileHistory entity.
func (vphuo *VendorProfileHistoryUpdateOne) Save(ctx context.Context) (*VendorProfileHistory, error) {
	vphuo.defaults()
	return withHooks(ctx, vphuo.sqlSave, vphuo.mutation, vphuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vphuo *VendorProfileHistoryUpdateOne) SaveX(ctx context.Context) *VendorProfileHistory {
	node, err := vphuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vphuo *VendorProfileHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := vphuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vphuo *VendorProfileHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := vphuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vphuo *VendorProfileHistoryUpdateOne) defaults() {
	if _, ok := vphuo.mutation.UpdatedAt(); !ok && !vphuo.mutation.UpdatedAtCleared() {
		v := vendorprofilehistory.UpdateDefaultUpdatedAt()
		vphuo.mutation.SetUpdatedAt(v)
	}
}

func (vphuo *VendorProfileHistoryUpdateOne) sqlSave(ctx context.Context) (_node *VendorProfileHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(vendorprofilehistory.Table, vendorprofilehistory.Columns, sqlgraph.NewFieldSpec(vendorprofilehistory.FieldID, field.TypeString))
	id, ok := vphuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "VendorProfileHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vphuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vendorprofilehistory.FieldID)
		for _, f := range fields {
			if !vendorprofilehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != vendorprofilehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vphuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vphuo.mutation.RefCleared() {
		_spec.ClearField(vendorprofilehistory.FieldRef, field.TypeString)
	}
	if vphuo.mutation.CreatedAtCleared() {
		_spec.ClearField(vendorprofilehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vphuo.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofilehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if vphuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(vendorprofilehistory.FieldUpdatedAt, field.TypeTime)
	}
	if vphuo.mutation.CreatedByCleared() {
		_spec.ClearField(vendorprofilehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vphuo.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofilehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if vphuo.mutation.UpdatedByCleared() {
		_spec.ClearField(vendorprofilehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vphuo.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofilehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if vphuo.mutation.DeletedAtCleared() {
		_spec.ClearField(vendorprofilehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vphuo.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofilehistory.FieldDeletedBy, field.TypeString, value)
	}
	if vphuo.mutation.DeletedByCleared() {
		_spec.ClearField(vendorprofilehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := vphuo.mutation.Tags(); ok {
		_spec.SetField(vendorprofilehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := vphuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vendorprofilehistory.FieldTags, value)
		})
	}
	if vphuo.mutation.TagsCleared() {
		_spec.ClearField(vendorprofilehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := vphuo.mutation.OwnerID(); ok {
		_spec.SetField(vendorprofilehistory.FieldOwnerID, field.TypeString, value)
	}
	if vphuo.mutation.OwnerIDCleared() {
		_spec.ClearField(vendorprofilehistory.FieldOwnerID, field.TypeString)
	}
	if vphuo.mutation.VendorIDCleared() {
		_spec.ClearField(vendorprofilehistory.FieldVendorID, field.TypeString)
	}
	if value, ok := vphuo.mutation.Name(); ok {
		_spec.SetField(vendorprofilehistory.FieldName, field.TypeString, value)
	}
	if value, ok := vphuo.mutation.DbaName(); ok {
		_spec.SetField(vendorprofilehistory.FieldDbaName, field.TypeString, value)
	}
	if vphuo.mutation.DbaNameCleared() {
		_spec.ClearField(vendorprofilehistory.FieldDbaName, field.TypeString)
	}
	if value, ok := vphuo.mutation.Description(); ok {
		_spec.SetField(vendorprofilehistory.FieldDescription, field.TypeString, value)
	}
	if vphuo.mutation.DescriptionCleared() {
		_spec.ClearField(vendorprofilehistory.FieldDescription, field.TypeString)
	}
	if value, ok := vphuo.mutation.WebsiteURI(); ok {
		_spec.SetField(vendorprofilehistory.FieldWebsiteURI, field.TypeString, value)
	}
	if vphuo.mutation.WebsiteURICleared() {
		_spec.ClearField(vendorprofilehistory.FieldWebsiteURI, field.TypeString)
	}
	_spec.Node.Schema = vphuo.schemaConfig.VendorProfileHistory
	ctx = internal.NewSchemaConfigContext(ctx, vphuo.schemaConfig)
	_node = &VendorProfileHistory{config: vphuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vphuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorprofilehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vphuo.mutation.done = true
	return _node, nil
}
