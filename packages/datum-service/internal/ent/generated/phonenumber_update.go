// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/event"
	"github.com/datum-cloud/datum-os/internal/ent/generated/organization"
	"github.com/datum-cloud/datum-os/internal/ent/generated/phonenumber"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofile"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilephonenumber"
	"github.com/datum-cloud/datum-os/pkg/enums"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// PhoneNumberUpdate is the builder for updating PhoneNumber entities.
type PhoneNumberUpdate struct {
	config
	hooks    []Hook
	mutation *PhoneNumberMutation
}

// Where appends a list predicates to the PhoneNumberUpdate builder.
func (pnu *PhoneNumberUpdate) Where(ps ...predicate.PhoneNumber) *PhoneNumberUpdate {
	pnu.mutation.Where(ps...)
	return pnu
}

// SetUpdatedAt sets the "updated_at" field.
func (pnu *PhoneNumberUpdate) SetUpdatedAt(t time.Time) *PhoneNumberUpdate {
	pnu.mutation.SetUpdatedAt(t)
	return pnu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pnu *PhoneNumberUpdate) ClearUpdatedAt() *PhoneNumberUpdate {
	pnu.mutation.ClearUpdatedAt()
	return pnu
}

// SetUpdatedBy sets the "updated_by" field.
func (pnu *PhoneNumberUpdate) SetUpdatedBy(s string) *PhoneNumberUpdate {
	pnu.mutation.SetUpdatedBy(s)
	return pnu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pnu *PhoneNumberUpdate) SetNillableUpdatedBy(s *string) *PhoneNumberUpdate {
	if s != nil {
		pnu.SetUpdatedBy(*s)
	}
	return pnu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pnu *PhoneNumberUpdate) ClearUpdatedBy() *PhoneNumberUpdate {
	pnu.mutation.ClearUpdatedBy()
	return pnu
}

// SetDeletedAt sets the "deleted_at" field.
func (pnu *PhoneNumberUpdate) SetDeletedAt(t time.Time) *PhoneNumberUpdate {
	pnu.mutation.SetDeletedAt(t)
	return pnu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pnu *PhoneNumberUpdate) SetNillableDeletedAt(t *time.Time) *PhoneNumberUpdate {
	if t != nil {
		pnu.SetDeletedAt(*t)
	}
	return pnu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pnu *PhoneNumberUpdate) ClearDeletedAt() *PhoneNumberUpdate {
	pnu.mutation.ClearDeletedAt()
	return pnu
}

// SetDeletedBy sets the "deleted_by" field.
func (pnu *PhoneNumberUpdate) SetDeletedBy(s string) *PhoneNumberUpdate {
	pnu.mutation.SetDeletedBy(s)
	return pnu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pnu *PhoneNumberUpdate) SetNillableDeletedBy(s *string) *PhoneNumberUpdate {
	if s != nil {
		pnu.SetDeletedBy(*s)
	}
	return pnu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (pnu *PhoneNumberUpdate) ClearDeletedBy() *PhoneNumberUpdate {
	pnu.mutation.ClearDeletedBy()
	return pnu
}

// SetTags sets the "tags" field.
func (pnu *PhoneNumberUpdate) SetTags(s []string) *PhoneNumberUpdate {
	pnu.mutation.SetTags(s)
	return pnu
}

// AppendTags appends s to the "tags" field.
func (pnu *PhoneNumberUpdate) AppendTags(s []string) *PhoneNumberUpdate {
	pnu.mutation.AppendTags(s)
	return pnu
}

// ClearTags clears the value of the "tags" field.
func (pnu *PhoneNumberUpdate) ClearTags() *PhoneNumberUpdate {
	pnu.mutation.ClearTags()
	return pnu
}

// SetOwnerID sets the "owner_id" field.
func (pnu *PhoneNumberUpdate) SetOwnerID(s string) *PhoneNumberUpdate {
	pnu.mutation.SetOwnerID(s)
	return pnu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pnu *PhoneNumberUpdate) SetNillableOwnerID(s *string) *PhoneNumberUpdate {
	if s != nil {
		pnu.SetOwnerID(*s)
	}
	return pnu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (pnu *PhoneNumberUpdate) ClearOwnerID() *PhoneNumberUpdate {
	pnu.mutation.ClearOwnerID()
	return pnu
}

// SetKind sets the "kind" field.
func (pnu *PhoneNumberUpdate) SetKind(ennuty enums.PhoneNumberType) *PhoneNumberUpdate {
	pnu.mutation.SetKind(ennuty)
	return pnu
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (pnu *PhoneNumberUpdate) SetNillableKind(ennuty *enums.PhoneNumberType) *PhoneNumberUpdate {
	if ennuty != nil {
		pnu.SetKind(*ennuty)
	}
	return pnu
}

// SetRegionCode sets the "region_code" field.
func (pnu *PhoneNumberUpdate) SetRegionCode(s string) *PhoneNumberUpdate {
	pnu.mutation.SetRegionCode(s)
	return pnu
}

// SetNillableRegionCode sets the "region_code" field if the given value is not nil.
func (pnu *PhoneNumberUpdate) SetNillableRegionCode(s *string) *PhoneNumberUpdate {
	if s != nil {
		pnu.SetRegionCode(*s)
	}
	return pnu
}

// ClearRegionCode clears the value of the "region_code" field.
func (pnu *PhoneNumberUpdate) ClearRegionCode() *PhoneNumberUpdate {
	pnu.mutation.ClearRegionCode()
	return pnu
}

// SetShortCode sets the "short_code" field.
func (pnu *PhoneNumberUpdate) SetShortCode(s string) *PhoneNumberUpdate {
	pnu.mutation.SetShortCode(s)
	return pnu
}

// SetNillableShortCode sets the "short_code" field if the given value is not nil.
func (pnu *PhoneNumberUpdate) SetNillableShortCode(s *string) *PhoneNumberUpdate {
	if s != nil {
		pnu.SetShortCode(*s)
	}
	return pnu
}

// ClearShortCode clears the value of the "short_code" field.
func (pnu *PhoneNumberUpdate) ClearShortCode() *PhoneNumberUpdate {
	pnu.mutation.ClearShortCode()
	return pnu
}

// SetNumber sets the "number" field.
func (pnu *PhoneNumberUpdate) SetNumber(s string) *PhoneNumberUpdate {
	pnu.mutation.SetNumber(s)
	return pnu
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (pnu *PhoneNumberUpdate) SetNillableNumber(s *string) *PhoneNumberUpdate {
	if s != nil {
		pnu.SetNumber(*s)
	}
	return pnu
}

// ClearNumber clears the value of the "number" field.
func (pnu *PhoneNumberUpdate) ClearNumber() *PhoneNumberUpdate {
	pnu.mutation.ClearNumber()
	return pnu
}

// SetExtension sets the "extension" field.
func (pnu *PhoneNumberUpdate) SetExtension(s string) *PhoneNumberUpdate {
	pnu.mutation.SetExtension(s)
	return pnu
}

// SetNillableExtension sets the "extension" field if the given value is not nil.
func (pnu *PhoneNumberUpdate) SetNillableExtension(s *string) *PhoneNumberUpdate {
	if s != nil {
		pnu.SetExtension(*s)
	}
	return pnu
}

// ClearExtension clears the value of the "extension" field.
func (pnu *PhoneNumberUpdate) ClearExtension() *PhoneNumberUpdate {
	pnu.mutation.ClearExtension()
	return pnu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (pnu *PhoneNumberUpdate) SetOwner(o *Organization) *PhoneNumberUpdate {
	return pnu.SetOwnerID(o.ID)
}

// AddProfileIDs adds the "profile" edge to the VendorProfile entity by IDs.
func (pnu *PhoneNumberUpdate) AddProfileIDs(ids ...string) *PhoneNumberUpdate {
	pnu.mutation.AddProfileIDs(ids...)
	return pnu
}

// AddProfile adds the "profile" edges to the VendorProfile entity.
func (pnu *PhoneNumberUpdate) AddProfile(v ...*VendorProfile) *PhoneNumberUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pnu.AddProfileIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (pnu *PhoneNumberUpdate) AddEventIDs(ids ...string) *PhoneNumberUpdate {
	pnu.mutation.AddEventIDs(ids...)
	return pnu
}

// AddEvents adds the "events" edges to the Event entity.
func (pnu *PhoneNumberUpdate) AddEvents(e ...*Event) *PhoneNumberUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pnu.AddEventIDs(ids...)
}

// AddVendorProfilePhoneNumberIDs adds the "vendor_profile_phone_numbers" edge to the VendorProfilePhoneNumber entity by IDs.
func (pnu *PhoneNumberUpdate) AddVendorProfilePhoneNumberIDs(ids ...string) *PhoneNumberUpdate {
	pnu.mutation.AddVendorProfilePhoneNumberIDs(ids...)
	return pnu
}

// AddVendorProfilePhoneNumbers adds the "vendor_profile_phone_numbers" edges to the VendorProfilePhoneNumber entity.
func (pnu *PhoneNumberUpdate) AddVendorProfilePhoneNumbers(v ...*VendorProfilePhoneNumber) *PhoneNumberUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pnu.AddVendorProfilePhoneNumberIDs(ids...)
}

// Mutation returns the PhoneNumberMutation object of the builder.
func (pnu *PhoneNumberUpdate) Mutation() *PhoneNumberMutation {
	return pnu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (pnu *PhoneNumberUpdate) ClearOwner() *PhoneNumberUpdate {
	pnu.mutation.ClearOwner()
	return pnu
}

// ClearProfile clears all "profile" edges to the VendorProfile entity.
func (pnu *PhoneNumberUpdate) ClearProfile() *PhoneNumberUpdate {
	pnu.mutation.ClearProfile()
	return pnu
}

// RemoveProfileIDs removes the "profile" edge to VendorProfile entities by IDs.
func (pnu *PhoneNumberUpdate) RemoveProfileIDs(ids ...string) *PhoneNumberUpdate {
	pnu.mutation.RemoveProfileIDs(ids...)
	return pnu
}

// RemoveProfile removes "profile" edges to VendorProfile entities.
func (pnu *PhoneNumberUpdate) RemoveProfile(v ...*VendorProfile) *PhoneNumberUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pnu.RemoveProfileIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (pnu *PhoneNumberUpdate) ClearEvents() *PhoneNumberUpdate {
	pnu.mutation.ClearEvents()
	return pnu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (pnu *PhoneNumberUpdate) RemoveEventIDs(ids ...string) *PhoneNumberUpdate {
	pnu.mutation.RemoveEventIDs(ids...)
	return pnu
}

// RemoveEvents removes "events" edges to Event entities.
func (pnu *PhoneNumberUpdate) RemoveEvents(e ...*Event) *PhoneNumberUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pnu.RemoveEventIDs(ids...)
}

// ClearVendorProfilePhoneNumbers clears all "vendor_profile_phone_numbers" edges to the VendorProfilePhoneNumber entity.
func (pnu *PhoneNumberUpdate) ClearVendorProfilePhoneNumbers() *PhoneNumberUpdate {
	pnu.mutation.ClearVendorProfilePhoneNumbers()
	return pnu
}

// RemoveVendorProfilePhoneNumberIDs removes the "vendor_profile_phone_numbers" edge to VendorProfilePhoneNumber entities by IDs.
func (pnu *PhoneNumberUpdate) RemoveVendorProfilePhoneNumberIDs(ids ...string) *PhoneNumberUpdate {
	pnu.mutation.RemoveVendorProfilePhoneNumberIDs(ids...)
	return pnu
}

// RemoveVendorProfilePhoneNumbers removes "vendor_profile_phone_numbers" edges to VendorProfilePhoneNumber entities.
func (pnu *PhoneNumberUpdate) RemoveVendorProfilePhoneNumbers(v ...*VendorProfilePhoneNumber) *PhoneNumberUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pnu.RemoveVendorProfilePhoneNumberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pnu *PhoneNumberUpdate) Save(ctx context.Context) (int, error) {
	if err := pnu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pnu.sqlSave, pnu.mutation, pnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pnu *PhoneNumberUpdate) SaveX(ctx context.Context) int {
	affected, err := pnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pnu *PhoneNumberUpdate) Exec(ctx context.Context) error {
	_, err := pnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pnu *PhoneNumberUpdate) ExecX(ctx context.Context) {
	if err := pnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pnu *PhoneNumberUpdate) defaults() error {
	if _, ok := pnu.mutation.UpdatedAt(); !ok && !pnu.mutation.UpdatedAtCleared() {
		if phonenumber.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized phonenumber.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := phonenumber.UpdateDefaultUpdatedAt()
		pnu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pnu *PhoneNumberUpdate) check() error {
	if v, ok := pnu.mutation.OwnerID(); ok {
		if err := phonenumber.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "PhoneNumber.owner_id": %w`, err)}
		}
	}
	if v, ok := pnu.mutation.RegionCode(); ok {
		if err := phonenumber.RegionCodeValidator(v); err != nil {
			return &ValidationError{Name: "region_code", err: fmt.Errorf(`generated: validator failed for field "PhoneNumber.region_code": %w`, err)}
		}
	}
	if v, ok := pnu.mutation.Number(); ok {
		if err := phonenumber.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`generated: validator failed for field "PhoneNumber.number": %w`, err)}
		}
	}
	return nil
}

func (pnu *PhoneNumberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pnu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(phonenumber.Table, phonenumber.Columns, sqlgraph.NewFieldSpec(phonenumber.FieldID, field.TypeString))
	if ps := pnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pnu.mutation.CreatedAtCleared() {
		_spec.ClearField(phonenumber.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pnu.mutation.UpdatedAt(); ok {
		_spec.SetField(phonenumber.FieldUpdatedAt, field.TypeTime, value)
	}
	if pnu.mutation.UpdatedAtCleared() {
		_spec.ClearField(phonenumber.FieldUpdatedAt, field.TypeTime)
	}
	if pnu.mutation.CreatedByCleared() {
		_spec.ClearField(phonenumber.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pnu.mutation.UpdatedBy(); ok {
		_spec.SetField(phonenumber.FieldUpdatedBy, field.TypeString, value)
	}
	if pnu.mutation.UpdatedByCleared() {
		_spec.ClearField(phonenumber.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pnu.mutation.DeletedAt(); ok {
		_spec.SetField(phonenumber.FieldDeletedAt, field.TypeTime, value)
	}
	if pnu.mutation.DeletedAtCleared() {
		_spec.ClearField(phonenumber.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pnu.mutation.DeletedBy(); ok {
		_spec.SetField(phonenumber.FieldDeletedBy, field.TypeString, value)
	}
	if pnu.mutation.DeletedByCleared() {
		_spec.ClearField(phonenumber.FieldDeletedBy, field.TypeString)
	}
	if value, ok := pnu.mutation.Tags(); ok {
		_spec.SetField(phonenumber.FieldTags, field.TypeJSON, value)
	}
	if value, ok := pnu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, phonenumber.FieldTags, value)
		})
	}
	if pnu.mutation.TagsCleared() {
		_spec.ClearField(phonenumber.FieldTags, field.TypeJSON)
	}
	if value, ok := pnu.mutation.Kind(); ok {
		_spec.SetField(phonenumber.FieldKind, field.TypeString, value)
	}
	if value, ok := pnu.mutation.RegionCode(); ok {
		_spec.SetField(phonenumber.FieldRegionCode, field.TypeString, value)
	}
	if pnu.mutation.RegionCodeCleared() {
		_spec.ClearField(phonenumber.FieldRegionCode, field.TypeString)
	}
	if value, ok := pnu.mutation.ShortCode(); ok {
		_spec.SetField(phonenumber.FieldShortCode, field.TypeString, value)
	}
	if pnu.mutation.ShortCodeCleared() {
		_spec.ClearField(phonenumber.FieldShortCode, field.TypeString)
	}
	if value, ok := pnu.mutation.Number(); ok {
		_spec.SetField(phonenumber.FieldNumber, field.TypeString, value)
	}
	if pnu.mutation.NumberCleared() {
		_spec.ClearField(phonenumber.FieldNumber, field.TypeString)
	}
	if value, ok := pnu.mutation.Extension(); ok {
		_spec.SetField(phonenumber.FieldExtension, field.TypeString, value)
	}
	if pnu.mutation.ExtensionCleared() {
		_spec.ClearField(phonenumber.FieldExtension, field.TypeString)
	}
	if pnu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   phonenumber.OwnerTable,
			Columns: []string{phonenumber.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnu.schemaConfig.PhoneNumber
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   phonenumber.OwnerTable,
			Columns: []string{phonenumber.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnu.schemaConfig.PhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pnu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   phonenumber.ProfileTable,
			Columns: phonenumber.ProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnu.schemaConfig.VendorProfilePhoneNumber
		createE := &VendorProfilePhoneNumberCreate{config: pnu.config, mutation: newVendorProfilePhoneNumberMutation(pnu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnu.mutation.RemovedProfileIDs(); len(nodes) > 0 && !pnu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   phonenumber.ProfileTable,
			Columns: phonenumber.ProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnu.schemaConfig.VendorProfilePhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VendorProfilePhoneNumberCreate{config: pnu.config, mutation: newVendorProfilePhoneNumberMutation(pnu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnu.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   phonenumber.ProfileTable,
			Columns: phonenumber.ProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnu.schemaConfig.VendorProfilePhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VendorProfilePhoneNumberCreate{config: pnu.config, mutation: newVendorProfilePhoneNumberMutation(pnu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pnu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   phonenumber.EventsTable,
			Columns: []string{phonenumber.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnu.schemaConfig.Event
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !pnu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   phonenumber.EventsTable,
			Columns: []string{phonenumber.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnu.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   phonenumber.EventsTable,
			Columns: []string{phonenumber.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnu.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pnu.mutation.VendorProfilePhoneNumbersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   phonenumber.VendorProfilePhoneNumbersTable,
			Columns: []string{phonenumber.VendorProfilePhoneNumbersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilephonenumber.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnu.schemaConfig.VendorProfilePhoneNumber
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnu.mutation.RemovedVendorProfilePhoneNumbersIDs(); len(nodes) > 0 && !pnu.mutation.VendorProfilePhoneNumbersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   phonenumber.VendorProfilePhoneNumbersTable,
			Columns: []string{phonenumber.VendorProfilePhoneNumbersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilephonenumber.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnu.schemaConfig.VendorProfilePhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnu.mutation.VendorProfilePhoneNumbersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   phonenumber.VendorProfilePhoneNumbersTable,
			Columns: []string{phonenumber.VendorProfilePhoneNumbersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilephonenumber.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnu.schemaConfig.VendorProfilePhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = pnu.schemaConfig.PhoneNumber
	ctx = internal.NewSchemaConfigContext(ctx, pnu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, pnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{phonenumber.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pnu.mutation.done = true
	return n, nil
}

// PhoneNumberUpdateOne is the builder for updating a single PhoneNumber entity.
type PhoneNumberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PhoneNumberMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (pnuo *PhoneNumberUpdateOne) SetUpdatedAt(t time.Time) *PhoneNumberUpdateOne {
	pnuo.mutation.SetUpdatedAt(t)
	return pnuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pnuo *PhoneNumberUpdateOne) ClearUpdatedAt() *PhoneNumberUpdateOne {
	pnuo.mutation.ClearUpdatedAt()
	return pnuo
}

// SetUpdatedBy sets the "updated_by" field.
func (pnuo *PhoneNumberUpdateOne) SetUpdatedBy(s string) *PhoneNumberUpdateOne {
	pnuo.mutation.SetUpdatedBy(s)
	return pnuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pnuo *PhoneNumberUpdateOne) SetNillableUpdatedBy(s *string) *PhoneNumberUpdateOne {
	if s != nil {
		pnuo.SetUpdatedBy(*s)
	}
	return pnuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pnuo *PhoneNumberUpdateOne) ClearUpdatedBy() *PhoneNumberUpdateOne {
	pnuo.mutation.ClearUpdatedBy()
	return pnuo
}

// SetDeletedAt sets the "deleted_at" field.
func (pnuo *PhoneNumberUpdateOne) SetDeletedAt(t time.Time) *PhoneNumberUpdateOne {
	pnuo.mutation.SetDeletedAt(t)
	return pnuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pnuo *PhoneNumberUpdateOne) SetNillableDeletedAt(t *time.Time) *PhoneNumberUpdateOne {
	if t != nil {
		pnuo.SetDeletedAt(*t)
	}
	return pnuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pnuo *PhoneNumberUpdateOne) ClearDeletedAt() *PhoneNumberUpdateOne {
	pnuo.mutation.ClearDeletedAt()
	return pnuo
}

// SetDeletedBy sets the "deleted_by" field.
func (pnuo *PhoneNumberUpdateOne) SetDeletedBy(s string) *PhoneNumberUpdateOne {
	pnuo.mutation.SetDeletedBy(s)
	return pnuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pnuo *PhoneNumberUpdateOne) SetNillableDeletedBy(s *string) *PhoneNumberUpdateOne {
	if s != nil {
		pnuo.SetDeletedBy(*s)
	}
	return pnuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (pnuo *PhoneNumberUpdateOne) ClearDeletedBy() *PhoneNumberUpdateOne {
	pnuo.mutation.ClearDeletedBy()
	return pnuo
}

// SetTags sets the "tags" field.
func (pnuo *PhoneNumberUpdateOne) SetTags(s []string) *PhoneNumberUpdateOne {
	pnuo.mutation.SetTags(s)
	return pnuo
}

// AppendTags appends s to the "tags" field.
func (pnuo *PhoneNumberUpdateOne) AppendTags(s []string) *PhoneNumberUpdateOne {
	pnuo.mutation.AppendTags(s)
	return pnuo
}

// ClearTags clears the value of the "tags" field.
func (pnuo *PhoneNumberUpdateOne) ClearTags() *PhoneNumberUpdateOne {
	pnuo.mutation.ClearTags()
	return pnuo
}

// SetOwnerID sets the "owner_id" field.
func (pnuo *PhoneNumberUpdateOne) SetOwnerID(s string) *PhoneNumberUpdateOne {
	pnuo.mutation.SetOwnerID(s)
	return pnuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pnuo *PhoneNumberUpdateOne) SetNillableOwnerID(s *string) *PhoneNumberUpdateOne {
	if s != nil {
		pnuo.SetOwnerID(*s)
	}
	return pnuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (pnuo *PhoneNumberUpdateOne) ClearOwnerID() *PhoneNumberUpdateOne {
	pnuo.mutation.ClearOwnerID()
	return pnuo
}

// SetKind sets the "kind" field.
func (pnuo *PhoneNumberUpdateOne) SetKind(ennuty enums.PhoneNumberType) *PhoneNumberUpdateOne {
	pnuo.mutation.SetKind(ennuty)
	return pnuo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (pnuo *PhoneNumberUpdateOne) SetNillableKind(ennuty *enums.PhoneNumberType) *PhoneNumberUpdateOne {
	if ennuty != nil {
		pnuo.SetKind(*ennuty)
	}
	return pnuo
}

// SetRegionCode sets the "region_code" field.
func (pnuo *PhoneNumberUpdateOne) SetRegionCode(s string) *PhoneNumberUpdateOne {
	pnuo.mutation.SetRegionCode(s)
	return pnuo
}

// SetNillableRegionCode sets the "region_code" field if the given value is not nil.
func (pnuo *PhoneNumberUpdateOne) SetNillableRegionCode(s *string) *PhoneNumberUpdateOne {
	if s != nil {
		pnuo.SetRegionCode(*s)
	}
	return pnuo
}

// ClearRegionCode clears the value of the "region_code" field.
func (pnuo *PhoneNumberUpdateOne) ClearRegionCode() *PhoneNumberUpdateOne {
	pnuo.mutation.ClearRegionCode()
	return pnuo
}

// SetShortCode sets the "short_code" field.
func (pnuo *PhoneNumberUpdateOne) SetShortCode(s string) *PhoneNumberUpdateOne {
	pnuo.mutation.SetShortCode(s)
	return pnuo
}

// SetNillableShortCode sets the "short_code" field if the given value is not nil.
func (pnuo *PhoneNumberUpdateOne) SetNillableShortCode(s *string) *PhoneNumberUpdateOne {
	if s != nil {
		pnuo.SetShortCode(*s)
	}
	return pnuo
}

// ClearShortCode clears the value of the "short_code" field.
func (pnuo *PhoneNumberUpdateOne) ClearShortCode() *PhoneNumberUpdateOne {
	pnuo.mutation.ClearShortCode()
	return pnuo
}

// SetNumber sets the "number" field.
func (pnuo *PhoneNumberUpdateOne) SetNumber(s string) *PhoneNumberUpdateOne {
	pnuo.mutation.SetNumber(s)
	return pnuo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (pnuo *PhoneNumberUpdateOne) SetNillableNumber(s *string) *PhoneNumberUpdateOne {
	if s != nil {
		pnuo.SetNumber(*s)
	}
	return pnuo
}

// ClearNumber clears the value of the "number" field.
func (pnuo *PhoneNumberUpdateOne) ClearNumber() *PhoneNumberUpdateOne {
	pnuo.mutation.ClearNumber()
	return pnuo
}

// SetExtension sets the "extension" field.
func (pnuo *PhoneNumberUpdateOne) SetExtension(s string) *PhoneNumberUpdateOne {
	pnuo.mutation.SetExtension(s)
	return pnuo
}

// SetNillableExtension sets the "extension" field if the given value is not nil.
func (pnuo *PhoneNumberUpdateOne) SetNillableExtension(s *string) *PhoneNumberUpdateOne {
	if s != nil {
		pnuo.SetExtension(*s)
	}
	return pnuo
}

// ClearExtension clears the value of the "extension" field.
func (pnuo *PhoneNumberUpdateOne) ClearExtension() *PhoneNumberUpdateOne {
	pnuo.mutation.ClearExtension()
	return pnuo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (pnuo *PhoneNumberUpdateOne) SetOwner(o *Organization) *PhoneNumberUpdateOne {
	return pnuo.SetOwnerID(o.ID)
}

// AddProfileIDs adds the "profile" edge to the VendorProfile entity by IDs.
func (pnuo *PhoneNumberUpdateOne) AddProfileIDs(ids ...string) *PhoneNumberUpdateOne {
	pnuo.mutation.AddProfileIDs(ids...)
	return pnuo
}

// AddProfile adds the "profile" edges to the VendorProfile entity.
func (pnuo *PhoneNumberUpdateOne) AddProfile(v ...*VendorProfile) *PhoneNumberUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pnuo.AddProfileIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (pnuo *PhoneNumberUpdateOne) AddEventIDs(ids ...string) *PhoneNumberUpdateOne {
	pnuo.mutation.AddEventIDs(ids...)
	return pnuo
}

// AddEvents adds the "events" edges to the Event entity.
func (pnuo *PhoneNumberUpdateOne) AddEvents(e ...*Event) *PhoneNumberUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pnuo.AddEventIDs(ids...)
}

// AddVendorProfilePhoneNumberIDs adds the "vendor_profile_phone_numbers" edge to the VendorProfilePhoneNumber entity by IDs.
func (pnuo *PhoneNumberUpdateOne) AddVendorProfilePhoneNumberIDs(ids ...string) *PhoneNumberUpdateOne {
	pnuo.mutation.AddVendorProfilePhoneNumberIDs(ids...)
	return pnuo
}

// AddVendorProfilePhoneNumbers adds the "vendor_profile_phone_numbers" edges to the VendorProfilePhoneNumber entity.
func (pnuo *PhoneNumberUpdateOne) AddVendorProfilePhoneNumbers(v ...*VendorProfilePhoneNumber) *PhoneNumberUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pnuo.AddVendorProfilePhoneNumberIDs(ids...)
}

// Mutation returns the PhoneNumberMutation object of the builder.
func (pnuo *PhoneNumberUpdateOne) Mutation() *PhoneNumberMutation {
	return pnuo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (pnuo *PhoneNumberUpdateOne) ClearOwner() *PhoneNumberUpdateOne {
	pnuo.mutation.ClearOwner()
	return pnuo
}

// ClearProfile clears all "profile" edges to the VendorProfile entity.
func (pnuo *PhoneNumberUpdateOne) ClearProfile() *PhoneNumberUpdateOne {
	pnuo.mutation.ClearProfile()
	return pnuo
}

// RemoveProfileIDs removes the "profile" edge to VendorProfile entities by IDs.
func (pnuo *PhoneNumberUpdateOne) RemoveProfileIDs(ids ...string) *PhoneNumberUpdateOne {
	pnuo.mutation.RemoveProfileIDs(ids...)
	return pnuo
}

// RemoveProfile removes "profile" edges to VendorProfile entities.
func (pnuo *PhoneNumberUpdateOne) RemoveProfile(v ...*VendorProfile) *PhoneNumberUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pnuo.RemoveProfileIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (pnuo *PhoneNumberUpdateOne) ClearEvents() *PhoneNumberUpdateOne {
	pnuo.mutation.ClearEvents()
	return pnuo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (pnuo *PhoneNumberUpdateOne) RemoveEventIDs(ids ...string) *PhoneNumberUpdateOne {
	pnuo.mutation.RemoveEventIDs(ids...)
	return pnuo
}

// RemoveEvents removes "events" edges to Event entities.
func (pnuo *PhoneNumberUpdateOne) RemoveEvents(e ...*Event) *PhoneNumberUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pnuo.RemoveEventIDs(ids...)
}

// ClearVendorProfilePhoneNumbers clears all "vendor_profile_phone_numbers" edges to the VendorProfilePhoneNumber entity.
func (pnuo *PhoneNumberUpdateOne) ClearVendorProfilePhoneNumbers() *PhoneNumberUpdateOne {
	pnuo.mutation.ClearVendorProfilePhoneNumbers()
	return pnuo
}

// RemoveVendorProfilePhoneNumberIDs removes the "vendor_profile_phone_numbers" edge to VendorProfilePhoneNumber entities by IDs.
func (pnuo *PhoneNumberUpdateOne) RemoveVendorProfilePhoneNumberIDs(ids ...string) *PhoneNumberUpdateOne {
	pnuo.mutation.RemoveVendorProfilePhoneNumberIDs(ids...)
	return pnuo
}

// RemoveVendorProfilePhoneNumbers removes "vendor_profile_phone_numbers" edges to VendorProfilePhoneNumber entities.
func (pnuo *PhoneNumberUpdateOne) RemoveVendorProfilePhoneNumbers(v ...*VendorProfilePhoneNumber) *PhoneNumberUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pnuo.RemoveVendorProfilePhoneNumberIDs(ids...)
}

// Where appends a list predicates to the PhoneNumberUpdate builder.
func (pnuo *PhoneNumberUpdateOne) Where(ps ...predicate.PhoneNumber) *PhoneNumberUpdateOne {
	pnuo.mutation.Where(ps...)
	return pnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pnuo *PhoneNumberUpdateOne) Select(field string, fields ...string) *PhoneNumberUpdateOne {
	pnuo.fields = append([]string{field}, fields...)
	return pnuo
}

// Save executes the query and returns the updated PhoneNumber entity.
func (pnuo *PhoneNumberUpdateOne) Save(ctx context.Context) (*PhoneNumber, error) {
	if err := pnuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pnuo.sqlSave, pnuo.mutation, pnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pnuo *PhoneNumberUpdateOne) SaveX(ctx context.Context) *PhoneNumber {
	node, err := pnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pnuo *PhoneNumberUpdateOne) Exec(ctx context.Context) error {
	_, err := pnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pnuo *PhoneNumberUpdateOne) ExecX(ctx context.Context) {
	if err := pnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pnuo *PhoneNumberUpdateOne) defaults() error {
	if _, ok := pnuo.mutation.UpdatedAt(); !ok && !pnuo.mutation.UpdatedAtCleared() {
		if phonenumber.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized phonenumber.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := phonenumber.UpdateDefaultUpdatedAt()
		pnuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pnuo *PhoneNumberUpdateOne) check() error {
	if v, ok := pnuo.mutation.OwnerID(); ok {
		if err := phonenumber.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "PhoneNumber.owner_id": %w`, err)}
		}
	}
	if v, ok := pnuo.mutation.RegionCode(); ok {
		if err := phonenumber.RegionCodeValidator(v); err != nil {
			return &ValidationError{Name: "region_code", err: fmt.Errorf(`generated: validator failed for field "PhoneNumber.region_code": %w`, err)}
		}
	}
	if v, ok := pnuo.mutation.Number(); ok {
		if err := phonenumber.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`generated: validator failed for field "PhoneNumber.number": %w`, err)}
		}
	}
	return nil
}

func (pnuo *PhoneNumberUpdateOne) sqlSave(ctx context.Context) (_node *PhoneNumber, err error) {
	if err := pnuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(phonenumber.Table, phonenumber.Columns, sqlgraph.NewFieldSpec(phonenumber.FieldID, field.TypeString))
	id, ok := pnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "PhoneNumber.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, phonenumber.FieldID)
		for _, f := range fields {
			if !phonenumber.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != phonenumber.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pnuo.mutation.CreatedAtCleared() {
		_spec.ClearField(phonenumber.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pnuo.mutation.UpdatedAt(); ok {
		_spec.SetField(phonenumber.FieldUpdatedAt, field.TypeTime, value)
	}
	if pnuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(phonenumber.FieldUpdatedAt, field.TypeTime)
	}
	if pnuo.mutation.CreatedByCleared() {
		_spec.ClearField(phonenumber.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pnuo.mutation.UpdatedBy(); ok {
		_spec.SetField(phonenumber.FieldUpdatedBy, field.TypeString, value)
	}
	if pnuo.mutation.UpdatedByCleared() {
		_spec.ClearField(phonenumber.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pnuo.mutation.DeletedAt(); ok {
		_spec.SetField(phonenumber.FieldDeletedAt, field.TypeTime, value)
	}
	if pnuo.mutation.DeletedAtCleared() {
		_spec.ClearField(phonenumber.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pnuo.mutation.DeletedBy(); ok {
		_spec.SetField(phonenumber.FieldDeletedBy, field.TypeString, value)
	}
	if pnuo.mutation.DeletedByCleared() {
		_spec.ClearField(phonenumber.FieldDeletedBy, field.TypeString)
	}
	if value, ok := pnuo.mutation.Tags(); ok {
		_spec.SetField(phonenumber.FieldTags, field.TypeJSON, value)
	}
	if value, ok := pnuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, phonenumber.FieldTags, value)
		})
	}
	if pnuo.mutation.TagsCleared() {
		_spec.ClearField(phonenumber.FieldTags, field.TypeJSON)
	}
	if value, ok := pnuo.mutation.Kind(); ok {
		_spec.SetField(phonenumber.FieldKind, field.TypeString, value)
	}
	if value, ok := pnuo.mutation.RegionCode(); ok {
		_spec.SetField(phonenumber.FieldRegionCode, field.TypeString, value)
	}
	if pnuo.mutation.RegionCodeCleared() {
		_spec.ClearField(phonenumber.FieldRegionCode, field.TypeString)
	}
	if value, ok := pnuo.mutation.ShortCode(); ok {
		_spec.SetField(phonenumber.FieldShortCode, field.TypeString, value)
	}
	if pnuo.mutation.ShortCodeCleared() {
		_spec.ClearField(phonenumber.FieldShortCode, field.TypeString)
	}
	if value, ok := pnuo.mutation.Number(); ok {
		_spec.SetField(phonenumber.FieldNumber, field.TypeString, value)
	}
	if pnuo.mutation.NumberCleared() {
		_spec.ClearField(phonenumber.FieldNumber, field.TypeString)
	}
	if value, ok := pnuo.mutation.Extension(); ok {
		_spec.SetField(phonenumber.FieldExtension, field.TypeString, value)
	}
	if pnuo.mutation.ExtensionCleared() {
		_spec.ClearField(phonenumber.FieldExtension, field.TypeString)
	}
	if pnuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   phonenumber.OwnerTable,
			Columns: []string{phonenumber.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnuo.schemaConfig.PhoneNumber
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   phonenumber.OwnerTable,
			Columns: []string{phonenumber.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnuo.schemaConfig.PhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pnuo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   phonenumber.ProfileTable,
			Columns: phonenumber.ProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnuo.schemaConfig.VendorProfilePhoneNumber
		createE := &VendorProfilePhoneNumberCreate{config: pnuo.config, mutation: newVendorProfilePhoneNumberMutation(pnuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnuo.mutation.RemovedProfileIDs(); len(nodes) > 0 && !pnuo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   phonenumber.ProfileTable,
			Columns: phonenumber.ProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnuo.schemaConfig.VendorProfilePhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VendorProfilePhoneNumberCreate{config: pnuo.config, mutation: newVendorProfilePhoneNumberMutation(pnuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnuo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   phonenumber.ProfileTable,
			Columns: phonenumber.ProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnuo.schemaConfig.VendorProfilePhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VendorProfilePhoneNumberCreate{config: pnuo.config, mutation: newVendorProfilePhoneNumberMutation(pnuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pnuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   phonenumber.EventsTable,
			Columns: []string{phonenumber.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnuo.schemaConfig.Event
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !pnuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   phonenumber.EventsTable,
			Columns: []string{phonenumber.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnuo.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   phonenumber.EventsTable,
			Columns: []string{phonenumber.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnuo.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pnuo.mutation.VendorProfilePhoneNumbersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   phonenumber.VendorProfilePhoneNumbersTable,
			Columns: []string{phonenumber.VendorProfilePhoneNumbersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilephonenumber.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnuo.schemaConfig.VendorProfilePhoneNumber
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnuo.mutation.RemovedVendorProfilePhoneNumbersIDs(); len(nodes) > 0 && !pnuo.mutation.VendorProfilePhoneNumbersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   phonenumber.VendorProfilePhoneNumbersTable,
			Columns: []string{phonenumber.VendorProfilePhoneNumbersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilephonenumber.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnuo.schemaConfig.VendorProfilePhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnuo.mutation.VendorProfilePhoneNumbersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   phonenumber.VendorProfilePhoneNumbersTable,
			Columns: []string{phonenumber.VendorProfilePhoneNumbersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilephonenumber.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnuo.schemaConfig.VendorProfilePhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = pnuo.schemaConfig.PhoneNumber
	ctx = internal.NewSchemaConfigContext(ctx, pnuo.schemaConfig)
	_node = &PhoneNumber{config: pnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{phonenumber.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pnuo.mutation.done = true
	return _node, nil
}
