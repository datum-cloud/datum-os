// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contactlistmembershiphistory"
	"github.com/datum-cloud/datum-os/pkg/enthistory"
)

// ContactListMembershipHistory is the model entity for the ContactListMembershipHistory schema.
type ContactListMembershipHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation enthistory.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *string `json:"deleted_by,omitempty"`
	// ContactListID holds the value of the "contact_list_id" field.
	ContactListID string `json:"contact_list_id,omitempty"`
	// ContactID holds the value of the "contact_id" field.
	ContactID    string `json:"contact_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ContactListMembershipHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case contactlistmembershiphistory.FieldOperation:
			values[i] = new(enthistory.OpType)
		case contactlistmembershiphistory.FieldID, contactlistmembershiphistory.FieldRef, contactlistmembershiphistory.FieldCreatedBy, contactlistmembershiphistory.FieldUpdatedBy, contactlistmembershiphistory.FieldMappingID, contactlistmembershiphistory.FieldDeletedBy, contactlistmembershiphistory.FieldContactListID, contactlistmembershiphistory.FieldContactID:
			values[i] = new(sql.NullString)
		case contactlistmembershiphistory.FieldHistoryTime, contactlistmembershiphistory.FieldCreatedAt, contactlistmembershiphistory.FieldUpdatedAt, contactlistmembershiphistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ContactListMembershipHistory fields.
func (clmh *ContactListMembershipHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contactlistmembershiphistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				clmh.ID = value.String
			}
		case contactlistmembershiphistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				clmh.HistoryTime = value.Time
			}
		case contactlistmembershiphistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				clmh.Ref = value.String
			}
		case contactlistmembershiphistory.FieldOperation:
			if value, ok := values[i].(*enthistory.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				clmh.Operation = *value
			}
		case contactlistmembershiphistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				clmh.CreatedAt = value.Time
			}
		case contactlistmembershiphistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				clmh.UpdatedAt = value.Time
			}
		case contactlistmembershiphistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				clmh.CreatedBy = value.String
			}
		case contactlistmembershiphistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				clmh.UpdatedBy = value.String
			}
		case contactlistmembershiphistory.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				clmh.MappingID = value.String
			}
		case contactlistmembershiphistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				clmh.DeletedAt = new(time.Time)
				*clmh.DeletedAt = value.Time
			}
		case contactlistmembershiphistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				clmh.DeletedBy = new(string)
				*clmh.DeletedBy = value.String
			}
		case contactlistmembershiphistory.FieldContactListID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_list_id", values[i])
			} else if value.Valid {
				clmh.ContactListID = value.String
			}
		case contactlistmembershiphistory.FieldContactID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_id", values[i])
			} else if value.Valid {
				clmh.ContactID = value.String
			}
		default:
			clmh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ContactListMembershipHistory.
// This includes values selected through modifiers, order, etc.
func (clmh *ContactListMembershipHistory) Value(name string) (ent.Value, error) {
	return clmh.selectValues.Get(name)
}

// Update returns a builder for updating this ContactListMembershipHistory.
// Note that you need to call ContactListMembershipHistory.Unwrap() before calling this method if this ContactListMembershipHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (clmh *ContactListMembershipHistory) Update() *ContactListMembershipHistoryUpdateOne {
	return NewContactListMembershipHistoryClient(clmh.config).UpdateOne(clmh)
}

// Unwrap unwraps the ContactListMembershipHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (clmh *ContactListMembershipHistory) Unwrap() *ContactListMembershipHistory {
	_tx, ok := clmh.config.driver.(*txDriver)
	if !ok {
		panic("generated: ContactListMembershipHistory is not a transactional entity")
	}
	clmh.config.driver = _tx.drv
	return clmh
}

// String implements the fmt.Stringer.
func (clmh *ContactListMembershipHistory) String() string {
	var builder strings.Builder
	builder.WriteString("ContactListMembershipHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", clmh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(clmh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(clmh.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", clmh.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(clmh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(clmh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(clmh.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(clmh.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(clmh.MappingID)
	builder.WriteString(", ")
	if v := clmh.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := clmh.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("contact_list_id=")
	builder.WriteString(clmh.ContactListID)
	builder.WriteString(", ")
	builder.WriteString("contact_id=")
	builder.WriteString(clmh.ContactID)
	builder.WriteByte(')')
	return builder.String()
}

// ContactListMembershipHistories is a parsable slice of ContactListMembershipHistory.
type ContactListMembershipHistories []*ContactListMembershipHistory
