// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorhistory"
	"github.com/datum-cloud/datum-os/pkg/enthistory"
	"github.com/datum-cloud/datum-os/pkg/enums"
)

// VendorHistory is the model entity for the VendorHistory schema.
type VendorHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation enthistory.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *string `json:"deleted_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// The organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// VendorType holds the value of the "vendor_type" field.
	VendorType enums.VendorType `json:"vendor_type,omitempty"`
	// OnboardingState holds the value of the "onboarding_state" field.
	OnboardingState enums.OnboardingState `json:"onboarding_state,omitempty"`
	selectValues    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VendorHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vendorhistory.FieldTags:
			values[i] = new([]byte)
		case vendorhistory.FieldOperation:
			values[i] = new(enthistory.OpType)
		case vendorhistory.FieldID, vendorhistory.FieldRef, vendorhistory.FieldCreatedBy, vendorhistory.FieldUpdatedBy, vendorhistory.FieldDeletedBy, vendorhistory.FieldMappingID, vendorhistory.FieldOwnerID, vendorhistory.FieldDisplayName, vendorhistory.FieldVendorType, vendorhistory.FieldOnboardingState:
			values[i] = new(sql.NullString)
		case vendorhistory.FieldHistoryTime, vendorhistory.FieldCreatedAt, vendorhistory.FieldUpdatedAt, vendorhistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VendorHistory fields.
func (vh *VendorHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vendorhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				vh.ID = value.String
			}
		case vendorhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				vh.HistoryTime = value.Time
			}
		case vendorhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				vh.Ref = value.String
			}
		case vendorhistory.FieldOperation:
			if value, ok := values[i].(*enthistory.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				vh.Operation = *value
			}
		case vendorhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vh.CreatedAt = value.Time
			}
		case vendorhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vh.UpdatedAt = value.Time
			}
		case vendorhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				vh.CreatedBy = value.String
			}
		case vendorhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				vh.UpdatedBy = value.String
			}
		case vendorhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				vh.DeletedAt = new(time.Time)
				*vh.DeletedAt = value.Time
			}
		case vendorhistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				vh.DeletedBy = new(string)
				*vh.DeletedBy = value.String
			}
		case vendorhistory.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				vh.MappingID = value.String
			}
		case vendorhistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &vh.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case vendorhistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				vh.OwnerID = value.String
			}
		case vendorhistory.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				vh.DisplayName = value.String
			}
		case vendorhistory.FieldVendorType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vendor_type", values[i])
			} else if value.Valid {
				vh.VendorType = enums.VendorType(value.String)
			}
		case vendorhistory.FieldOnboardingState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field onboarding_state", values[i])
			} else if value.Valid {
				vh.OnboardingState = enums.OnboardingState(value.String)
			}
		default:
			vh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VendorHistory.
// This includes values selected through modifiers, order, etc.
func (vh *VendorHistory) Value(name string) (ent.Value, error) {
	return vh.selectValues.Get(name)
}

// Update returns a builder for updating this VendorHistory.
// Note that you need to call VendorHistory.Unwrap() before calling this method if this VendorHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (vh *VendorHistory) Update() *VendorHistoryUpdateOne {
	return NewVendorHistoryClient(vh.config).UpdateOne(vh)
}

// Unwrap unwraps the VendorHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vh *VendorHistory) Unwrap() *VendorHistory {
	_tx, ok := vh.config.driver.(*txDriver)
	if !ok {
		panic("generated: VendorHistory is not a transactional entity")
	}
	vh.config.driver = _tx.drv
	return vh
}

// String implements the fmt.Stringer.
func (vh *VendorHistory) String() string {
	var builder strings.Builder
	builder.WriteString("VendorHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(vh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(vh.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", vh.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(vh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(vh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(vh.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(vh.UpdatedBy)
	builder.WriteString(", ")
	if v := vh.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := vh.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(vh.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", vh.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(vh.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(vh.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("vendor_type=")
	builder.WriteString(fmt.Sprintf("%v", vh.VendorType))
	builder.WriteString(", ")
	builder.WriteString("onboarding_state=")
	builder.WriteString(fmt.Sprintf("%v", vh.OnboardingState))
	builder.WriteByte(')')
	return builder.String()
}

// VendorHistories is a parsable slice of VendorHistory.
type VendorHistories []*VendorHistory
