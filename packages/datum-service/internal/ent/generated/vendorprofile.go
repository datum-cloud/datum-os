// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datum-cloud/datum-os/internal/ent/generated/organization"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendor"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofile"
	"github.com/datum-cloud/datum-os/pkg/enums"
)

// VendorProfile is the model entity for the VendorProfile schema.
type VendorProfile struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// The organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// The ID of the Vendor
	VendorID string `json:"vendor_id,omitempty"`
	// The name of the Corporation or Person
	Name string `json:"name,omitempty"`
	// The type of corporation (e.g. LLC, S-Corp, C-Corp, Other)
	CorporationType string `json:"corporation_type,omitempty"`
	// The Doing Business As (DBA) name of the Corporation
	CorporationDba string `json:"corporation_dba,omitempty"`
	// The description of the Corporation or Person and the services they provide
	Description string `json:"description,omitempty"`
	// The URL of the website of the Corporation or Person
	WebsiteURI string `json:"website_uri,omitempty"`
	// The tax ID of the Corporation or Person
	TaxID string `json:"-"`
	// The type of tax ID (e.g. EIN, SSN, TIN, etc.)
	TaxIDType enums.TaxIDType `json:"tax_id_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VendorProfileQuery when eager-loading is set.
	Edges        VendorProfileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VendorProfileEdges holds the relations/edges for other nodes in the graph.
type VendorProfileEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// PostalAddresses holds the value of the postal_addresses edge.
	PostalAddresses []*PostalAddress `json:"postal_addresses,omitempty"`
	// PhoneNumbers holds the value of the phone_numbers edge.
	PhoneNumbers []*PhoneNumber `json:"phone_numbers,omitempty"`
	// Vendor holds the value of the vendor edge.
	Vendor *Vendor `json:"vendor,omitempty"`
	// VendorProfilePostalAddresses holds the value of the vendor_profile_postal_addresses edge.
	VendorProfilePostalAddresses []*VendorProfilePostalAddress `json:"vendor_profile_postal_addresses,omitempty"`
	// VendorProfilePhoneNumbers holds the value of the vendor_profile_phone_numbers edge.
	VendorProfilePhoneNumbers []*VendorProfilePhoneNumber `json:"vendor_profile_phone_numbers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
	// totalCount holds the count of the edges above.
	totalCount [6]map[string]int

	namedPostalAddresses              map[string][]*PostalAddress
	namedPhoneNumbers                 map[string][]*PhoneNumber
	namedVendorProfilePostalAddresses map[string][]*VendorProfilePostalAddress
	namedVendorProfilePhoneNumbers    map[string][]*VendorProfilePhoneNumber
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VendorProfileEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// PostalAddressesOrErr returns the PostalAddresses value or an error if the edge
// was not loaded in eager-loading.
func (e VendorProfileEdges) PostalAddressesOrErr() ([]*PostalAddress, error) {
	if e.loadedTypes[1] {
		return e.PostalAddresses, nil
	}
	return nil, &NotLoadedError{edge: "postal_addresses"}
}

// PhoneNumbersOrErr returns the PhoneNumbers value or an error if the edge
// was not loaded in eager-loading.
func (e VendorProfileEdges) PhoneNumbersOrErr() ([]*PhoneNumber, error) {
	if e.loadedTypes[2] {
		return e.PhoneNumbers, nil
	}
	return nil, &NotLoadedError{edge: "phone_numbers"}
}

// VendorOrErr returns the Vendor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VendorProfileEdges) VendorOrErr() (*Vendor, error) {
	if e.Vendor != nil {
		return e.Vendor, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: vendor.Label}
	}
	return nil, &NotLoadedError{edge: "vendor"}
}

// VendorProfilePostalAddressesOrErr returns the VendorProfilePostalAddresses value or an error if the edge
// was not loaded in eager-loading.
func (e VendorProfileEdges) VendorProfilePostalAddressesOrErr() ([]*VendorProfilePostalAddress, error) {
	if e.loadedTypes[4] {
		return e.VendorProfilePostalAddresses, nil
	}
	return nil, &NotLoadedError{edge: "vendor_profile_postal_addresses"}
}

// VendorProfilePhoneNumbersOrErr returns the VendorProfilePhoneNumbers value or an error if the edge
// was not loaded in eager-loading.
func (e VendorProfileEdges) VendorProfilePhoneNumbersOrErr() ([]*VendorProfilePhoneNumber, error) {
	if e.loadedTypes[5] {
		return e.VendorProfilePhoneNumbers, nil
	}
	return nil, &NotLoadedError{edge: "vendor_profile_phone_numbers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VendorProfile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vendorprofile.FieldTags:
			values[i] = new([]byte)
		case vendorprofile.FieldID, vendorprofile.FieldCreatedBy, vendorprofile.FieldUpdatedBy, vendorprofile.FieldDeletedBy, vendorprofile.FieldMappingID, vendorprofile.FieldOwnerID, vendorprofile.FieldVendorID, vendorprofile.FieldName, vendorprofile.FieldCorporationType, vendorprofile.FieldCorporationDba, vendorprofile.FieldDescription, vendorprofile.FieldWebsiteURI, vendorprofile.FieldTaxID, vendorprofile.FieldTaxIDType:
			values[i] = new(sql.NullString)
		case vendorprofile.FieldCreatedAt, vendorprofile.FieldUpdatedAt, vendorprofile.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VendorProfile fields.
func (vp *VendorProfile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vendorprofile.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				vp.ID = value.String
			}
		case vendorprofile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vp.CreatedAt = value.Time
			}
		case vendorprofile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vp.UpdatedAt = value.Time
			}
		case vendorprofile.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				vp.CreatedBy = value.String
			}
		case vendorprofile.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				vp.UpdatedBy = value.String
			}
		case vendorprofile.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				vp.DeletedAt = value.Time
			}
		case vendorprofile.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				vp.DeletedBy = value.String
			}
		case vendorprofile.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				vp.MappingID = value.String
			}
		case vendorprofile.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &vp.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case vendorprofile.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				vp.OwnerID = value.String
			}
		case vendorprofile.FieldVendorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vendor_id", values[i])
			} else if value.Valid {
				vp.VendorID = value.String
			}
		case vendorprofile.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				vp.Name = value.String
			}
		case vendorprofile.FieldCorporationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field corporation_type", values[i])
			} else if value.Valid {
				vp.CorporationType = value.String
			}
		case vendorprofile.FieldCorporationDba:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field corporation_dba", values[i])
			} else if value.Valid {
				vp.CorporationDba = value.String
			}
		case vendorprofile.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				vp.Description = value.String
			}
		case vendorprofile.FieldWebsiteURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field website_uri", values[i])
			} else if value.Valid {
				vp.WebsiteURI = value.String
			}
		case vendorprofile.FieldTaxID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tax_id", values[i])
			} else if value.Valid {
				vp.TaxID = value.String
			}
		case vendorprofile.FieldTaxIDType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tax_id_type", values[i])
			} else if value.Valid {
				vp.TaxIDType = enums.TaxIDType(value.String)
			}
		default:
			vp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VendorProfile.
// This includes values selected through modifiers, order, etc.
func (vp *VendorProfile) Value(name string) (ent.Value, error) {
	return vp.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the VendorProfile entity.
func (vp *VendorProfile) QueryOwner() *OrganizationQuery {
	return NewVendorProfileClient(vp.config).QueryOwner(vp)
}

// QueryPostalAddresses queries the "postal_addresses" edge of the VendorProfile entity.
func (vp *VendorProfile) QueryPostalAddresses() *PostalAddressQuery {
	return NewVendorProfileClient(vp.config).QueryPostalAddresses(vp)
}

// QueryPhoneNumbers queries the "phone_numbers" edge of the VendorProfile entity.
func (vp *VendorProfile) QueryPhoneNumbers() *PhoneNumberQuery {
	return NewVendorProfileClient(vp.config).QueryPhoneNumbers(vp)
}

// QueryVendor queries the "vendor" edge of the VendorProfile entity.
func (vp *VendorProfile) QueryVendor() *VendorQuery {
	return NewVendorProfileClient(vp.config).QueryVendor(vp)
}

// QueryVendorProfilePostalAddresses queries the "vendor_profile_postal_addresses" edge of the VendorProfile entity.
func (vp *VendorProfile) QueryVendorProfilePostalAddresses() *VendorProfilePostalAddressQuery {
	return NewVendorProfileClient(vp.config).QueryVendorProfilePostalAddresses(vp)
}

// QueryVendorProfilePhoneNumbers queries the "vendor_profile_phone_numbers" edge of the VendorProfile entity.
func (vp *VendorProfile) QueryVendorProfilePhoneNumbers() *VendorProfilePhoneNumberQuery {
	return NewVendorProfileClient(vp.config).QueryVendorProfilePhoneNumbers(vp)
}

// Update returns a builder for updating this VendorProfile.
// Note that you need to call VendorProfile.Unwrap() before calling this method if this VendorProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (vp *VendorProfile) Update() *VendorProfileUpdateOne {
	return NewVendorProfileClient(vp.config).UpdateOne(vp)
}

// Unwrap unwraps the VendorProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vp *VendorProfile) Unwrap() *VendorProfile {
	_tx, ok := vp.config.driver.(*txDriver)
	if !ok {
		panic("generated: VendorProfile is not a transactional entity")
	}
	vp.config.driver = _tx.drv
	return vp
}

// String implements the fmt.Stringer.
func (vp *VendorProfile) String() string {
	var builder strings.Builder
	builder.WriteString("VendorProfile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(vp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(vp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(vp.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(vp.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(vp.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(vp.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(vp.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", vp.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(vp.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("vendor_id=")
	builder.WriteString(vp.VendorID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(vp.Name)
	builder.WriteString(", ")
	builder.WriteString("corporation_type=")
	builder.WriteString(vp.CorporationType)
	builder.WriteString(", ")
	builder.WriteString("corporation_dba=")
	builder.WriteString(vp.CorporationDba)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(vp.Description)
	builder.WriteString(", ")
	builder.WriteString("website_uri=")
	builder.WriteString(vp.WebsiteURI)
	builder.WriteString(", ")
	builder.WriteString("tax_id=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("tax_id_type=")
	builder.WriteString(fmt.Sprintf("%v", vp.TaxIDType))
	builder.WriteByte(')')
	return builder.String()
}

// NamedPostalAddresses returns the PostalAddresses named value or an error if the edge was not
// loaded in eager-loading with this name.
func (vp *VendorProfile) NamedPostalAddresses(name string) ([]*PostalAddress, error) {
	if vp.Edges.namedPostalAddresses == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := vp.Edges.namedPostalAddresses[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (vp *VendorProfile) appendNamedPostalAddresses(name string, edges ...*PostalAddress) {
	if vp.Edges.namedPostalAddresses == nil {
		vp.Edges.namedPostalAddresses = make(map[string][]*PostalAddress)
	}
	if len(edges) == 0 {
		vp.Edges.namedPostalAddresses[name] = []*PostalAddress{}
	} else {
		vp.Edges.namedPostalAddresses[name] = append(vp.Edges.namedPostalAddresses[name], edges...)
	}
}

// NamedPhoneNumbers returns the PhoneNumbers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (vp *VendorProfile) NamedPhoneNumbers(name string) ([]*PhoneNumber, error) {
	if vp.Edges.namedPhoneNumbers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := vp.Edges.namedPhoneNumbers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (vp *VendorProfile) appendNamedPhoneNumbers(name string, edges ...*PhoneNumber) {
	if vp.Edges.namedPhoneNumbers == nil {
		vp.Edges.namedPhoneNumbers = make(map[string][]*PhoneNumber)
	}
	if len(edges) == 0 {
		vp.Edges.namedPhoneNumbers[name] = []*PhoneNumber{}
	} else {
		vp.Edges.namedPhoneNumbers[name] = append(vp.Edges.namedPhoneNumbers[name], edges...)
	}
}

// NamedVendorProfilePostalAddresses returns the VendorProfilePostalAddresses named value or an error if the edge was not
// loaded in eager-loading with this name.
func (vp *VendorProfile) NamedVendorProfilePostalAddresses(name string) ([]*VendorProfilePostalAddress, error) {
	if vp.Edges.namedVendorProfilePostalAddresses == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := vp.Edges.namedVendorProfilePostalAddresses[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (vp *VendorProfile) appendNamedVendorProfilePostalAddresses(name string, edges ...*VendorProfilePostalAddress) {
	if vp.Edges.namedVendorProfilePostalAddresses == nil {
		vp.Edges.namedVendorProfilePostalAddresses = make(map[string][]*VendorProfilePostalAddress)
	}
	if len(edges) == 0 {
		vp.Edges.namedVendorProfilePostalAddresses[name] = []*VendorProfilePostalAddress{}
	} else {
		vp.Edges.namedVendorProfilePostalAddresses[name] = append(vp.Edges.namedVendorProfilePostalAddresses[name], edges...)
	}
}

// NamedVendorProfilePhoneNumbers returns the VendorProfilePhoneNumbers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (vp *VendorProfile) NamedVendorProfilePhoneNumbers(name string) ([]*VendorProfilePhoneNumber, error) {
	if vp.Edges.namedVendorProfilePhoneNumbers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := vp.Edges.namedVendorProfilePhoneNumbers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (vp *VendorProfile) appendNamedVendorProfilePhoneNumbers(name string, edges ...*VendorProfilePhoneNumber) {
	if vp.Edges.namedVendorProfilePhoneNumbers == nil {
		vp.Edges.namedVendorProfilePhoneNumbers = make(map[string][]*VendorProfilePhoneNumber)
	}
	if len(edges) == 0 {
		vp.Edges.namedVendorProfilePhoneNumbers[name] = []*VendorProfilePhoneNumber{}
	} else {
		vp.Edges.namedVendorProfilePhoneNumbers[name] = append(vp.Edges.namedVendorProfilePhoneNumbers[name], edges...)
	}
}

// VendorProfiles is a parsable slice of VendorProfile.
type VendorProfiles []*VendorProfile
