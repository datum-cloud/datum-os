// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilepostaladdress"
)

// VendorProfilePostalAddressDelete is the builder for deleting a VendorProfilePostalAddress entity.
type VendorProfilePostalAddressDelete struct {
	config
	hooks    []Hook
	mutation *VendorProfilePostalAddressMutation
}

// Where appends a list predicates to the VendorProfilePostalAddressDelete builder.
func (vppad *VendorProfilePostalAddressDelete) Where(ps ...predicate.VendorProfilePostalAddress) *VendorProfilePostalAddressDelete {
	vppad.mutation.Where(ps...)
	return vppad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vppad *VendorProfilePostalAddressDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, vppad.sqlExec, vppad.mutation, vppad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vppad *VendorProfilePostalAddressDelete) ExecX(ctx context.Context) int {
	n, err := vppad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vppad *VendorProfilePostalAddressDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(vendorprofilepostaladdress.Table, sqlgraph.NewFieldSpec(vendorprofilepostaladdress.FieldID, field.TypeString))
	_spec.Node.Schema = vppad.schemaConfig.VendorProfilePostalAddress
	ctx = internal.NewSchemaConfigContext(ctx, vppad.schemaConfig)
	if ps := vppad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vppad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vppad.mutation.done = true
	return affected, err
}

// VendorProfilePostalAddressDeleteOne is the builder for deleting a single VendorProfilePostalAddress entity.
type VendorProfilePostalAddressDeleteOne struct {
	vppad *VendorProfilePostalAddressDelete
}

// Where appends a list predicates to the VendorProfilePostalAddressDelete builder.
func (vppado *VendorProfilePostalAddressDeleteOne) Where(ps ...predicate.VendorProfilePostalAddress) *VendorProfilePostalAddressDeleteOne {
	vppado.vppad.mutation.Where(ps...)
	return vppado
}

// Exec executes the deletion query.
func (vppado *VendorProfilePostalAddressDeleteOne) Exec(ctx context.Context) error {
	n, err := vppado.vppad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{vendorprofilepostaladdress.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vppado *VendorProfilePostalAddressDeleteOne) ExecX(ctx context.Context) {
	if err := vppado.Exec(ctx); err != nil {
		panic(err)
	}
}
