// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
	"github.com/datum-cloud/datum-os/internal/ent/generated/phonenumber"
)

// PhoneNumberDelete is the builder for deleting a PhoneNumber entity.
type PhoneNumberDelete struct {
	config
	hooks    []Hook
	mutation *PhoneNumberMutation
}

// Where appends a list predicates to the PhoneNumberDelete builder.
func (pnd *PhoneNumberDelete) Where(ps ...predicate.PhoneNumber) *PhoneNumberDelete {
	pnd.mutation.Where(ps...)
	return pnd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pnd *PhoneNumberDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pnd.sqlExec, pnd.mutation, pnd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pnd *PhoneNumberDelete) ExecX(ctx context.Context) int {
	n, err := pnd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pnd *PhoneNumberDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(phonenumber.Table, sqlgraph.NewFieldSpec(phonenumber.FieldID, field.TypeString))
	_spec.Node.Schema = pnd.schemaConfig.PhoneNumber
	ctx = internal.NewSchemaConfigContext(ctx, pnd.schemaConfig)
	if ps := pnd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pnd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pnd.mutation.done = true
	return affected, err
}

// PhoneNumberDeleteOne is the builder for deleting a single PhoneNumber entity.
type PhoneNumberDeleteOne struct {
	pnd *PhoneNumberDelete
}

// Where appends a list predicates to the PhoneNumberDelete builder.
func (pndo *PhoneNumberDeleteOne) Where(ps ...predicate.PhoneNumber) *PhoneNumberDeleteOne {
	pndo.pnd.mutation.Where(ps...)
	return pndo
}

// Exec executes the deletion query.
func (pndo *PhoneNumberDeleteOne) Exec(ctx context.Context) error {
	n, err := pndo.pnd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{phonenumber.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pndo *PhoneNumberDeleteOne) ExecX(ctx context.Context) {
	if err := pndo.Exec(ctx); err != nil {
		panic(err)
	}
}
