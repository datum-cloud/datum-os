// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contactlisthistory"
	"github.com/datum-cloud/datum-os/pkg/enthistory"
)

// ContactListHistoryCreate is the builder for creating a ContactListHistory entity.
type ContactListHistoryCreate struct {
	config
	mutation *ContactListHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (clhc *ContactListHistoryCreate) SetHistoryTime(t time.Time) *ContactListHistoryCreate {
	clhc.mutation.SetHistoryTime(t)
	return clhc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (clhc *ContactListHistoryCreate) SetNillableHistoryTime(t *time.Time) *ContactListHistoryCreate {
	if t != nil {
		clhc.SetHistoryTime(*t)
	}
	return clhc
}

// SetRef sets the "ref" field.
func (clhc *ContactListHistoryCreate) SetRef(s string) *ContactListHistoryCreate {
	clhc.mutation.SetRef(s)
	return clhc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (clhc *ContactListHistoryCreate) SetNillableRef(s *string) *ContactListHistoryCreate {
	if s != nil {
		clhc.SetRef(*s)
	}
	return clhc
}

// SetOperation sets the "operation" field.
func (clhc *ContactListHistoryCreate) SetOperation(et enthistory.OpType) *ContactListHistoryCreate {
	clhc.mutation.SetOperation(et)
	return clhc
}

// SetCreatedAt sets the "created_at" field.
func (clhc *ContactListHistoryCreate) SetCreatedAt(t time.Time) *ContactListHistoryCreate {
	clhc.mutation.SetCreatedAt(t)
	return clhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (clhc *ContactListHistoryCreate) SetNillableCreatedAt(t *time.Time) *ContactListHistoryCreate {
	if t != nil {
		clhc.SetCreatedAt(*t)
	}
	return clhc
}

// SetUpdatedAt sets the "updated_at" field.
func (clhc *ContactListHistoryCreate) SetUpdatedAt(t time.Time) *ContactListHistoryCreate {
	clhc.mutation.SetUpdatedAt(t)
	return clhc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (clhc *ContactListHistoryCreate) SetNillableUpdatedAt(t *time.Time) *ContactListHistoryCreate {
	if t != nil {
		clhc.SetUpdatedAt(*t)
	}
	return clhc
}

// SetCreatedBy sets the "created_by" field.
func (clhc *ContactListHistoryCreate) SetCreatedBy(s string) *ContactListHistoryCreate {
	clhc.mutation.SetCreatedBy(s)
	return clhc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (clhc *ContactListHistoryCreate) SetNillableCreatedBy(s *string) *ContactListHistoryCreate {
	if s != nil {
		clhc.SetCreatedBy(*s)
	}
	return clhc
}

// SetUpdatedBy sets the "updated_by" field.
func (clhc *ContactListHistoryCreate) SetUpdatedBy(s string) *ContactListHistoryCreate {
	clhc.mutation.SetUpdatedBy(s)
	return clhc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (clhc *ContactListHistoryCreate) SetNillableUpdatedBy(s *string) *ContactListHistoryCreate {
	if s != nil {
		clhc.SetUpdatedBy(*s)
	}
	return clhc
}

// SetDeletedAt sets the "deleted_at" field.
func (clhc *ContactListHistoryCreate) SetDeletedAt(t time.Time) *ContactListHistoryCreate {
	clhc.mutation.SetDeletedAt(t)
	return clhc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (clhc *ContactListHistoryCreate) SetNillableDeletedAt(t *time.Time) *ContactListHistoryCreate {
	if t != nil {
		clhc.SetDeletedAt(*t)
	}
	return clhc
}

// SetDeletedBy sets the "deleted_by" field.
func (clhc *ContactListHistoryCreate) SetDeletedBy(s string) *ContactListHistoryCreate {
	clhc.mutation.SetDeletedBy(s)
	return clhc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (clhc *ContactListHistoryCreate) SetNillableDeletedBy(s *string) *ContactListHistoryCreate {
	if s != nil {
		clhc.SetDeletedBy(*s)
	}
	return clhc
}

// SetMappingID sets the "mapping_id" field.
func (clhc *ContactListHistoryCreate) SetMappingID(s string) *ContactListHistoryCreate {
	clhc.mutation.SetMappingID(s)
	return clhc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (clhc *ContactListHistoryCreate) SetNillableMappingID(s *string) *ContactListHistoryCreate {
	if s != nil {
		clhc.SetMappingID(*s)
	}
	return clhc
}

// SetTags sets the "tags" field.
func (clhc *ContactListHistoryCreate) SetTags(s []string) *ContactListHistoryCreate {
	clhc.mutation.SetTags(s)
	return clhc
}

// SetOwnerID sets the "owner_id" field.
func (clhc *ContactListHistoryCreate) SetOwnerID(s string) *ContactListHistoryCreate {
	clhc.mutation.SetOwnerID(s)
	return clhc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (clhc *ContactListHistoryCreate) SetNillableOwnerID(s *string) *ContactListHistoryCreate {
	if s != nil {
		clhc.SetOwnerID(*s)
	}
	return clhc
}

// SetName sets the "name" field.
func (clhc *ContactListHistoryCreate) SetName(s string) *ContactListHistoryCreate {
	clhc.mutation.SetName(s)
	return clhc
}

// SetVisibility sets the "visibility" field.
func (clhc *ContactListHistoryCreate) SetVisibility(s string) *ContactListHistoryCreate {
	clhc.mutation.SetVisibility(s)
	return clhc
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (clhc *ContactListHistoryCreate) SetNillableVisibility(s *string) *ContactListHistoryCreate {
	if s != nil {
		clhc.SetVisibility(*s)
	}
	return clhc
}

// SetDisplayName sets the "display_name" field.
func (clhc *ContactListHistoryCreate) SetDisplayName(s string) *ContactListHistoryCreate {
	clhc.mutation.SetDisplayName(s)
	return clhc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (clhc *ContactListHistoryCreate) SetNillableDisplayName(s *string) *ContactListHistoryCreate {
	if s != nil {
		clhc.SetDisplayName(*s)
	}
	return clhc
}

// SetDescription sets the "description" field.
func (clhc *ContactListHistoryCreate) SetDescription(s string) *ContactListHistoryCreate {
	clhc.mutation.SetDescription(s)
	return clhc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (clhc *ContactListHistoryCreate) SetNillableDescription(s *string) *ContactListHistoryCreate {
	if s != nil {
		clhc.SetDescription(*s)
	}
	return clhc
}

// SetID sets the "id" field.
func (clhc *ContactListHistoryCreate) SetID(s string) *ContactListHistoryCreate {
	clhc.mutation.SetID(s)
	return clhc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (clhc *ContactListHistoryCreate) SetNillableID(s *string) *ContactListHistoryCreate {
	if s != nil {
		clhc.SetID(*s)
	}
	return clhc
}

// Mutation returns the ContactListHistoryMutation object of the builder.
func (clhc *ContactListHistoryCreate) Mutation() *ContactListHistoryMutation {
	return clhc.mutation
}

// Save creates the ContactListHistory in the database.
func (clhc *ContactListHistoryCreate) Save(ctx context.Context) (*ContactListHistory, error) {
	if err := clhc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, clhc.sqlSave, clhc.mutation, clhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (clhc *ContactListHistoryCreate) SaveX(ctx context.Context) *ContactListHistory {
	v, err := clhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clhc *ContactListHistoryCreate) Exec(ctx context.Context) error {
	_, err := clhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clhc *ContactListHistoryCreate) ExecX(ctx context.Context) {
	if err := clhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clhc *ContactListHistoryCreate) defaults() error {
	if _, ok := clhc.mutation.HistoryTime(); !ok {
		if contactlisthistory.DefaultHistoryTime == nil {
			return fmt.Errorf("generated: uninitialized contactlisthistory.DefaultHistoryTime (forgotten import generated/runtime?)")
		}
		v := contactlisthistory.DefaultHistoryTime()
		clhc.mutation.SetHistoryTime(v)
	}
	if _, ok := clhc.mutation.CreatedAt(); !ok {
		if contactlisthistory.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized contactlisthistory.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := contactlisthistory.DefaultCreatedAt()
		clhc.mutation.SetCreatedAt(v)
	}
	if _, ok := clhc.mutation.UpdatedAt(); !ok {
		if contactlisthistory.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized contactlisthistory.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := contactlisthistory.DefaultUpdatedAt()
		clhc.mutation.SetUpdatedAt(v)
	}
	if _, ok := clhc.mutation.MappingID(); !ok {
		if contactlisthistory.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized contactlisthistory.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := contactlisthistory.DefaultMappingID()
		clhc.mutation.SetMappingID(v)
	}
	if _, ok := clhc.mutation.Tags(); !ok {
		v := contactlisthistory.DefaultTags
		clhc.mutation.SetTags(v)
	}
	if _, ok := clhc.mutation.Visibility(); !ok {
		v := contactlisthistory.DefaultVisibility
		clhc.mutation.SetVisibility(v)
	}
	if _, ok := clhc.mutation.DisplayName(); !ok {
		v := contactlisthistory.DefaultDisplayName
		clhc.mutation.SetDisplayName(v)
	}
	if _, ok := clhc.mutation.ID(); !ok {
		if contactlisthistory.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized contactlisthistory.DefaultID (forgotten import generated/runtime?)")
		}
		v := contactlisthistory.DefaultID()
		clhc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (clhc *ContactListHistoryCreate) check() error {
	if _, ok := clhc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "ContactListHistory.history_time"`)}
	}
	if _, ok := clhc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "ContactListHistory.operation"`)}
	}
	if v, ok := clhc.mutation.Operation(); ok {
		if err := contactlisthistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "ContactListHistory.operation": %w`, err)}
		}
	}
	if _, ok := clhc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "ContactListHistory.mapping_id"`)}
	}
	if _, ok := clhc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "ContactListHistory.name"`)}
	}
	if _, ok := clhc.mutation.Visibility(); !ok {
		return &ValidationError{Name: "visibility", err: errors.New(`generated: missing required field "ContactListHistory.visibility"`)}
	}
	if _, ok := clhc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`generated: missing required field "ContactListHistory.display_name"`)}
	}
	return nil
}

func (clhc *ContactListHistoryCreate) sqlSave(ctx context.Context) (*ContactListHistory, error) {
	if err := clhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := clhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ContactListHistory.ID type: %T", _spec.ID.Value)
		}
	}
	clhc.mutation.id = &_node.ID
	clhc.mutation.done = true
	return _node, nil
}

func (clhc *ContactListHistoryCreate) createSpec() (*ContactListHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &ContactListHistory{config: clhc.config}
		_spec = sqlgraph.NewCreateSpec(contactlisthistory.Table, sqlgraph.NewFieldSpec(contactlisthistory.FieldID, field.TypeString))
	)
	_spec.Schema = clhc.schemaConfig.ContactListHistory
	if id, ok := clhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := clhc.mutation.HistoryTime(); ok {
		_spec.SetField(contactlisthistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := clhc.mutation.Ref(); ok {
		_spec.SetField(contactlisthistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := clhc.mutation.Operation(); ok {
		_spec.SetField(contactlisthistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := clhc.mutation.CreatedAt(); ok {
		_spec.SetField(contactlisthistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := clhc.mutation.UpdatedAt(); ok {
		_spec.SetField(contactlisthistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := clhc.mutation.CreatedBy(); ok {
		_spec.SetField(contactlisthistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := clhc.mutation.UpdatedBy(); ok {
		_spec.SetField(contactlisthistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := clhc.mutation.DeletedAt(); ok {
		_spec.SetField(contactlisthistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := clhc.mutation.DeletedBy(); ok {
		_spec.SetField(contactlisthistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = &value
	}
	if value, ok := clhc.mutation.MappingID(); ok {
		_spec.SetField(contactlisthistory.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := clhc.mutation.Tags(); ok {
		_spec.SetField(contactlisthistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := clhc.mutation.OwnerID(); ok {
		_spec.SetField(contactlisthistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := clhc.mutation.Name(); ok {
		_spec.SetField(contactlisthistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := clhc.mutation.Visibility(); ok {
		_spec.SetField(contactlisthistory.FieldVisibility, field.TypeString, value)
		_node.Visibility = value
	}
	if value, ok := clhc.mutation.DisplayName(); ok {
		_spec.SetField(contactlisthistory.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := clhc.mutation.Description(); ok {
		_spec.SetField(contactlisthistory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	return _node, _spec
}

// ContactListHistoryCreateBulk is the builder for creating many ContactListHistory entities in bulk.
type ContactListHistoryCreateBulk struct {
	config
	err      error
	builders []*ContactListHistoryCreate
}

// Save creates the ContactListHistory entities in the database.
func (clhcb *ContactListHistoryCreateBulk) Save(ctx context.Context) ([]*ContactListHistory, error) {
	if clhcb.err != nil {
		return nil, clhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(clhcb.builders))
	nodes := make([]*ContactListHistory, len(clhcb.builders))
	mutators := make([]Mutator, len(clhcb.builders))
	for i := range clhcb.builders {
		func(i int, root context.Context) {
			builder := clhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContactListHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clhcb *ContactListHistoryCreateBulk) SaveX(ctx context.Context) []*ContactListHistory {
	v, err := clhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clhcb *ContactListHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := clhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clhcb *ContactListHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := clhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
