// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datum-cloud/datum-os/internal/ent/generated/organization"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofile"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilepaymentpreference"
	"github.com/datum-cloud/datum-os/pkg/enums"
)

// VendorProfilePaymentPreference is the model entity for the VendorProfilePaymentPreference schema.
type VendorProfilePaymentPreference struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// The organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// The ID of the vendor profile.
	VendorProfileID string `json:"vendor_profile_id,omitempty"`
	// Whether this is the preferred payment method.
	Preferred bool `json:"preferred,omitempty"`
	// The payment method. (e.g. DOMESTIC_WIRE_TRANSFER, INTERNATIONAL_WIRE_TRANSFER, ACH, CREDIT_CARD)
	Method enums.PaymentMethod `json:"method,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VendorProfilePaymentPreferenceQuery when eager-loading is set.
	Edges        VendorProfilePaymentPreferenceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VendorProfilePaymentPreferenceEdges holds the relations/edges for other nodes in the graph.
type VendorProfilePaymentPreferenceEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// VendorProfile holds the value of the vendor_profile edge.
	VendorProfile *VendorProfile `json:"vendor_profile,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VendorProfilePaymentPreferenceEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// VendorProfileOrErr returns the VendorProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VendorProfilePaymentPreferenceEdges) VendorProfileOrErr() (*VendorProfile, error) {
	if e.VendorProfile != nil {
		return e.VendorProfile, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: vendorprofile.Label}
	}
	return nil, &NotLoadedError{edge: "vendor_profile"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VendorProfilePaymentPreference) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vendorprofilepaymentpreference.FieldTags:
			values[i] = new([]byte)
		case vendorprofilepaymentpreference.FieldPreferred:
			values[i] = new(sql.NullBool)
		case vendorprofilepaymentpreference.FieldID, vendorprofilepaymentpreference.FieldMappingID, vendorprofilepaymentpreference.FieldCreatedBy, vendorprofilepaymentpreference.FieldUpdatedBy, vendorprofilepaymentpreference.FieldDeletedBy, vendorprofilepaymentpreference.FieldOwnerID, vendorprofilepaymentpreference.FieldVendorProfileID, vendorprofilepaymentpreference.FieldMethod:
			values[i] = new(sql.NullString)
		case vendorprofilepaymentpreference.FieldCreatedAt, vendorprofilepaymentpreference.FieldUpdatedAt, vendorprofilepaymentpreference.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VendorProfilePaymentPreference fields.
func (vppp *VendorProfilePaymentPreference) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vendorprofilepaymentpreference.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				vppp.ID = value.String
			}
		case vendorprofilepaymentpreference.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				vppp.MappingID = value.String
			}
		case vendorprofilepaymentpreference.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vppp.CreatedAt = value.Time
			}
		case vendorprofilepaymentpreference.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vppp.UpdatedAt = value.Time
			}
		case vendorprofilepaymentpreference.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				vppp.CreatedBy = value.String
			}
		case vendorprofilepaymentpreference.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				vppp.UpdatedBy = value.String
			}
		case vendorprofilepaymentpreference.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				vppp.DeletedAt = value.Time
			}
		case vendorprofilepaymentpreference.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				vppp.DeletedBy = value.String
			}
		case vendorprofilepaymentpreference.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &vppp.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case vendorprofilepaymentpreference.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				vppp.OwnerID = value.String
			}
		case vendorprofilepaymentpreference.FieldVendorProfileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vendor_profile_id", values[i])
			} else if value.Valid {
				vppp.VendorProfileID = value.String
			}
		case vendorprofilepaymentpreference.FieldPreferred:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field preferred", values[i])
			} else if value.Valid {
				vppp.Preferred = value.Bool
			}
		case vendorprofilepaymentpreference.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				vppp.Method = enums.PaymentMethod(value.String)
			}
		default:
			vppp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VendorProfilePaymentPreference.
// This includes values selected through modifiers, order, etc.
func (vppp *VendorProfilePaymentPreference) Value(name string) (ent.Value, error) {
	return vppp.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the VendorProfilePaymentPreference entity.
func (vppp *VendorProfilePaymentPreference) QueryOwner() *OrganizationQuery {
	return NewVendorProfilePaymentPreferenceClient(vppp.config).QueryOwner(vppp)
}

// QueryVendorProfile queries the "vendor_profile" edge of the VendorProfilePaymentPreference entity.
func (vppp *VendorProfilePaymentPreference) QueryVendorProfile() *VendorProfileQuery {
	return NewVendorProfilePaymentPreferenceClient(vppp.config).QueryVendorProfile(vppp)
}

// Update returns a builder for updating this VendorProfilePaymentPreference.
// Note that you need to call VendorProfilePaymentPreference.Unwrap() before calling this method if this VendorProfilePaymentPreference
// was returned from a transaction, and the transaction was committed or rolled back.
func (vppp *VendorProfilePaymentPreference) Update() *VendorProfilePaymentPreferenceUpdateOne {
	return NewVendorProfilePaymentPreferenceClient(vppp.config).UpdateOne(vppp)
}

// Unwrap unwraps the VendorProfilePaymentPreference entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vppp *VendorProfilePaymentPreference) Unwrap() *VendorProfilePaymentPreference {
	_tx, ok := vppp.config.driver.(*txDriver)
	if !ok {
		panic("generated: VendorProfilePaymentPreference is not a transactional entity")
	}
	vppp.config.driver = _tx.drv
	return vppp
}

// String implements the fmt.Stringer.
func (vppp *VendorProfilePaymentPreference) String() string {
	var builder strings.Builder
	builder.WriteString("VendorProfilePaymentPreference(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vppp.ID))
	builder.WriteString("mapping_id=")
	builder.WriteString(vppp.MappingID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(vppp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(vppp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(vppp.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(vppp.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(vppp.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(vppp.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", vppp.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(vppp.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("vendor_profile_id=")
	builder.WriteString(vppp.VendorProfileID)
	builder.WriteString(", ")
	builder.WriteString("preferred=")
	builder.WriteString(fmt.Sprintf("%v", vppp.Preferred))
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(fmt.Sprintf("%v", vppp.Method))
	builder.WriteByte(')')
	return builder.String()
}

// VendorProfilePaymentPreferences is a parsable slice of VendorProfilePaymentPreference.
type VendorProfilePaymentPreferences []*VendorProfilePaymentPreference
