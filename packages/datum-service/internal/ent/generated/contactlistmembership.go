// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contact"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contactlist"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contactlistmembership"
)

// ContactListMembership is the model entity for the ContactListMembership schema.
type ContactListMembership struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *string `json:"deleted_by,omitempty"`
	// ContactListID holds the value of the "contact_list_id" field.
	ContactListID string `json:"contact_list_id,omitempty"`
	// ContactID holds the value of the "contact_id" field.
	ContactID string `json:"contact_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContactListMembershipQuery when eager-loading is set.
	Edges        ContactListMembershipEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ContactListMembershipEdges holds the relations/edges for other nodes in the graph.
type ContactListMembershipEdges struct {
	// ContactList holds the value of the contact_list edge.
	ContactList *ContactList `json:"contact_list,omitempty"`
	// Contact holds the value of the contact edge.
	Contact *Contact `json:"contact,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedEvents map[string][]*Event
}

// ContactListOrErr returns the ContactList value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContactListMembershipEdges) ContactListOrErr() (*ContactList, error) {
	if e.ContactList != nil {
		return e.ContactList, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: contactlist.Label}
	}
	return nil, &NotLoadedError{edge: "contact_list"}
}

// ContactOrErr returns the Contact value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContactListMembershipEdges) ContactOrErr() (*Contact, error) {
	if e.Contact != nil {
		return e.Contact, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: contact.Label}
	}
	return nil, &NotLoadedError{edge: "contact"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e ContactListMembershipEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[2] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ContactListMembership) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case contactlistmembership.FieldID, contactlistmembership.FieldCreatedBy, contactlistmembership.FieldUpdatedBy, contactlistmembership.FieldMappingID, contactlistmembership.FieldDeletedBy, contactlistmembership.FieldContactListID, contactlistmembership.FieldContactID:
			values[i] = new(sql.NullString)
		case contactlistmembership.FieldCreatedAt, contactlistmembership.FieldUpdatedAt, contactlistmembership.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ContactListMembership fields.
func (clm *ContactListMembership) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contactlistmembership.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				clm.ID = value.String
			}
		case contactlistmembership.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				clm.CreatedAt = value.Time
			}
		case contactlistmembership.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				clm.UpdatedAt = value.Time
			}
		case contactlistmembership.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				clm.CreatedBy = value.String
			}
		case contactlistmembership.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				clm.UpdatedBy = value.String
			}
		case contactlistmembership.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				clm.MappingID = value.String
			}
		case contactlistmembership.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				clm.DeletedAt = new(time.Time)
				*clm.DeletedAt = value.Time
			}
		case contactlistmembership.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				clm.DeletedBy = new(string)
				*clm.DeletedBy = value.String
			}
		case contactlistmembership.FieldContactListID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_list_id", values[i])
			} else if value.Valid {
				clm.ContactListID = value.String
			}
		case contactlistmembership.FieldContactID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_id", values[i])
			} else if value.Valid {
				clm.ContactID = value.String
			}
		default:
			clm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ContactListMembership.
// This includes values selected through modifiers, order, etc.
func (clm *ContactListMembership) Value(name string) (ent.Value, error) {
	return clm.selectValues.Get(name)
}

// QueryContactList queries the "contact_list" edge of the ContactListMembership entity.
func (clm *ContactListMembership) QueryContactList() *ContactListQuery {
	return NewContactListMembershipClient(clm.config).QueryContactList(clm)
}

// QueryContact queries the "contact" edge of the ContactListMembership entity.
func (clm *ContactListMembership) QueryContact() *ContactQuery {
	return NewContactListMembershipClient(clm.config).QueryContact(clm)
}

// QueryEvents queries the "events" edge of the ContactListMembership entity.
func (clm *ContactListMembership) QueryEvents() *EventQuery {
	return NewContactListMembershipClient(clm.config).QueryEvents(clm)
}

// Update returns a builder for updating this ContactListMembership.
// Note that you need to call ContactListMembership.Unwrap() before calling this method if this ContactListMembership
// was returned from a transaction, and the transaction was committed or rolled back.
func (clm *ContactListMembership) Update() *ContactListMembershipUpdateOne {
	return NewContactListMembershipClient(clm.config).UpdateOne(clm)
}

// Unwrap unwraps the ContactListMembership entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (clm *ContactListMembership) Unwrap() *ContactListMembership {
	_tx, ok := clm.config.driver.(*txDriver)
	if !ok {
		panic("generated: ContactListMembership is not a transactional entity")
	}
	clm.config.driver = _tx.drv
	return clm
}

// String implements the fmt.Stringer.
func (clm *ContactListMembership) String() string {
	var builder strings.Builder
	builder.WriteString("ContactListMembership(")
	builder.WriteString(fmt.Sprintf("id=%v, ", clm.ID))
	builder.WriteString("created_at=")
	builder.WriteString(clm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(clm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(clm.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(clm.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(clm.MappingID)
	builder.WriteString(", ")
	if v := clm.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := clm.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("contact_list_id=")
	builder.WriteString(clm.ContactListID)
	builder.WriteString(", ")
	builder.WriteString("contact_id=")
	builder.WriteString(clm.ContactID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedEvents returns the Events named value or an error if the edge was not
// loaded in eager-loading with this name.
func (clm *ContactListMembership) NamedEvents(name string) ([]*Event, error) {
	if clm.Edges.namedEvents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := clm.Edges.namedEvents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (clm *ContactListMembership) appendNamedEvents(name string, edges ...*Event) {
	if clm.Edges.namedEvents == nil {
		clm.Edges.namedEvents = make(map[string][]*Event)
	}
	if len(edges) == 0 {
		clm.Edges.namedEvents[name] = []*Event{}
	} else {
		clm.Edges.namedEvents[name] = append(clm.Edges.namedEvents[name], edges...)
	}
}

// ContactListMemberships is a parsable slice of ContactListMembership.
type ContactListMemberships []*ContactListMembership
