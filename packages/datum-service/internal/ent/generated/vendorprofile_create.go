// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/organization"
	"github.com/datum-cloud/datum-os/internal/ent/generated/postaladdress"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendor"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofile"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilepostaladdress"
)

// VendorProfileCreate is the builder for creating a VendorProfile entity.
type VendorProfileCreate struct {
	config
	mutation *VendorProfileMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (vpc *VendorProfileCreate) SetCreatedAt(t time.Time) *VendorProfileCreate {
	vpc.mutation.SetCreatedAt(t)
	return vpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vpc *VendorProfileCreate) SetNillableCreatedAt(t *time.Time) *VendorProfileCreate {
	if t != nil {
		vpc.SetCreatedAt(*t)
	}
	return vpc
}

// SetUpdatedAt sets the "updated_at" field.
func (vpc *VendorProfileCreate) SetUpdatedAt(t time.Time) *VendorProfileCreate {
	vpc.mutation.SetUpdatedAt(t)
	return vpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vpc *VendorProfileCreate) SetNillableUpdatedAt(t *time.Time) *VendorProfileCreate {
	if t != nil {
		vpc.SetUpdatedAt(*t)
	}
	return vpc
}

// SetCreatedBy sets the "created_by" field.
func (vpc *VendorProfileCreate) SetCreatedBy(s string) *VendorProfileCreate {
	vpc.mutation.SetCreatedBy(s)
	return vpc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vpc *VendorProfileCreate) SetNillableCreatedBy(s *string) *VendorProfileCreate {
	if s != nil {
		vpc.SetCreatedBy(*s)
	}
	return vpc
}

// SetUpdatedBy sets the "updated_by" field.
func (vpc *VendorProfileCreate) SetUpdatedBy(s string) *VendorProfileCreate {
	vpc.mutation.SetUpdatedBy(s)
	return vpc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vpc *VendorProfileCreate) SetNillableUpdatedBy(s *string) *VendorProfileCreate {
	if s != nil {
		vpc.SetUpdatedBy(*s)
	}
	return vpc
}

// SetDeletedAt sets the "deleted_at" field.
func (vpc *VendorProfileCreate) SetDeletedAt(t time.Time) *VendorProfileCreate {
	vpc.mutation.SetDeletedAt(t)
	return vpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vpc *VendorProfileCreate) SetNillableDeletedAt(t *time.Time) *VendorProfileCreate {
	if t != nil {
		vpc.SetDeletedAt(*t)
	}
	return vpc
}

// SetDeletedBy sets the "deleted_by" field.
func (vpc *VendorProfileCreate) SetDeletedBy(s string) *VendorProfileCreate {
	vpc.mutation.SetDeletedBy(s)
	return vpc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vpc *VendorProfileCreate) SetNillableDeletedBy(s *string) *VendorProfileCreate {
	if s != nil {
		vpc.SetDeletedBy(*s)
	}
	return vpc
}

// SetMappingID sets the "mapping_id" field.
func (vpc *VendorProfileCreate) SetMappingID(s string) *VendorProfileCreate {
	vpc.mutation.SetMappingID(s)
	return vpc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (vpc *VendorProfileCreate) SetNillableMappingID(s *string) *VendorProfileCreate {
	if s != nil {
		vpc.SetMappingID(*s)
	}
	return vpc
}

// SetTags sets the "tags" field.
func (vpc *VendorProfileCreate) SetTags(s []string) *VendorProfileCreate {
	vpc.mutation.SetTags(s)
	return vpc
}

// SetOwnerID sets the "owner_id" field.
func (vpc *VendorProfileCreate) SetOwnerID(s string) *VendorProfileCreate {
	vpc.mutation.SetOwnerID(s)
	return vpc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (vpc *VendorProfileCreate) SetNillableOwnerID(s *string) *VendorProfileCreate {
	if s != nil {
		vpc.SetOwnerID(*s)
	}
	return vpc
}

// SetVendorID sets the "vendor_id" field.
func (vpc *VendorProfileCreate) SetVendorID(s string) *VendorProfileCreate {
	vpc.mutation.SetVendorID(s)
	return vpc
}

// SetNillableVendorID sets the "vendor_id" field if the given value is not nil.
func (vpc *VendorProfileCreate) SetNillableVendorID(s *string) *VendorProfileCreate {
	if s != nil {
		vpc.SetVendorID(*s)
	}
	return vpc
}

// SetName sets the "name" field.
func (vpc *VendorProfileCreate) SetName(s string) *VendorProfileCreate {
	vpc.mutation.SetName(s)
	return vpc
}

// SetDbaName sets the "dba_name" field.
func (vpc *VendorProfileCreate) SetDbaName(s string) *VendorProfileCreate {
	vpc.mutation.SetDbaName(s)
	return vpc
}

// SetNillableDbaName sets the "dba_name" field if the given value is not nil.
func (vpc *VendorProfileCreate) SetNillableDbaName(s *string) *VendorProfileCreate {
	if s != nil {
		vpc.SetDbaName(*s)
	}
	return vpc
}

// SetDescription sets the "description" field.
func (vpc *VendorProfileCreate) SetDescription(s string) *VendorProfileCreate {
	vpc.mutation.SetDescription(s)
	return vpc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vpc *VendorProfileCreate) SetNillableDescription(s *string) *VendorProfileCreate {
	if s != nil {
		vpc.SetDescription(*s)
	}
	return vpc
}

// SetWebsiteURI sets the "website_uri" field.
func (vpc *VendorProfileCreate) SetWebsiteURI(s string) *VendorProfileCreate {
	vpc.mutation.SetWebsiteURI(s)
	return vpc
}

// SetNillableWebsiteURI sets the "website_uri" field if the given value is not nil.
func (vpc *VendorProfileCreate) SetNillableWebsiteURI(s *string) *VendorProfileCreate {
	if s != nil {
		vpc.SetWebsiteURI(*s)
	}
	return vpc
}

// SetID sets the "id" field.
func (vpc *VendorProfileCreate) SetID(s string) *VendorProfileCreate {
	vpc.mutation.SetID(s)
	return vpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vpc *VendorProfileCreate) SetNillableID(s *string) *VendorProfileCreate {
	if s != nil {
		vpc.SetID(*s)
	}
	return vpc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (vpc *VendorProfileCreate) SetOwner(o *Organization) *VendorProfileCreate {
	return vpc.SetOwnerID(o.ID)
}

// AddPostalAddressIDs adds the "postal_addresses" edge to the PostalAddress entity by IDs.
func (vpc *VendorProfileCreate) AddPostalAddressIDs(ids ...string) *VendorProfileCreate {
	vpc.mutation.AddPostalAddressIDs(ids...)
	return vpc
}

// AddPostalAddresses adds the "postal_addresses" edges to the PostalAddress entity.
func (vpc *VendorProfileCreate) AddPostalAddresses(p ...*PostalAddress) *VendorProfileCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vpc.AddPostalAddressIDs(ids...)
}

// SetVendor sets the "vendor" edge to the Vendor entity.
func (vpc *VendorProfileCreate) SetVendor(v *Vendor) *VendorProfileCreate {
	return vpc.SetVendorID(v.ID)
}

// AddVendorProfilePostalAddressIDs adds the "vendor_profile_postal_addresses" edge to the VendorProfilePostalAddress entity by IDs.
func (vpc *VendorProfileCreate) AddVendorProfilePostalAddressIDs(ids ...string) *VendorProfileCreate {
	vpc.mutation.AddVendorProfilePostalAddressIDs(ids...)
	return vpc
}

// AddVendorProfilePostalAddresses adds the "vendor_profile_postal_addresses" edges to the VendorProfilePostalAddress entity.
func (vpc *VendorProfileCreate) AddVendorProfilePostalAddresses(v ...*VendorProfilePostalAddress) *VendorProfileCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vpc.AddVendorProfilePostalAddressIDs(ids...)
}

// Mutation returns the VendorProfileMutation object of the builder.
func (vpc *VendorProfileCreate) Mutation() *VendorProfileMutation {
	return vpc.mutation
}

// Save creates the VendorProfile in the database.
func (vpc *VendorProfileCreate) Save(ctx context.Context) (*VendorProfile, error) {
	if err := vpc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, vpc.sqlSave, vpc.mutation, vpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vpc *VendorProfileCreate) SaveX(ctx context.Context) *VendorProfile {
	v, err := vpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vpc *VendorProfileCreate) Exec(ctx context.Context) error {
	_, err := vpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpc *VendorProfileCreate) ExecX(ctx context.Context) {
	if err := vpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vpc *VendorProfileCreate) defaults() error {
	if _, ok := vpc.mutation.CreatedAt(); !ok {
		if vendorprofile.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized vendorprofile.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := vendorprofile.DefaultCreatedAt()
		vpc.mutation.SetCreatedAt(v)
	}
	if _, ok := vpc.mutation.UpdatedAt(); !ok {
		if vendorprofile.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized vendorprofile.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := vendorprofile.DefaultUpdatedAt()
		vpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vpc.mutation.MappingID(); !ok {
		if vendorprofile.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized vendorprofile.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := vendorprofile.DefaultMappingID()
		vpc.mutation.SetMappingID(v)
	}
	if _, ok := vpc.mutation.Tags(); !ok {
		v := vendorprofile.DefaultTags
		vpc.mutation.SetTags(v)
	}
	if _, ok := vpc.mutation.ID(); !ok {
		if vendorprofile.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized vendorprofile.DefaultID (forgotten import generated/runtime?)")
		}
		v := vendorprofile.DefaultID()
		vpc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vpc *VendorProfileCreate) check() error {
	if _, ok := vpc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "VendorProfile.mapping_id"`)}
	}
	if v, ok := vpc.mutation.OwnerID(); ok {
		if err := vendorprofile.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "VendorProfile.owner_id": %w`, err)}
		}
	}
	if v, ok := vpc.mutation.VendorID(); ok {
		if err := vendorprofile.VendorIDValidator(v); err != nil {
			return &ValidationError{Name: "vendor_id", err: fmt.Errorf(`generated: validator failed for field "VendorProfile.vendor_id": %w`, err)}
		}
	}
	if _, ok := vpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "VendorProfile.name"`)}
	}
	if v, ok := vpc.mutation.Name(); ok {
		if err := vendorprofile.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "VendorProfile.name": %w`, err)}
		}
	}
	if v, ok := vpc.mutation.DbaName(); ok {
		if err := vendorprofile.DbaNameValidator(v); err != nil {
			return &ValidationError{Name: "dba_name", err: fmt.Errorf(`generated: validator failed for field "VendorProfile.dba_name": %w`, err)}
		}
	}
	if v, ok := vpc.mutation.WebsiteURI(); ok {
		if err := vendorprofile.WebsiteURIValidator(v); err != nil {
			return &ValidationError{Name: "website_uri", err: fmt.Errorf(`generated: validator failed for field "VendorProfile.website_uri": %w`, err)}
		}
	}
	return nil
}

func (vpc *VendorProfileCreate) sqlSave(ctx context.Context) (*VendorProfile, error) {
	if err := vpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected VendorProfile.ID type: %T", _spec.ID.Value)
		}
	}
	vpc.mutation.id = &_node.ID
	vpc.mutation.done = true
	return _node, nil
}

func (vpc *VendorProfileCreate) createSpec() (*VendorProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &VendorProfile{config: vpc.config}
		_spec = sqlgraph.NewCreateSpec(vendorprofile.Table, sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString))
	)
	_spec.Schema = vpc.schemaConfig.VendorProfile
	if id, ok := vpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vpc.mutation.CreatedAt(); ok {
		_spec.SetField(vendorprofile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vpc.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vpc.mutation.CreatedBy(); ok {
		_spec.SetField(vendorprofile.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := vpc.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofile.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := vpc.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofile.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := vpc.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofile.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := vpc.mutation.MappingID(); ok {
		_spec.SetField(vendorprofile.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := vpc.mutation.Tags(); ok {
		_spec.SetField(vendorprofile.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := vpc.mutation.Name(); ok {
		_spec.SetField(vendorprofile.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := vpc.mutation.DbaName(); ok {
		_spec.SetField(vendorprofile.FieldDbaName, field.TypeString, value)
		_node.DbaName = value
	}
	if value, ok := vpc.mutation.Description(); ok {
		_spec.SetField(vendorprofile.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := vpc.mutation.WebsiteURI(); ok {
		_spec.SetField(vendorprofile.FieldWebsiteURI, field.TypeString, value)
		_node.WebsiteURI = value
	}
	if nodes := vpc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorprofile.OwnerTable,
			Columns: []string{vendorprofile.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpc.schemaConfig.VendorProfile
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vpc.mutation.PostalAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vendorprofile.PostalAddressesTable,
			Columns: vendorprofile.PostalAddressesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpc.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VendorProfilePostalAddressCreate{config: vpc.config, mutation: newVendorProfilePostalAddressMutation(vpc.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vpc.mutation.VendorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vendorprofile.VendorTable,
			Columns: []string{vendorprofile.VendorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendor.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpc.schemaConfig.VendorProfile
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VendorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vpc.mutation.VendorProfilePostalAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vendorprofile.VendorProfilePostalAddressesTable,
			Columns: []string{vendorprofile.VendorProfilePostalAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilepostaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpc.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VendorProfileCreateBulk is the builder for creating many VendorProfile entities in bulk.
type VendorProfileCreateBulk struct {
	config
	err      error
	builders []*VendorProfileCreate
}

// Save creates the VendorProfile entities in the database.
func (vpcb *VendorProfileCreateBulk) Save(ctx context.Context) ([]*VendorProfile, error) {
	if vpcb.err != nil {
		return nil, vpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vpcb.builders))
	nodes := make([]*VendorProfile, len(vpcb.builders))
	mutators := make([]Mutator, len(vpcb.builders))
	for i := range vpcb.builders {
		func(i int, root context.Context) {
			builder := vpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VendorProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vpcb *VendorProfileCreateBulk) SaveX(ctx context.Context) []*VendorProfile {
	v, err := vpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vpcb *VendorProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := vpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpcb *VendorProfileCreateBulk) ExecX(ctx context.Context) {
	if err := vpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
