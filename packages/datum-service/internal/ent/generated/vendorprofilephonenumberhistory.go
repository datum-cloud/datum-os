// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilephonenumberhistory"
	"github.com/datum-cloud/datum-os/pkg/enthistory"
)

// VendorProfilePhoneNumberHistory is the model entity for the VendorProfilePhoneNumberHistory schema.
type VendorProfilePhoneNumberHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation enthistory.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// VendorProfileID holds the value of the "vendor_profile_id" field.
	VendorProfileID string `json:"vendor_profile_id,omitempty"`
	// PhoneNumberID holds the value of the "phone_number_id" field.
	PhoneNumberID string `json:"phone_number_id,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VendorProfilePhoneNumberHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vendorprofilephonenumberhistory.FieldOperation:
			values[i] = new(enthistory.OpType)
		case vendorprofilephonenumberhistory.FieldID, vendorprofilephonenumberhistory.FieldRef, vendorprofilephonenumberhistory.FieldCreatedBy, vendorprofilephonenumberhistory.FieldUpdatedBy, vendorprofilephonenumberhistory.FieldMappingID, vendorprofilephonenumberhistory.FieldDeletedBy, vendorprofilephonenumberhistory.FieldVendorProfileID, vendorprofilephonenumberhistory.FieldPhoneNumberID:
			values[i] = new(sql.NullString)
		case vendorprofilephonenumberhistory.FieldHistoryTime, vendorprofilephonenumberhistory.FieldCreatedAt, vendorprofilephonenumberhistory.FieldUpdatedAt, vendorprofilephonenumberhistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VendorProfilePhoneNumberHistory fields.
func (vppnh *VendorProfilePhoneNumberHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vendorprofilephonenumberhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				vppnh.ID = value.String
			}
		case vendorprofilephonenumberhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				vppnh.HistoryTime = value.Time
			}
		case vendorprofilephonenumberhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				vppnh.Ref = value.String
			}
		case vendorprofilephonenumberhistory.FieldOperation:
			if value, ok := values[i].(*enthistory.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				vppnh.Operation = *value
			}
		case vendorprofilephonenumberhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vppnh.CreatedAt = value.Time
			}
		case vendorprofilephonenumberhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vppnh.UpdatedAt = value.Time
			}
		case vendorprofilephonenumberhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				vppnh.CreatedBy = value.String
			}
		case vendorprofilephonenumberhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				vppnh.UpdatedBy = value.String
			}
		case vendorprofilephonenumberhistory.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				vppnh.MappingID = value.String
			}
		case vendorprofilephonenumberhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				vppnh.DeletedAt = value.Time
			}
		case vendorprofilephonenumberhistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				vppnh.DeletedBy = value.String
			}
		case vendorprofilephonenumberhistory.FieldVendorProfileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vendor_profile_id", values[i])
			} else if value.Valid {
				vppnh.VendorProfileID = value.String
			}
		case vendorprofilephonenumberhistory.FieldPhoneNumberID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number_id", values[i])
			} else if value.Valid {
				vppnh.PhoneNumberID = value.String
			}
		default:
			vppnh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VendorProfilePhoneNumberHistory.
// This includes values selected through modifiers, order, etc.
func (vppnh *VendorProfilePhoneNumberHistory) Value(name string) (ent.Value, error) {
	return vppnh.selectValues.Get(name)
}

// Update returns a builder for updating this VendorProfilePhoneNumberHistory.
// Note that you need to call VendorProfilePhoneNumberHistory.Unwrap() before calling this method if this VendorProfilePhoneNumberHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (vppnh *VendorProfilePhoneNumberHistory) Update() *VendorProfilePhoneNumberHistoryUpdateOne {
	return NewVendorProfilePhoneNumberHistoryClient(vppnh.config).UpdateOne(vppnh)
}

// Unwrap unwraps the VendorProfilePhoneNumberHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vppnh *VendorProfilePhoneNumberHistory) Unwrap() *VendorProfilePhoneNumberHistory {
	_tx, ok := vppnh.config.driver.(*txDriver)
	if !ok {
		panic("generated: VendorProfilePhoneNumberHistory is not a transactional entity")
	}
	vppnh.config.driver = _tx.drv
	return vppnh
}

// String implements the fmt.Stringer.
func (vppnh *VendorProfilePhoneNumberHistory) String() string {
	var builder strings.Builder
	builder.WriteString("VendorProfilePhoneNumberHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vppnh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(vppnh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(vppnh.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", vppnh.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(vppnh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(vppnh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(vppnh.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(vppnh.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(vppnh.MappingID)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(vppnh.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(vppnh.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("vendor_profile_id=")
	builder.WriteString(vppnh.VendorProfileID)
	builder.WriteString(", ")
	builder.WriteString("phone_number_id=")
	builder.WriteString(vppnh.PhoneNumberID)
	builder.WriteByte(')')
	return builder.String()
}

// VendorProfilePhoneNumberHistories is a parsable slice of VendorProfilePhoneNumberHistory.
type VendorProfilePhoneNumberHistories []*VendorProfilePhoneNumberHistory
