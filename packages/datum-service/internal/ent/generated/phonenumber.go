// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datum-cloud/datum-os/internal/ent/generated/organization"
	"github.com/datum-cloud/datum-os/internal/ent/generated/phonenumber"
	"github.com/datum-cloud/datum-os/pkg/enums"
)

// PhoneNumber is the model entity for the PhoneNumber schema.
type PhoneNumber struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *string `json:"deleted_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// The organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// The type of phone number. E.g. 'E164' or 'SHORT_CODE'
	Kind enums.PhoneNumberType `json:"kind,omitempty"`
	// The BCP-47 region code of the phone number. E.g. 'US' or 'CA'
	RegionCode string `json:"region_code,omitempty"`
	// The short code of the phone number. E.g. '611'
	ShortCode string `json:"short_code,omitempty"`
	// The phone number. E.g. '+15552220123'
	Number string `json:"number,omitempty"`
	// The extension of the phone number. E.g. '123'
	Extension string `json:"extension,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PhoneNumberQuery when eager-loading is set.
	Edges        PhoneNumberEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PhoneNumberEdges holds the relations/edges for other nodes in the graph.
type PhoneNumberEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Profile holds the value of the profile edge.
	Profile []*VendorProfile `json:"profile,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// VendorProfilePhoneNumbers holds the value of the vendor_profile_phone_numbers edge.
	VendorProfilePhoneNumbers []*VendorProfilePhoneNumber `json:"vendor_profile_phone_numbers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedProfile                   map[string][]*VendorProfile
	namedEvents                    map[string][]*Event
	namedVendorProfilePhoneNumbers map[string][]*VendorProfilePhoneNumber
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PhoneNumberEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading.
func (e PhoneNumberEdges) ProfileOrErr() ([]*VendorProfile, error) {
	if e.loadedTypes[1] {
		return e.Profile, nil
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e PhoneNumberEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[2] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// VendorProfilePhoneNumbersOrErr returns the VendorProfilePhoneNumbers value or an error if the edge
// was not loaded in eager-loading.
func (e PhoneNumberEdges) VendorProfilePhoneNumbersOrErr() ([]*VendorProfilePhoneNumber, error) {
	if e.loadedTypes[3] {
		return e.VendorProfilePhoneNumbers, nil
	}
	return nil, &NotLoadedError{edge: "vendor_profile_phone_numbers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PhoneNumber) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case phonenumber.FieldTags:
			values[i] = new([]byte)
		case phonenumber.FieldID, phonenumber.FieldCreatedBy, phonenumber.FieldUpdatedBy, phonenumber.FieldDeletedBy, phonenumber.FieldMappingID, phonenumber.FieldOwnerID, phonenumber.FieldKind, phonenumber.FieldRegionCode, phonenumber.FieldShortCode, phonenumber.FieldNumber, phonenumber.FieldExtension:
			values[i] = new(sql.NullString)
		case phonenumber.FieldCreatedAt, phonenumber.FieldUpdatedAt, phonenumber.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PhoneNumber fields.
func (pn *PhoneNumber) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case phonenumber.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pn.ID = value.String
			}
		case phonenumber.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pn.CreatedAt = value.Time
			}
		case phonenumber.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pn.UpdatedAt = value.Time
			}
		case phonenumber.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pn.CreatedBy = value.String
			}
		case phonenumber.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pn.UpdatedBy = value.String
			}
		case phonenumber.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pn.DeletedAt = new(time.Time)
				*pn.DeletedAt = value.Time
			}
		case phonenumber.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				pn.DeletedBy = new(string)
				*pn.DeletedBy = value.String
			}
		case phonenumber.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				pn.MappingID = value.String
			}
		case phonenumber.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pn.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case phonenumber.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				pn.OwnerID = value.String
			}
		case phonenumber.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				pn.Kind = enums.PhoneNumberType(value.String)
			}
		case phonenumber.FieldRegionCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region_code", values[i])
			} else if value.Valid {
				pn.RegionCode = value.String
			}
		case phonenumber.FieldShortCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short_code", values[i])
			} else if value.Valid {
				pn.ShortCode = value.String
			}
		case phonenumber.FieldNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				pn.Number = value.String
			}
		case phonenumber.FieldExtension:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extension", values[i])
			} else if value.Valid {
				pn.Extension = value.String
			}
		default:
			pn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PhoneNumber.
// This includes values selected through modifiers, order, etc.
func (pn *PhoneNumber) Value(name string) (ent.Value, error) {
	return pn.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the PhoneNumber entity.
func (pn *PhoneNumber) QueryOwner() *OrganizationQuery {
	return NewPhoneNumberClient(pn.config).QueryOwner(pn)
}

// QueryProfile queries the "profile" edge of the PhoneNumber entity.
func (pn *PhoneNumber) QueryProfile() *VendorProfileQuery {
	return NewPhoneNumberClient(pn.config).QueryProfile(pn)
}

// QueryEvents queries the "events" edge of the PhoneNumber entity.
func (pn *PhoneNumber) QueryEvents() *EventQuery {
	return NewPhoneNumberClient(pn.config).QueryEvents(pn)
}

// QueryVendorProfilePhoneNumbers queries the "vendor_profile_phone_numbers" edge of the PhoneNumber entity.
func (pn *PhoneNumber) QueryVendorProfilePhoneNumbers() *VendorProfilePhoneNumberQuery {
	return NewPhoneNumberClient(pn.config).QueryVendorProfilePhoneNumbers(pn)
}

// Update returns a builder for updating this PhoneNumber.
// Note that you need to call PhoneNumber.Unwrap() before calling this method if this PhoneNumber
// was returned from a transaction, and the transaction was committed or rolled back.
func (pn *PhoneNumber) Update() *PhoneNumberUpdateOne {
	return NewPhoneNumberClient(pn.config).UpdateOne(pn)
}

// Unwrap unwraps the PhoneNumber entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pn *PhoneNumber) Unwrap() *PhoneNumber {
	_tx, ok := pn.config.driver.(*txDriver)
	if !ok {
		panic("generated: PhoneNumber is not a transactional entity")
	}
	pn.config.driver = _tx.drv
	return pn
}

// String implements the fmt.Stringer.
func (pn *PhoneNumber) String() string {
	var builder strings.Builder
	builder.WriteString("PhoneNumber(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pn.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pn.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pn.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(pn.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(pn.UpdatedBy)
	builder.WriteString(", ")
	if v := pn.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pn.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(pn.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", pn.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(pn.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", pn.Kind))
	builder.WriteString(", ")
	builder.WriteString("region_code=")
	builder.WriteString(pn.RegionCode)
	builder.WriteString(", ")
	builder.WriteString("short_code=")
	builder.WriteString(pn.ShortCode)
	builder.WriteString(", ")
	builder.WriteString("number=")
	builder.WriteString(pn.Number)
	builder.WriteString(", ")
	builder.WriteString("extension=")
	builder.WriteString(pn.Extension)
	builder.WriteByte(')')
	return builder.String()
}

// NamedProfile returns the Profile named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pn *PhoneNumber) NamedProfile(name string) ([]*VendorProfile, error) {
	if pn.Edges.namedProfile == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pn.Edges.namedProfile[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pn *PhoneNumber) appendNamedProfile(name string, edges ...*VendorProfile) {
	if pn.Edges.namedProfile == nil {
		pn.Edges.namedProfile = make(map[string][]*VendorProfile)
	}
	if len(edges) == 0 {
		pn.Edges.namedProfile[name] = []*VendorProfile{}
	} else {
		pn.Edges.namedProfile[name] = append(pn.Edges.namedProfile[name], edges...)
	}
}

// NamedEvents returns the Events named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pn *PhoneNumber) NamedEvents(name string) ([]*Event, error) {
	if pn.Edges.namedEvents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pn.Edges.namedEvents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pn *PhoneNumber) appendNamedEvents(name string, edges ...*Event) {
	if pn.Edges.namedEvents == nil {
		pn.Edges.namedEvents = make(map[string][]*Event)
	}
	if len(edges) == 0 {
		pn.Edges.namedEvents[name] = []*Event{}
	} else {
		pn.Edges.namedEvents[name] = append(pn.Edges.namedEvents[name], edges...)
	}
}

// NamedVendorProfilePhoneNumbers returns the VendorProfilePhoneNumbers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pn *PhoneNumber) NamedVendorProfilePhoneNumbers(name string) ([]*VendorProfilePhoneNumber, error) {
	if pn.Edges.namedVendorProfilePhoneNumbers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pn.Edges.namedVendorProfilePhoneNumbers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pn *PhoneNumber) appendNamedVendorProfilePhoneNumbers(name string, edges ...*VendorProfilePhoneNumber) {
	if pn.Edges.namedVendorProfilePhoneNumbers == nil {
		pn.Edges.namedVendorProfilePhoneNumbers = make(map[string][]*VendorProfilePhoneNumber)
	}
	if len(edges) == 0 {
		pn.Edges.namedVendorProfilePhoneNumbers[name] = []*VendorProfilePhoneNumber{}
	} else {
		pn.Edges.namedVendorProfilePhoneNumbers[name] = append(pn.Edges.namedVendorProfilePhoneNumbers[name], edges...)
	}
}

// PhoneNumbers is a parsable slice of PhoneNumber.
type PhoneNumbers []*PhoneNumber
