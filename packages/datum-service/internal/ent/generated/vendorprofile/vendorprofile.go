// Code generated by ent, DO NOT EDIT.

package vendorprofile

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the vendorprofile type in the database.
	Label = "vendor_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldMappingID holds the string denoting the mapping_id field in the database.
	FieldMappingID = "mapping_id"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldVendorID holds the string denoting the vendor_id field in the database.
	FieldVendorID = "vendor_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDbaName holds the string denoting the dba_name field in the database.
	FieldDbaName = "dba_name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldWebsiteURI holds the string denoting the website_uri field in the database.
	FieldWebsiteURI = "website_uri"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgePostalAddresses holds the string denoting the postal_addresses edge name in mutations.
	EdgePostalAddresses = "postal_addresses"
	// EdgeVendor holds the string denoting the vendor edge name in mutations.
	EdgeVendor = "vendor"
	// EdgeVendorProfilePostalAddresses holds the string denoting the vendor_profile_postal_addresses edge name in mutations.
	EdgeVendorProfilePostalAddresses = "vendor_profile_postal_addresses"
	// Table holds the table name of the vendorprofile in the database.
	Table = "vendor_profiles"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "vendor_profiles"
	// OwnerInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OwnerInverseTable = "organizations"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// PostalAddressesTable is the table that holds the postal_addresses relation/edge. The primary key declared below.
	PostalAddressesTable = "vendor_profile_postal_addresses"
	// PostalAddressesInverseTable is the table name for the PostalAddress entity.
	// It exists in this package in order to avoid circular dependency with the "postaladdress" package.
	PostalAddressesInverseTable = "postal_addresses"
	// VendorTable is the table that holds the vendor relation/edge.
	VendorTable = "vendor_profiles"
	// VendorInverseTable is the table name for the Vendor entity.
	// It exists in this package in order to avoid circular dependency with the "vendor" package.
	VendorInverseTable = "vendors"
	// VendorColumn is the table column denoting the vendor relation/edge.
	VendorColumn = "vendor_id"
	// VendorProfilePostalAddressesTable is the table that holds the vendor_profile_postal_addresses relation/edge.
	VendorProfilePostalAddressesTable = "vendor_profile_postal_addresses"
	// VendorProfilePostalAddressesInverseTable is the table name for the VendorProfilePostalAddress entity.
	// It exists in this package in order to avoid circular dependency with the "vendorprofilepostaladdress" package.
	VendorProfilePostalAddressesInverseTable = "vendor_profile_postal_addresses"
	// VendorProfilePostalAddressesColumn is the table column denoting the vendor_profile_postal_addresses relation/edge.
	VendorProfilePostalAddressesColumn = "vendor_profile_id"
)

// Columns holds all SQL columns for vendorprofile fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldMappingID,
	FieldTags,
	FieldOwnerID,
	FieldVendorID,
	FieldName,
	FieldDbaName,
	FieldDescription,
	FieldWebsiteURI,
}

var (
	// PostalAddressesPrimaryKey and PostalAddressesColumn2 are the table columns denoting the
	// primary key for the postal_addresses relation (M2M).
	PostalAddressesPrimaryKey = []string{"vendor_profile_id", "postal_address_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/datum-cloud/datum-os/internal/ent/generated/runtime"
var (
	Hooks        [4]ent.Hook
	Interceptors [2]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultMappingID holds the default value on creation for the "mapping_id" field.
	DefaultMappingID func() string
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// OwnerIDValidator is a validator for the "owner_id" field. It is called by the builders before save.
	OwnerIDValidator func(string) error
	// VendorIDValidator is a validator for the "vendor_id" field. It is called by the builders before save.
	VendorIDValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DbaNameValidator is a validator for the "dba_name" field. It is called by the builders before save.
	DbaNameValidator func(string) error
	// WebsiteURIValidator is a validator for the "website_uri" field. It is called by the builders before save.
	WebsiteURIValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the VendorProfile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByMappingID orders the results by the mapping_id field.
func ByMappingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMappingID, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByVendorID orders the results by the vendor_id field.
func ByVendorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVendorID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDbaName orders the results by the dba_name field.
func ByDbaName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDbaName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByWebsiteURI orders the results by the website_uri field.
func ByWebsiteURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebsiteURI, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByPostalAddressesCount orders the results by postal_addresses count.
func ByPostalAddressesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPostalAddressesStep(), opts...)
	}
}

// ByPostalAddresses orders the results by postal_addresses terms.
func ByPostalAddresses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostalAddressesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVendorField orders the results by vendor field.
func ByVendorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVendorStep(), sql.OrderByField(field, opts...))
	}
}

// ByVendorProfilePostalAddressesCount orders the results by vendor_profile_postal_addresses count.
func ByVendorProfilePostalAddressesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVendorProfilePostalAddressesStep(), opts...)
	}
}

// ByVendorProfilePostalAddresses orders the results by vendor_profile_postal_addresses terms.
func ByVendorProfilePostalAddresses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVendorProfilePostalAddressesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newPostalAddressesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostalAddressesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, PostalAddressesTable, PostalAddressesPrimaryKey...),
	)
}
func newVendorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VendorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, VendorTable, VendorColumn),
	)
}
func newVendorProfilePostalAddressesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VendorProfilePostalAddressesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, VendorProfilePostalAddressesTable, VendorProfilePostalAddressesColumn),
	)
}
