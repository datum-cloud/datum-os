// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datum-cloud/datum-os/internal/ent/generated/organization"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendor"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofile"
	"github.com/datum-cloud/datum-os/pkg/enums"
)

// Vendor is the model entity for the Vendor schema.
type Vendor struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *string `json:"deleted_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// The organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// VendorType holds the value of the "vendor_type" field.
	VendorType enums.VendorType `json:"vendor_type,omitempty"`
	// OnboardingState holds the value of the "onboarding_state" field.
	OnboardingState enums.OnboardingState `json:"onboarding_state,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VendorQuery when eager-loading is set.
	Edges        VendorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VendorEdges holds the relations/edges for other nodes in the graph.
type VendorEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Profile holds the value of the profile edge.
	Profile *VendorProfile `json:"profile,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedEvents map[string][]*Event
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VendorEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VendorEdges) ProfileOrErr() (*VendorProfile, error) {
	if e.Profile != nil {
		return e.Profile, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: vendorprofile.Label}
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e VendorEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[2] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vendor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vendor.FieldTags:
			values[i] = new([]byte)
		case vendor.FieldID, vendor.FieldCreatedBy, vendor.FieldUpdatedBy, vendor.FieldDeletedBy, vendor.FieldMappingID, vendor.FieldOwnerID, vendor.FieldDisplayName, vendor.FieldVendorType, vendor.FieldOnboardingState:
			values[i] = new(sql.NullString)
		case vendor.FieldCreatedAt, vendor.FieldUpdatedAt, vendor.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vendor fields.
func (v *Vendor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vendor.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				v.ID = value.String
			}
		case vendor.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case vendor.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.Time
			}
		case vendor.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				v.CreatedBy = value.String
			}
		case vendor.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				v.UpdatedBy = value.String
			}
		case vendor.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				v.DeletedAt = new(time.Time)
				*v.DeletedAt = value.Time
			}
		case vendor.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				v.DeletedBy = new(string)
				*v.DeletedBy = value.String
			}
		case vendor.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				v.MappingID = value.String
			}
		case vendor.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &v.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case vendor.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				v.OwnerID = value.String
			}
		case vendor.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				v.DisplayName = value.String
			}
		case vendor.FieldVendorType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vendor_type", values[i])
			} else if value.Valid {
				v.VendorType = enums.VendorType(value.String)
			}
		case vendor.FieldOnboardingState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field onboarding_state", values[i])
			} else if value.Valid {
				v.OnboardingState = enums.OnboardingState(value.String)
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Vendor.
// This includes values selected through modifiers, order, etc.
func (v *Vendor) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Vendor entity.
func (v *Vendor) QueryOwner() *OrganizationQuery {
	return NewVendorClient(v.config).QueryOwner(v)
}

// QueryProfile queries the "profile" edge of the Vendor entity.
func (v *Vendor) QueryProfile() *VendorProfileQuery {
	return NewVendorClient(v.config).QueryProfile(v)
}

// QueryEvents queries the "events" edge of the Vendor entity.
func (v *Vendor) QueryEvents() *EventQuery {
	return NewVendorClient(v.config).QueryEvents(v)
}

// Update returns a builder for updating this Vendor.
// Note that you need to call Vendor.Unwrap() before calling this method if this Vendor
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vendor) Update() *VendorUpdateOne {
	return NewVendorClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Vendor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vendor) Unwrap() *Vendor {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("generated: Vendor is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vendor) String() string {
	var builder strings.Builder
	builder.WriteString("Vendor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(v.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(v.UpdatedBy)
	builder.WriteString(", ")
	if v := v.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := v.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(v.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", v.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(v.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(v.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("vendor_type=")
	builder.WriteString(fmt.Sprintf("%v", v.VendorType))
	builder.WriteString(", ")
	builder.WriteString("onboarding_state=")
	builder.WriteString(fmt.Sprintf("%v", v.OnboardingState))
	builder.WriteByte(')')
	return builder.String()
}

// NamedEvents returns the Events named value or an error if the edge was not
// loaded in eager-loading with this name.
func (v *Vendor) NamedEvents(name string) ([]*Event, error) {
	if v.Edges.namedEvents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := v.Edges.namedEvents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (v *Vendor) appendNamedEvents(name string, edges ...*Event) {
	if v.Edges.namedEvents == nil {
		v.Edges.namedEvents = make(map[string][]*Event)
	}
	if len(edges) == 0 {
		v.Edges.namedEvents[name] = []*Event{}
	} else {
		v.Edges.namedEvents[name] = append(v.Edges.namedEvents[name], edges...)
	}
}

// Vendors is a parsable slice of Vendor.
type Vendors []*Vendor
