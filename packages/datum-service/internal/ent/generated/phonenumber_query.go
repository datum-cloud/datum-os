// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/event"
	"github.com/datum-cloud/datum-os/internal/ent/generated/organization"
	"github.com/datum-cloud/datum-os/internal/ent/generated/phonenumber"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofile"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilephonenumber"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// PhoneNumberQuery is the builder for querying PhoneNumber entities.
type PhoneNumberQuery struct {
	config
	ctx                                *QueryContext
	order                              []phonenumber.OrderOption
	inters                             []Interceptor
	predicates                         []predicate.PhoneNumber
	withOwner                          *OrganizationQuery
	withProfile                        *VendorProfileQuery
	withEvents                         *EventQuery
	withVendorProfilePhoneNumbers      *VendorProfilePhoneNumberQuery
	modifiers                          []func(*sql.Selector)
	loadTotal                          []func(context.Context, []*PhoneNumber) error
	withNamedProfile                   map[string]*VendorProfileQuery
	withNamedEvents                    map[string]*EventQuery
	withNamedVendorProfilePhoneNumbers map[string]*VendorProfilePhoneNumberQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PhoneNumberQuery builder.
func (pnq *PhoneNumberQuery) Where(ps ...predicate.PhoneNumber) *PhoneNumberQuery {
	pnq.predicates = append(pnq.predicates, ps...)
	return pnq
}

// Limit the number of records to be returned by this query.
func (pnq *PhoneNumberQuery) Limit(limit int) *PhoneNumberQuery {
	pnq.ctx.Limit = &limit
	return pnq
}

// Offset to start from.
func (pnq *PhoneNumberQuery) Offset(offset int) *PhoneNumberQuery {
	pnq.ctx.Offset = &offset
	return pnq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pnq *PhoneNumberQuery) Unique(unique bool) *PhoneNumberQuery {
	pnq.ctx.Unique = &unique
	return pnq
}

// Order specifies how the records should be ordered.
func (pnq *PhoneNumberQuery) Order(o ...phonenumber.OrderOption) *PhoneNumberQuery {
	pnq.order = append(pnq.order, o...)
	return pnq
}

// QueryOwner chains the current query on the "owner" edge.
func (pnq *PhoneNumberQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: pnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(phonenumber.Table, phonenumber.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, phonenumber.OwnerTable, phonenumber.OwnerColumn),
		)
		schemaConfig := pnq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.PhoneNumber
		fromU = sqlgraph.SetNeighbors(pnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProfile chains the current query on the "profile" edge.
func (pnq *PhoneNumberQuery) QueryProfile() *VendorProfileQuery {
	query := (&VendorProfileClient{config: pnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(phonenumber.Table, phonenumber.FieldID, selector),
			sqlgraph.To(vendorprofile.Table, vendorprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, phonenumber.ProfileTable, phonenumber.ProfilePrimaryKey...),
		)
		schemaConfig := pnq.schemaConfig
		step.To.Schema = schemaConfig.VendorProfile
		step.Edge.Schema = schemaConfig.VendorProfilePhoneNumber
		fromU = sqlgraph.SetNeighbors(pnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvents chains the current query on the "events" edge.
func (pnq *PhoneNumberQuery) QueryEvents() *EventQuery {
	query := (&EventClient{config: pnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(phonenumber.Table, phonenumber.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, phonenumber.EventsTable, phonenumber.EventsColumn),
		)
		schemaConfig := pnq.schemaConfig
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.Event
		fromU = sqlgraph.SetNeighbors(pnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVendorProfilePhoneNumbers chains the current query on the "vendor_profile_phone_numbers" edge.
func (pnq *PhoneNumberQuery) QueryVendorProfilePhoneNumbers() *VendorProfilePhoneNumberQuery {
	query := (&VendorProfilePhoneNumberClient{config: pnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(phonenumber.Table, phonenumber.FieldID, selector),
			sqlgraph.To(vendorprofilephonenumber.Table, vendorprofilephonenumber.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, phonenumber.VendorProfilePhoneNumbersTable, phonenumber.VendorProfilePhoneNumbersColumn),
		)
		schemaConfig := pnq.schemaConfig
		step.To.Schema = schemaConfig.VendorProfilePhoneNumber
		step.Edge.Schema = schemaConfig.VendorProfilePhoneNumber
		fromU = sqlgraph.SetNeighbors(pnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PhoneNumber entity from the query.
// Returns a *NotFoundError when no PhoneNumber was found.
func (pnq *PhoneNumberQuery) First(ctx context.Context) (*PhoneNumber, error) {
	nodes, err := pnq.Limit(1).All(setContextOp(ctx, pnq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{phonenumber.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pnq *PhoneNumberQuery) FirstX(ctx context.Context) *PhoneNumber {
	node, err := pnq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PhoneNumber ID from the query.
// Returns a *NotFoundError when no PhoneNumber ID was found.
func (pnq *PhoneNumberQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = pnq.Limit(1).IDs(setContextOp(ctx, pnq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{phonenumber.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pnq *PhoneNumberQuery) FirstIDX(ctx context.Context) string {
	id, err := pnq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PhoneNumber entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PhoneNumber entity is found.
// Returns a *NotFoundError when no PhoneNumber entities are found.
func (pnq *PhoneNumberQuery) Only(ctx context.Context) (*PhoneNumber, error) {
	nodes, err := pnq.Limit(2).All(setContextOp(ctx, pnq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{phonenumber.Label}
	default:
		return nil, &NotSingularError{phonenumber.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pnq *PhoneNumberQuery) OnlyX(ctx context.Context) *PhoneNumber {
	node, err := pnq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PhoneNumber ID in the query.
// Returns a *NotSingularError when more than one PhoneNumber ID is found.
// Returns a *NotFoundError when no entities are found.
func (pnq *PhoneNumberQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = pnq.Limit(2).IDs(setContextOp(ctx, pnq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{phonenumber.Label}
	default:
		err = &NotSingularError{phonenumber.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pnq *PhoneNumberQuery) OnlyIDX(ctx context.Context) string {
	id, err := pnq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PhoneNumbers.
func (pnq *PhoneNumberQuery) All(ctx context.Context) ([]*PhoneNumber, error) {
	ctx = setContextOp(ctx, pnq.ctx, ent.OpQueryAll)
	if err := pnq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PhoneNumber, *PhoneNumberQuery]()
	return withInterceptors[[]*PhoneNumber](ctx, pnq, qr, pnq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pnq *PhoneNumberQuery) AllX(ctx context.Context) []*PhoneNumber {
	nodes, err := pnq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PhoneNumber IDs.
func (pnq *PhoneNumberQuery) IDs(ctx context.Context) (ids []string, err error) {
	if pnq.ctx.Unique == nil && pnq.path != nil {
		pnq.Unique(true)
	}
	ctx = setContextOp(ctx, pnq.ctx, ent.OpQueryIDs)
	if err = pnq.Select(phonenumber.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pnq *PhoneNumberQuery) IDsX(ctx context.Context) []string {
	ids, err := pnq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pnq *PhoneNumberQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pnq.ctx, ent.OpQueryCount)
	if err := pnq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pnq, querierCount[*PhoneNumberQuery](), pnq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pnq *PhoneNumberQuery) CountX(ctx context.Context) int {
	count, err := pnq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pnq *PhoneNumberQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pnq.ctx, ent.OpQueryExist)
	switch _, err := pnq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pnq *PhoneNumberQuery) ExistX(ctx context.Context) bool {
	exist, err := pnq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PhoneNumberQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pnq *PhoneNumberQuery) Clone() *PhoneNumberQuery {
	if pnq == nil {
		return nil
	}
	return &PhoneNumberQuery{
		config:                        pnq.config,
		ctx:                           pnq.ctx.Clone(),
		order:                         append([]phonenumber.OrderOption{}, pnq.order...),
		inters:                        append([]Interceptor{}, pnq.inters...),
		predicates:                    append([]predicate.PhoneNumber{}, pnq.predicates...),
		withOwner:                     pnq.withOwner.Clone(),
		withProfile:                   pnq.withProfile.Clone(),
		withEvents:                    pnq.withEvents.Clone(),
		withVendorProfilePhoneNumbers: pnq.withVendorProfilePhoneNumbers.Clone(),
		// clone intermediate query.
		sql:  pnq.sql.Clone(),
		path: pnq.path,
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (pnq *PhoneNumberQuery) WithOwner(opts ...func(*OrganizationQuery)) *PhoneNumberQuery {
	query := (&OrganizationClient{config: pnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pnq.withOwner = query
	return pnq
}

// WithProfile tells the query-builder to eager-load the nodes that are connected to
// the "profile" edge. The optional arguments are used to configure the query builder of the edge.
func (pnq *PhoneNumberQuery) WithProfile(opts ...func(*VendorProfileQuery)) *PhoneNumberQuery {
	query := (&VendorProfileClient{config: pnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pnq.withProfile = query
	return pnq
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (pnq *PhoneNumberQuery) WithEvents(opts ...func(*EventQuery)) *PhoneNumberQuery {
	query := (&EventClient{config: pnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pnq.withEvents = query
	return pnq
}

// WithVendorProfilePhoneNumbers tells the query-builder to eager-load the nodes that are connected to
// the "vendor_profile_phone_numbers" edge. The optional arguments are used to configure the query builder of the edge.
func (pnq *PhoneNumberQuery) WithVendorProfilePhoneNumbers(opts ...func(*VendorProfilePhoneNumberQuery)) *PhoneNumberQuery {
	query := (&VendorProfilePhoneNumberClient{config: pnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pnq.withVendorProfilePhoneNumbers = query
	return pnq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PhoneNumber.Query().
//		GroupBy(phonenumber.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (pnq *PhoneNumberQuery) GroupBy(field string, fields ...string) *PhoneNumberGroupBy {
	pnq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PhoneNumberGroupBy{build: pnq}
	grbuild.flds = &pnq.ctx.Fields
	grbuild.label = phonenumber.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.PhoneNumber.Query().
//		Select(phonenumber.FieldCreatedAt).
//		Scan(ctx, &v)
func (pnq *PhoneNumberQuery) Select(fields ...string) *PhoneNumberSelect {
	pnq.ctx.Fields = append(pnq.ctx.Fields, fields...)
	sbuild := &PhoneNumberSelect{PhoneNumberQuery: pnq}
	sbuild.label = phonenumber.Label
	sbuild.flds, sbuild.scan = &pnq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PhoneNumberSelect configured with the given aggregations.
func (pnq *PhoneNumberQuery) Aggregate(fns ...AggregateFunc) *PhoneNumberSelect {
	return pnq.Select().Aggregate(fns...)
}

func (pnq *PhoneNumberQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pnq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pnq); err != nil {
				return err
			}
		}
	}
	for _, f := range pnq.ctx.Fields {
		if !phonenumber.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if pnq.path != nil {
		prev, err := pnq.path(ctx)
		if err != nil {
			return err
		}
		pnq.sql = prev
	}
	if phonenumber.Policy == nil {
		return errors.New("generated: uninitialized phonenumber.Policy (forgotten import generated/runtime?)")
	}
	if err := phonenumber.Policy.EvalQuery(ctx, pnq); err != nil {
		return err
	}
	return nil
}

func (pnq *PhoneNumberQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PhoneNumber, error) {
	var (
		nodes       = []*PhoneNumber{}
		_spec       = pnq.querySpec()
		loadedTypes = [4]bool{
			pnq.withOwner != nil,
			pnq.withProfile != nil,
			pnq.withEvents != nil,
			pnq.withVendorProfilePhoneNumbers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PhoneNumber).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PhoneNumber{config: pnq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = pnq.schemaConfig.PhoneNumber
	ctx = internal.NewSchemaConfigContext(ctx, pnq.schemaConfig)
	if len(pnq.modifiers) > 0 {
		_spec.Modifiers = pnq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pnq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pnq.withOwner; query != nil {
		if err := pnq.loadOwner(ctx, query, nodes, nil,
			func(n *PhoneNumber, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := pnq.withProfile; query != nil {
		if err := pnq.loadProfile(ctx, query, nodes,
			func(n *PhoneNumber) { n.Edges.Profile = []*VendorProfile{} },
			func(n *PhoneNumber, e *VendorProfile) { n.Edges.Profile = append(n.Edges.Profile, e) }); err != nil {
			return nil, err
		}
	}
	if query := pnq.withEvents; query != nil {
		if err := pnq.loadEvents(ctx, query, nodes,
			func(n *PhoneNumber) { n.Edges.Events = []*Event{} },
			func(n *PhoneNumber, e *Event) { n.Edges.Events = append(n.Edges.Events, e) }); err != nil {
			return nil, err
		}
	}
	if query := pnq.withVendorProfilePhoneNumbers; query != nil {
		if err := pnq.loadVendorProfilePhoneNumbers(ctx, query, nodes,
			func(n *PhoneNumber) { n.Edges.VendorProfilePhoneNumbers = []*VendorProfilePhoneNumber{} },
			func(n *PhoneNumber, e *VendorProfilePhoneNumber) {
				n.Edges.VendorProfilePhoneNumbers = append(n.Edges.VendorProfilePhoneNumbers, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range pnq.withNamedProfile {
		if err := pnq.loadProfile(ctx, query, nodes,
			func(n *PhoneNumber) { n.appendNamedProfile(name) },
			func(n *PhoneNumber, e *VendorProfile) { n.appendNamedProfile(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pnq.withNamedEvents {
		if err := pnq.loadEvents(ctx, query, nodes,
			func(n *PhoneNumber) { n.appendNamedEvents(name) },
			func(n *PhoneNumber, e *Event) { n.appendNamedEvents(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pnq.withNamedVendorProfilePhoneNumbers {
		if err := pnq.loadVendorProfilePhoneNumbers(ctx, query, nodes,
			func(n *PhoneNumber) { n.appendNamedVendorProfilePhoneNumbers(name) },
			func(n *PhoneNumber, e *VendorProfilePhoneNumber) { n.appendNamedVendorProfilePhoneNumbers(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range pnq.loadTotal {
		if err := pnq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pnq *PhoneNumberQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*PhoneNumber, init func(*PhoneNumber), assign func(*PhoneNumber, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*PhoneNumber)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pnq *PhoneNumberQuery) loadProfile(ctx context.Context, query *VendorProfileQuery, nodes []*PhoneNumber, init func(*PhoneNumber), assign func(*PhoneNumber, *VendorProfile)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*PhoneNumber)
	nids := make(map[string]map[*PhoneNumber]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(phonenumber.ProfileTable)
		joinT.Schema(pnq.schemaConfig.VendorProfilePhoneNumber)
		s.Join(joinT).On(s.C(vendorprofile.FieldID), joinT.C(phonenumber.ProfilePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(phonenumber.ProfilePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(phonenumber.ProfilePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*PhoneNumber]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*VendorProfile](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "profile" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pnq *PhoneNumberQuery) loadEvents(ctx context.Context, query *EventQuery, nodes []*PhoneNumber, init func(*PhoneNumber), assign func(*PhoneNumber, *Event)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*PhoneNumber)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Event(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(phonenumber.EventsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.phone_number_events
		if fk == nil {
			return fmt.Errorf(`foreign-key "phone_number_events" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "phone_number_events" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pnq *PhoneNumberQuery) loadVendorProfilePhoneNumbers(ctx context.Context, query *VendorProfilePhoneNumberQuery, nodes []*PhoneNumber, init func(*PhoneNumber), assign func(*PhoneNumber, *VendorProfilePhoneNumber)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*PhoneNumber)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(vendorprofilephonenumber.FieldPhoneNumberID)
	}
	query.Where(predicate.VendorProfilePhoneNumber(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(phonenumber.VendorProfilePhoneNumbersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.PhoneNumberID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "phone_number_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pnq *PhoneNumberQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pnq.querySpec()
	_spec.Node.Schema = pnq.schemaConfig.PhoneNumber
	ctx = internal.NewSchemaConfigContext(ctx, pnq.schemaConfig)
	if len(pnq.modifiers) > 0 {
		_spec.Modifiers = pnq.modifiers
	}
	_spec.Node.Columns = pnq.ctx.Fields
	if len(pnq.ctx.Fields) > 0 {
		_spec.Unique = pnq.ctx.Unique != nil && *pnq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pnq.driver, _spec)
}

func (pnq *PhoneNumberQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(phonenumber.Table, phonenumber.Columns, sqlgraph.NewFieldSpec(phonenumber.FieldID, field.TypeString))
	_spec.From = pnq.sql
	if unique := pnq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pnq.path != nil {
		_spec.Unique = true
	}
	if fields := pnq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, phonenumber.FieldID)
		for i := range fields {
			if fields[i] != phonenumber.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if pnq.withOwner != nil {
			_spec.Node.AddColumnOnce(phonenumber.FieldOwnerID)
		}
	}
	if ps := pnq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pnq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pnq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pnq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pnq *PhoneNumberQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pnq.driver.Dialect())
	t1 := builder.Table(phonenumber.Table)
	columns := pnq.ctx.Fields
	if len(columns) == 0 {
		columns = phonenumber.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pnq.sql != nil {
		selector = pnq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pnq.ctx.Unique != nil && *pnq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(pnq.schemaConfig.PhoneNumber)
	ctx = internal.NewSchemaConfigContext(ctx, pnq.schemaConfig)
	selector.WithContext(ctx)
	for _, p := range pnq.predicates {
		p(selector)
	}
	for _, p := range pnq.order {
		p(selector)
	}
	if offset := pnq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pnq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedProfile tells the query-builder to eager-load the nodes that are connected to the "profile"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pnq *PhoneNumberQuery) WithNamedProfile(name string, opts ...func(*VendorProfileQuery)) *PhoneNumberQuery {
	query := (&VendorProfileClient{config: pnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pnq.withNamedProfile == nil {
		pnq.withNamedProfile = make(map[string]*VendorProfileQuery)
	}
	pnq.withNamedProfile[name] = query
	return pnq
}

// WithNamedEvents tells the query-builder to eager-load the nodes that are connected to the "events"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pnq *PhoneNumberQuery) WithNamedEvents(name string, opts ...func(*EventQuery)) *PhoneNumberQuery {
	query := (&EventClient{config: pnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pnq.withNamedEvents == nil {
		pnq.withNamedEvents = make(map[string]*EventQuery)
	}
	pnq.withNamedEvents[name] = query
	return pnq
}

// WithNamedVendorProfilePhoneNumbers tells the query-builder to eager-load the nodes that are connected to the "vendor_profile_phone_numbers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pnq *PhoneNumberQuery) WithNamedVendorProfilePhoneNumbers(name string, opts ...func(*VendorProfilePhoneNumberQuery)) *PhoneNumberQuery {
	query := (&VendorProfilePhoneNumberClient{config: pnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pnq.withNamedVendorProfilePhoneNumbers == nil {
		pnq.withNamedVendorProfilePhoneNumbers = make(map[string]*VendorProfilePhoneNumberQuery)
	}
	pnq.withNamedVendorProfilePhoneNumbers[name] = query
	return pnq
}

// PhoneNumberGroupBy is the group-by builder for PhoneNumber entities.
type PhoneNumberGroupBy struct {
	selector
	build *PhoneNumberQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pngb *PhoneNumberGroupBy) Aggregate(fns ...AggregateFunc) *PhoneNumberGroupBy {
	pngb.fns = append(pngb.fns, fns...)
	return pngb
}

// Scan applies the selector query and scans the result into the given value.
func (pngb *PhoneNumberGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pngb.build.ctx, ent.OpQueryGroupBy)
	if err := pngb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PhoneNumberQuery, *PhoneNumberGroupBy](ctx, pngb.build, pngb, pngb.build.inters, v)
}

func (pngb *PhoneNumberGroupBy) sqlScan(ctx context.Context, root *PhoneNumberQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pngb.fns))
	for _, fn := range pngb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pngb.flds)+len(pngb.fns))
		for _, f := range *pngb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pngb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pngb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PhoneNumberSelect is the builder for selecting fields of PhoneNumber entities.
type PhoneNumberSelect struct {
	*PhoneNumberQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pns *PhoneNumberSelect) Aggregate(fns ...AggregateFunc) *PhoneNumberSelect {
	pns.fns = append(pns.fns, fns...)
	return pns
}

// Scan applies the selector query and scans the result into the given value.
func (pns *PhoneNumberSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pns.ctx, ent.OpQuerySelect)
	if err := pns.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PhoneNumberQuery, *PhoneNumberSelect](ctx, pns.PhoneNumberQuery, pns, pns.inters, v)
}

func (pns *PhoneNumberSelect) sqlScan(ctx context.Context, root *PhoneNumberQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pns.fns))
	for _, fn := range pns.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pns.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
