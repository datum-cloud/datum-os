// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilepostaladdresshistory"
	"github.com/datum-cloud/datum-os/pkg/enums"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// VendorProfilePostalAddressHistoryUpdate is the builder for updating VendorProfilePostalAddressHistory entities.
type VendorProfilePostalAddressHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *VendorProfilePostalAddressHistoryMutation
}

// Where appends a list predicates to the VendorProfilePostalAddressHistoryUpdate builder.
func (vppahu *VendorProfilePostalAddressHistoryUpdate) Where(ps ...predicate.VendorProfilePostalAddressHistory) *VendorProfilePostalAddressHistoryUpdate {
	vppahu.mutation.Where(ps...)
	return vppahu
}

// SetUpdatedAt sets the "updated_at" field.
func (vppahu *VendorProfilePostalAddressHistoryUpdate) SetUpdatedAt(t time.Time) *VendorProfilePostalAddressHistoryUpdate {
	vppahu.mutation.SetUpdatedAt(t)
	return vppahu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vppahu *VendorProfilePostalAddressHistoryUpdate) ClearUpdatedAt() *VendorProfilePostalAddressHistoryUpdate {
	vppahu.mutation.ClearUpdatedAt()
	return vppahu
}

// SetUpdatedBy sets the "updated_by" field.
func (vppahu *VendorProfilePostalAddressHistoryUpdate) SetUpdatedBy(s string) *VendorProfilePostalAddressHistoryUpdate {
	vppahu.mutation.SetUpdatedBy(s)
	return vppahu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vppahu *VendorProfilePostalAddressHistoryUpdate) SetNillableUpdatedBy(s *string) *VendorProfilePostalAddressHistoryUpdate {
	if s != nil {
		vppahu.SetUpdatedBy(*s)
	}
	return vppahu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vppahu *VendorProfilePostalAddressHistoryUpdate) ClearUpdatedBy() *VendorProfilePostalAddressHistoryUpdate {
	vppahu.mutation.ClearUpdatedBy()
	return vppahu
}

// SetDeletedAt sets the "deleted_at" field.
func (vppahu *VendorProfilePostalAddressHistoryUpdate) SetDeletedAt(t time.Time) *VendorProfilePostalAddressHistoryUpdate {
	vppahu.mutation.SetDeletedAt(t)
	return vppahu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vppahu *VendorProfilePostalAddressHistoryUpdate) SetNillableDeletedAt(t *time.Time) *VendorProfilePostalAddressHistoryUpdate {
	if t != nil {
		vppahu.SetDeletedAt(*t)
	}
	return vppahu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vppahu *VendorProfilePostalAddressHistoryUpdate) ClearDeletedAt() *VendorProfilePostalAddressHistoryUpdate {
	vppahu.mutation.ClearDeletedAt()
	return vppahu
}

// SetDeletedBy sets the "deleted_by" field.
func (vppahu *VendorProfilePostalAddressHistoryUpdate) SetDeletedBy(s string) *VendorProfilePostalAddressHistoryUpdate {
	vppahu.mutation.SetDeletedBy(s)
	return vppahu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vppahu *VendorProfilePostalAddressHistoryUpdate) SetNillableDeletedBy(s *string) *VendorProfilePostalAddressHistoryUpdate {
	if s != nil {
		vppahu.SetDeletedBy(*s)
	}
	return vppahu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (vppahu *VendorProfilePostalAddressHistoryUpdate) ClearDeletedBy() *VendorProfilePostalAddressHistoryUpdate {
	vppahu.mutation.ClearDeletedBy()
	return vppahu
}

// SetPostalAddressType sets the "postal_address_type" field.
func (vppahu *VendorProfilePostalAddressHistoryUpdate) SetPostalAddressType(eat enums.PostalAddressType) *VendorProfilePostalAddressHistoryUpdate {
	vppahu.mutation.SetPostalAddressType(eat)
	return vppahu
}

// SetNillablePostalAddressType sets the "postal_address_type" field if the given value is not nil.
func (vppahu *VendorProfilePostalAddressHistoryUpdate) SetNillablePostalAddressType(eat *enums.PostalAddressType) *VendorProfilePostalAddressHistoryUpdate {
	if eat != nil {
		vppahu.SetPostalAddressType(*eat)
	}
	return vppahu
}

// Mutation returns the VendorProfilePostalAddressHistoryMutation object of the builder.
func (vppahu *VendorProfilePostalAddressHistoryUpdate) Mutation() *VendorProfilePostalAddressHistoryMutation {
	return vppahu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vppahu *VendorProfilePostalAddressHistoryUpdate) Save(ctx context.Context) (int, error) {
	vppahu.defaults()
	return withHooks(ctx, vppahu.sqlSave, vppahu.mutation, vppahu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vppahu *VendorProfilePostalAddressHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := vppahu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vppahu *VendorProfilePostalAddressHistoryUpdate) Exec(ctx context.Context) error {
	_, err := vppahu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vppahu *VendorProfilePostalAddressHistoryUpdate) ExecX(ctx context.Context) {
	if err := vppahu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vppahu *VendorProfilePostalAddressHistoryUpdate) defaults() {
	if _, ok := vppahu.mutation.UpdatedAt(); !ok && !vppahu.mutation.UpdatedAtCleared() {
		v := vendorprofilepostaladdresshistory.UpdateDefaultUpdatedAt()
		vppahu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vppahu *VendorProfilePostalAddressHistoryUpdate) check() error {
	if v, ok := vppahu.mutation.PostalAddressType(); ok {
		if err := vendorprofilepostaladdresshistory.PostalAddressTypeValidator(v); err != nil {
			return &ValidationError{Name: "postal_address_type", err: fmt.Errorf(`generated: validator failed for field "VendorProfilePostalAddressHistory.postal_address_type": %w`, err)}
		}
	}
	return nil
}

func (vppahu *VendorProfilePostalAddressHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vppahu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendorprofilepostaladdresshistory.Table, vendorprofilepostaladdresshistory.Columns, sqlgraph.NewFieldSpec(vendorprofilepostaladdresshistory.FieldID, field.TypeString))
	if ps := vppahu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vppahu.mutation.RefCleared() {
		_spec.ClearField(vendorprofilepostaladdresshistory.FieldRef, field.TypeString)
	}
	if vppahu.mutation.CreatedAtCleared() {
		_spec.ClearField(vendorprofilepostaladdresshistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vppahu.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofilepostaladdresshistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if vppahu.mutation.UpdatedAtCleared() {
		_spec.ClearField(vendorprofilepostaladdresshistory.FieldUpdatedAt, field.TypeTime)
	}
	if vppahu.mutation.CreatedByCleared() {
		_spec.ClearField(vendorprofilepostaladdresshistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vppahu.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofilepostaladdresshistory.FieldUpdatedBy, field.TypeString, value)
	}
	if vppahu.mutation.UpdatedByCleared() {
		_spec.ClearField(vendorprofilepostaladdresshistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vppahu.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofilepostaladdresshistory.FieldDeletedAt, field.TypeTime, value)
	}
	if vppahu.mutation.DeletedAtCleared() {
		_spec.ClearField(vendorprofilepostaladdresshistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vppahu.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofilepostaladdresshistory.FieldDeletedBy, field.TypeString, value)
	}
	if vppahu.mutation.DeletedByCleared() {
		_spec.ClearField(vendorprofilepostaladdresshistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := vppahu.mutation.PostalAddressType(); ok {
		_spec.SetField(vendorprofilepostaladdresshistory.FieldPostalAddressType, field.TypeEnum, value)
	}
	_spec.Node.Schema = vppahu.schemaConfig.VendorProfilePostalAddressHistory
	ctx = internal.NewSchemaConfigContext(ctx, vppahu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, vppahu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorprofilepostaladdresshistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vppahu.mutation.done = true
	return n, nil
}

// VendorProfilePostalAddressHistoryUpdateOne is the builder for updating a single VendorProfilePostalAddressHistory entity.
type VendorProfilePostalAddressHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VendorProfilePostalAddressHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) SetUpdatedAt(t time.Time) *VendorProfilePostalAddressHistoryUpdateOne {
	vppahuo.mutation.SetUpdatedAt(t)
	return vppahuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) ClearUpdatedAt() *VendorProfilePostalAddressHistoryUpdateOne {
	vppahuo.mutation.ClearUpdatedAt()
	return vppahuo
}

// SetUpdatedBy sets the "updated_by" field.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) SetUpdatedBy(s string) *VendorProfilePostalAddressHistoryUpdateOne {
	vppahuo.mutation.SetUpdatedBy(s)
	return vppahuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) SetNillableUpdatedBy(s *string) *VendorProfilePostalAddressHistoryUpdateOne {
	if s != nil {
		vppahuo.SetUpdatedBy(*s)
	}
	return vppahuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) ClearUpdatedBy() *VendorProfilePostalAddressHistoryUpdateOne {
	vppahuo.mutation.ClearUpdatedBy()
	return vppahuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) SetDeletedAt(t time.Time) *VendorProfilePostalAddressHistoryUpdateOne {
	vppahuo.mutation.SetDeletedAt(t)
	return vppahuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *VendorProfilePostalAddressHistoryUpdateOne {
	if t != nil {
		vppahuo.SetDeletedAt(*t)
	}
	return vppahuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) ClearDeletedAt() *VendorProfilePostalAddressHistoryUpdateOne {
	vppahuo.mutation.ClearDeletedAt()
	return vppahuo
}

// SetDeletedBy sets the "deleted_by" field.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) SetDeletedBy(s string) *VendorProfilePostalAddressHistoryUpdateOne {
	vppahuo.mutation.SetDeletedBy(s)
	return vppahuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) SetNillableDeletedBy(s *string) *VendorProfilePostalAddressHistoryUpdateOne {
	if s != nil {
		vppahuo.SetDeletedBy(*s)
	}
	return vppahuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) ClearDeletedBy() *VendorProfilePostalAddressHistoryUpdateOne {
	vppahuo.mutation.ClearDeletedBy()
	return vppahuo
}

// SetPostalAddressType sets the "postal_address_type" field.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) SetPostalAddressType(eat enums.PostalAddressType) *VendorProfilePostalAddressHistoryUpdateOne {
	vppahuo.mutation.SetPostalAddressType(eat)
	return vppahuo
}

// SetNillablePostalAddressType sets the "postal_address_type" field if the given value is not nil.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) SetNillablePostalAddressType(eat *enums.PostalAddressType) *VendorProfilePostalAddressHistoryUpdateOne {
	if eat != nil {
		vppahuo.SetPostalAddressType(*eat)
	}
	return vppahuo
}

// Mutation returns the VendorProfilePostalAddressHistoryMutation object of the builder.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) Mutation() *VendorProfilePostalAddressHistoryMutation {
	return vppahuo.mutation
}

// Where appends a list predicates to the VendorProfilePostalAddressHistoryUpdate builder.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) Where(ps ...predicate.VendorProfilePostalAddressHistory) *VendorProfilePostalAddressHistoryUpdateOne {
	vppahuo.mutation.Where(ps...)
	return vppahuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) Select(field string, fields ...string) *VendorProfilePostalAddressHistoryUpdateOne {
	vppahuo.fields = append([]string{field}, fields...)
	return vppahuo
}

// Save executes the query and returns the updated VendorProfilePostalAddressHistory entity.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) Save(ctx context.Context) (*VendorProfilePostalAddressHistory, error) {
	vppahuo.defaults()
	return withHooks(ctx, vppahuo.sqlSave, vppahuo.mutation, vppahuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) SaveX(ctx context.Context) *VendorProfilePostalAddressHistory {
	node, err := vppahuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := vppahuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := vppahuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) defaults() {
	if _, ok := vppahuo.mutation.UpdatedAt(); !ok && !vppahuo.mutation.UpdatedAtCleared() {
		v := vendorprofilepostaladdresshistory.UpdateDefaultUpdatedAt()
		vppahuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) check() error {
	if v, ok := vppahuo.mutation.PostalAddressType(); ok {
		if err := vendorprofilepostaladdresshistory.PostalAddressTypeValidator(v); err != nil {
			return &ValidationError{Name: "postal_address_type", err: fmt.Errorf(`generated: validator failed for field "VendorProfilePostalAddressHistory.postal_address_type": %w`, err)}
		}
	}
	return nil
}

func (vppahuo *VendorProfilePostalAddressHistoryUpdateOne) sqlSave(ctx context.Context) (_node *VendorProfilePostalAddressHistory, err error) {
	if err := vppahuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendorprofilepostaladdresshistory.Table, vendorprofilepostaladdresshistory.Columns, sqlgraph.NewFieldSpec(vendorprofilepostaladdresshistory.FieldID, field.TypeString))
	id, ok := vppahuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "VendorProfilePostalAddressHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vppahuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vendorprofilepostaladdresshistory.FieldID)
		for _, f := range fields {
			if !vendorprofilepostaladdresshistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != vendorprofilepostaladdresshistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vppahuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vppahuo.mutation.RefCleared() {
		_spec.ClearField(vendorprofilepostaladdresshistory.FieldRef, field.TypeString)
	}
	if vppahuo.mutation.CreatedAtCleared() {
		_spec.ClearField(vendorprofilepostaladdresshistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vppahuo.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofilepostaladdresshistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if vppahuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(vendorprofilepostaladdresshistory.FieldUpdatedAt, field.TypeTime)
	}
	if vppahuo.mutation.CreatedByCleared() {
		_spec.ClearField(vendorprofilepostaladdresshistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vppahuo.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofilepostaladdresshistory.FieldUpdatedBy, field.TypeString, value)
	}
	if vppahuo.mutation.UpdatedByCleared() {
		_spec.ClearField(vendorprofilepostaladdresshistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vppahuo.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofilepostaladdresshistory.FieldDeletedAt, field.TypeTime, value)
	}
	if vppahuo.mutation.DeletedAtCleared() {
		_spec.ClearField(vendorprofilepostaladdresshistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vppahuo.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofilepostaladdresshistory.FieldDeletedBy, field.TypeString, value)
	}
	if vppahuo.mutation.DeletedByCleared() {
		_spec.ClearField(vendorprofilepostaladdresshistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := vppahuo.mutation.PostalAddressType(); ok {
		_spec.SetField(vendorprofilepostaladdresshistory.FieldPostalAddressType, field.TypeEnum, value)
	}
	_spec.Node.Schema = vppahuo.schemaConfig.VendorProfilePostalAddressHistory
	ctx = internal.NewSchemaConfigContext(ctx, vppahuo.schemaConfig)
	_node = &VendorProfilePostalAddressHistory{config: vppahuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vppahuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorprofilepostaladdresshistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vppahuo.mutation.done = true
	return _node, nil
}
