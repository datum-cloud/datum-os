// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/event"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilepostaladdress"
	"github.com/datum-cloud/datum-os/pkg/enums"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// VendorProfilePostalAddressUpdate is the builder for updating VendorProfilePostalAddress entities.
type VendorProfilePostalAddressUpdate struct {
	config
	hooks    []Hook
	mutation *VendorProfilePostalAddressMutation
}

// Where appends a list predicates to the VendorProfilePostalAddressUpdate builder.
func (vppau *VendorProfilePostalAddressUpdate) Where(ps ...predicate.VendorProfilePostalAddress) *VendorProfilePostalAddressUpdate {
	vppau.mutation.Where(ps...)
	return vppau
}

// SetUpdatedAt sets the "updated_at" field.
func (vppau *VendorProfilePostalAddressUpdate) SetUpdatedAt(t time.Time) *VendorProfilePostalAddressUpdate {
	vppau.mutation.SetUpdatedAt(t)
	return vppau
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vppau *VendorProfilePostalAddressUpdate) ClearUpdatedAt() *VendorProfilePostalAddressUpdate {
	vppau.mutation.ClearUpdatedAt()
	return vppau
}

// SetUpdatedBy sets the "updated_by" field.
func (vppau *VendorProfilePostalAddressUpdate) SetUpdatedBy(s string) *VendorProfilePostalAddressUpdate {
	vppau.mutation.SetUpdatedBy(s)
	return vppau
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vppau *VendorProfilePostalAddressUpdate) SetNillableUpdatedBy(s *string) *VendorProfilePostalAddressUpdate {
	if s != nil {
		vppau.SetUpdatedBy(*s)
	}
	return vppau
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vppau *VendorProfilePostalAddressUpdate) ClearUpdatedBy() *VendorProfilePostalAddressUpdate {
	vppau.mutation.ClearUpdatedBy()
	return vppau
}

// SetDeletedAt sets the "deleted_at" field.
func (vppau *VendorProfilePostalAddressUpdate) SetDeletedAt(t time.Time) *VendorProfilePostalAddressUpdate {
	vppau.mutation.SetDeletedAt(t)
	return vppau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vppau *VendorProfilePostalAddressUpdate) SetNillableDeletedAt(t *time.Time) *VendorProfilePostalAddressUpdate {
	if t != nil {
		vppau.SetDeletedAt(*t)
	}
	return vppau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vppau *VendorProfilePostalAddressUpdate) ClearDeletedAt() *VendorProfilePostalAddressUpdate {
	vppau.mutation.ClearDeletedAt()
	return vppau
}

// SetDeletedBy sets the "deleted_by" field.
func (vppau *VendorProfilePostalAddressUpdate) SetDeletedBy(s string) *VendorProfilePostalAddressUpdate {
	vppau.mutation.SetDeletedBy(s)
	return vppau
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vppau *VendorProfilePostalAddressUpdate) SetNillableDeletedBy(s *string) *VendorProfilePostalAddressUpdate {
	if s != nil {
		vppau.SetDeletedBy(*s)
	}
	return vppau
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (vppau *VendorProfilePostalAddressUpdate) ClearDeletedBy() *VendorProfilePostalAddressUpdate {
	vppau.mutation.ClearDeletedBy()
	return vppau
}

// SetPostalAddressType sets the "postal_address_type" field.
func (vppau *VendorProfilePostalAddressUpdate) SetPostalAddressType(eat enums.PostalAddressType) *VendorProfilePostalAddressUpdate {
	vppau.mutation.SetPostalAddressType(eat)
	return vppau
}

// SetNillablePostalAddressType sets the "postal_address_type" field if the given value is not nil.
func (vppau *VendorProfilePostalAddressUpdate) SetNillablePostalAddressType(eat *enums.PostalAddressType) *VendorProfilePostalAddressUpdate {
	if eat != nil {
		vppau.SetPostalAddressType(*eat)
	}
	return vppau
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (vppau *VendorProfilePostalAddressUpdate) AddEventIDs(ids ...string) *VendorProfilePostalAddressUpdate {
	vppau.mutation.AddEventIDs(ids...)
	return vppau
}

// AddEvents adds the "events" edges to the Event entity.
func (vppau *VendorProfilePostalAddressUpdate) AddEvents(e ...*Event) *VendorProfilePostalAddressUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vppau.AddEventIDs(ids...)
}

// Mutation returns the VendorProfilePostalAddressMutation object of the builder.
func (vppau *VendorProfilePostalAddressUpdate) Mutation() *VendorProfilePostalAddressMutation {
	return vppau.mutation
}

// ClearEvents clears all "events" edges to the Event entity.
func (vppau *VendorProfilePostalAddressUpdate) ClearEvents() *VendorProfilePostalAddressUpdate {
	vppau.mutation.ClearEvents()
	return vppau
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (vppau *VendorProfilePostalAddressUpdate) RemoveEventIDs(ids ...string) *VendorProfilePostalAddressUpdate {
	vppau.mutation.RemoveEventIDs(ids...)
	return vppau
}

// RemoveEvents removes "events" edges to Event entities.
func (vppau *VendorProfilePostalAddressUpdate) RemoveEvents(e ...*Event) *VendorProfilePostalAddressUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vppau.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vppau *VendorProfilePostalAddressUpdate) Save(ctx context.Context) (int, error) {
	if err := vppau.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, vppau.sqlSave, vppau.mutation, vppau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vppau *VendorProfilePostalAddressUpdate) SaveX(ctx context.Context) int {
	affected, err := vppau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vppau *VendorProfilePostalAddressUpdate) Exec(ctx context.Context) error {
	_, err := vppau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vppau *VendorProfilePostalAddressUpdate) ExecX(ctx context.Context) {
	if err := vppau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vppau *VendorProfilePostalAddressUpdate) defaults() error {
	if _, ok := vppau.mutation.UpdatedAt(); !ok && !vppau.mutation.UpdatedAtCleared() {
		if vendorprofilepostaladdress.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized vendorprofilepostaladdress.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := vendorprofilepostaladdress.UpdateDefaultUpdatedAt()
		vppau.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vppau *VendorProfilePostalAddressUpdate) check() error {
	if v, ok := vppau.mutation.PostalAddressType(); ok {
		if err := vendorprofilepostaladdress.PostalAddressTypeValidator(v); err != nil {
			return &ValidationError{Name: "postal_address_type", err: fmt.Errorf(`generated: validator failed for field "VendorProfilePostalAddress.postal_address_type": %w`, err)}
		}
	}
	if vppau.mutation.PostalAddressCleared() && len(vppau.mutation.PostalAddressIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "VendorProfilePostalAddress.postal_address"`)
	}
	if vppau.mutation.ProfileCleared() && len(vppau.mutation.ProfileIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "VendorProfilePostalAddress.profile"`)
	}
	return nil
}

func (vppau *VendorProfilePostalAddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vppau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendorprofilepostaladdress.Table, vendorprofilepostaladdress.Columns, sqlgraph.NewFieldSpec(vendorprofilepostaladdress.FieldID, field.TypeString))
	if ps := vppau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vppau.mutation.CreatedAtCleared() {
		_spec.ClearField(vendorprofilepostaladdress.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vppau.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofilepostaladdress.FieldUpdatedAt, field.TypeTime, value)
	}
	if vppau.mutation.UpdatedAtCleared() {
		_spec.ClearField(vendorprofilepostaladdress.FieldUpdatedAt, field.TypeTime)
	}
	if vppau.mutation.CreatedByCleared() {
		_spec.ClearField(vendorprofilepostaladdress.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vppau.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofilepostaladdress.FieldUpdatedBy, field.TypeString, value)
	}
	if vppau.mutation.UpdatedByCleared() {
		_spec.ClearField(vendorprofilepostaladdress.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vppau.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofilepostaladdress.FieldDeletedAt, field.TypeTime, value)
	}
	if vppau.mutation.DeletedAtCleared() {
		_spec.ClearField(vendorprofilepostaladdress.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vppau.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofilepostaladdress.FieldDeletedBy, field.TypeString, value)
	}
	if vppau.mutation.DeletedByCleared() {
		_spec.ClearField(vendorprofilepostaladdress.FieldDeletedBy, field.TypeString)
	}
	if value, ok := vppau.mutation.PostalAddressType(); ok {
		_spec.SetField(vendorprofilepostaladdress.FieldPostalAddressType, field.TypeEnum, value)
	}
	if vppau.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendorprofilepostaladdress.EventsTable,
			Columns: []string{vendorprofilepostaladdress.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = vppau.schemaConfig.Event
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vppau.mutation.RemovedEventsIDs(); len(nodes) > 0 && !vppau.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendorprofilepostaladdress.EventsTable,
			Columns: []string{vendorprofilepostaladdress.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = vppau.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vppau.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendorprofilepostaladdress.EventsTable,
			Columns: []string{vendorprofilepostaladdress.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = vppau.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = vppau.schemaConfig.VendorProfilePostalAddress
	ctx = internal.NewSchemaConfigContext(ctx, vppau.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, vppau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorprofilepostaladdress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vppau.mutation.done = true
	return n, nil
}

// VendorProfilePostalAddressUpdateOne is the builder for updating a single VendorProfilePostalAddress entity.
type VendorProfilePostalAddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VendorProfilePostalAddressMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vppauo *VendorProfilePostalAddressUpdateOne) SetUpdatedAt(t time.Time) *VendorProfilePostalAddressUpdateOne {
	vppauo.mutation.SetUpdatedAt(t)
	return vppauo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vppauo *VendorProfilePostalAddressUpdateOne) ClearUpdatedAt() *VendorProfilePostalAddressUpdateOne {
	vppauo.mutation.ClearUpdatedAt()
	return vppauo
}

// SetUpdatedBy sets the "updated_by" field.
func (vppauo *VendorProfilePostalAddressUpdateOne) SetUpdatedBy(s string) *VendorProfilePostalAddressUpdateOne {
	vppauo.mutation.SetUpdatedBy(s)
	return vppauo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vppauo *VendorProfilePostalAddressUpdateOne) SetNillableUpdatedBy(s *string) *VendorProfilePostalAddressUpdateOne {
	if s != nil {
		vppauo.SetUpdatedBy(*s)
	}
	return vppauo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vppauo *VendorProfilePostalAddressUpdateOne) ClearUpdatedBy() *VendorProfilePostalAddressUpdateOne {
	vppauo.mutation.ClearUpdatedBy()
	return vppauo
}

// SetDeletedAt sets the "deleted_at" field.
func (vppauo *VendorProfilePostalAddressUpdateOne) SetDeletedAt(t time.Time) *VendorProfilePostalAddressUpdateOne {
	vppauo.mutation.SetDeletedAt(t)
	return vppauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vppauo *VendorProfilePostalAddressUpdateOne) SetNillableDeletedAt(t *time.Time) *VendorProfilePostalAddressUpdateOne {
	if t != nil {
		vppauo.SetDeletedAt(*t)
	}
	return vppauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vppauo *VendorProfilePostalAddressUpdateOne) ClearDeletedAt() *VendorProfilePostalAddressUpdateOne {
	vppauo.mutation.ClearDeletedAt()
	return vppauo
}

// SetDeletedBy sets the "deleted_by" field.
func (vppauo *VendorProfilePostalAddressUpdateOne) SetDeletedBy(s string) *VendorProfilePostalAddressUpdateOne {
	vppauo.mutation.SetDeletedBy(s)
	return vppauo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vppauo *VendorProfilePostalAddressUpdateOne) SetNillableDeletedBy(s *string) *VendorProfilePostalAddressUpdateOne {
	if s != nil {
		vppauo.SetDeletedBy(*s)
	}
	return vppauo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (vppauo *VendorProfilePostalAddressUpdateOne) ClearDeletedBy() *VendorProfilePostalAddressUpdateOne {
	vppauo.mutation.ClearDeletedBy()
	return vppauo
}

// SetPostalAddressType sets the "postal_address_type" field.
func (vppauo *VendorProfilePostalAddressUpdateOne) SetPostalAddressType(eat enums.PostalAddressType) *VendorProfilePostalAddressUpdateOne {
	vppauo.mutation.SetPostalAddressType(eat)
	return vppauo
}

// SetNillablePostalAddressType sets the "postal_address_type" field if the given value is not nil.
func (vppauo *VendorProfilePostalAddressUpdateOne) SetNillablePostalAddressType(eat *enums.PostalAddressType) *VendorProfilePostalAddressUpdateOne {
	if eat != nil {
		vppauo.SetPostalAddressType(*eat)
	}
	return vppauo
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (vppauo *VendorProfilePostalAddressUpdateOne) AddEventIDs(ids ...string) *VendorProfilePostalAddressUpdateOne {
	vppauo.mutation.AddEventIDs(ids...)
	return vppauo
}

// AddEvents adds the "events" edges to the Event entity.
func (vppauo *VendorProfilePostalAddressUpdateOne) AddEvents(e ...*Event) *VendorProfilePostalAddressUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vppauo.AddEventIDs(ids...)
}

// Mutation returns the VendorProfilePostalAddressMutation object of the builder.
func (vppauo *VendorProfilePostalAddressUpdateOne) Mutation() *VendorProfilePostalAddressMutation {
	return vppauo.mutation
}

// ClearEvents clears all "events" edges to the Event entity.
func (vppauo *VendorProfilePostalAddressUpdateOne) ClearEvents() *VendorProfilePostalAddressUpdateOne {
	vppauo.mutation.ClearEvents()
	return vppauo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (vppauo *VendorProfilePostalAddressUpdateOne) RemoveEventIDs(ids ...string) *VendorProfilePostalAddressUpdateOne {
	vppauo.mutation.RemoveEventIDs(ids...)
	return vppauo
}

// RemoveEvents removes "events" edges to Event entities.
func (vppauo *VendorProfilePostalAddressUpdateOne) RemoveEvents(e ...*Event) *VendorProfilePostalAddressUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vppauo.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the VendorProfilePostalAddressUpdate builder.
func (vppauo *VendorProfilePostalAddressUpdateOne) Where(ps ...predicate.VendorProfilePostalAddress) *VendorProfilePostalAddressUpdateOne {
	vppauo.mutation.Where(ps...)
	return vppauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vppauo *VendorProfilePostalAddressUpdateOne) Select(field string, fields ...string) *VendorProfilePostalAddressUpdateOne {
	vppauo.fields = append([]string{field}, fields...)
	return vppauo
}

// Save executes the query and returns the updated VendorProfilePostalAddress entity.
func (vppauo *VendorProfilePostalAddressUpdateOne) Save(ctx context.Context) (*VendorProfilePostalAddress, error) {
	if err := vppauo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, vppauo.sqlSave, vppauo.mutation, vppauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vppauo *VendorProfilePostalAddressUpdateOne) SaveX(ctx context.Context) *VendorProfilePostalAddress {
	node, err := vppauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vppauo *VendorProfilePostalAddressUpdateOne) Exec(ctx context.Context) error {
	_, err := vppauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vppauo *VendorProfilePostalAddressUpdateOne) ExecX(ctx context.Context) {
	if err := vppauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vppauo *VendorProfilePostalAddressUpdateOne) defaults() error {
	if _, ok := vppauo.mutation.UpdatedAt(); !ok && !vppauo.mutation.UpdatedAtCleared() {
		if vendorprofilepostaladdress.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized vendorprofilepostaladdress.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := vendorprofilepostaladdress.UpdateDefaultUpdatedAt()
		vppauo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vppauo *VendorProfilePostalAddressUpdateOne) check() error {
	if v, ok := vppauo.mutation.PostalAddressType(); ok {
		if err := vendorprofilepostaladdress.PostalAddressTypeValidator(v); err != nil {
			return &ValidationError{Name: "postal_address_type", err: fmt.Errorf(`generated: validator failed for field "VendorProfilePostalAddress.postal_address_type": %w`, err)}
		}
	}
	if vppauo.mutation.PostalAddressCleared() && len(vppauo.mutation.PostalAddressIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "VendorProfilePostalAddress.postal_address"`)
	}
	if vppauo.mutation.ProfileCleared() && len(vppauo.mutation.ProfileIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "VendorProfilePostalAddress.profile"`)
	}
	return nil
}

func (vppauo *VendorProfilePostalAddressUpdateOne) sqlSave(ctx context.Context) (_node *VendorProfilePostalAddress, err error) {
	if err := vppauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendorprofilepostaladdress.Table, vendorprofilepostaladdress.Columns, sqlgraph.NewFieldSpec(vendorprofilepostaladdress.FieldID, field.TypeString))
	id, ok := vppauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "VendorProfilePostalAddress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vppauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vendorprofilepostaladdress.FieldID)
		for _, f := range fields {
			if !vendorprofilepostaladdress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != vendorprofilepostaladdress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vppauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vppauo.mutation.CreatedAtCleared() {
		_spec.ClearField(vendorprofilepostaladdress.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vppauo.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofilepostaladdress.FieldUpdatedAt, field.TypeTime, value)
	}
	if vppauo.mutation.UpdatedAtCleared() {
		_spec.ClearField(vendorprofilepostaladdress.FieldUpdatedAt, field.TypeTime)
	}
	if vppauo.mutation.CreatedByCleared() {
		_spec.ClearField(vendorprofilepostaladdress.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vppauo.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofilepostaladdress.FieldUpdatedBy, field.TypeString, value)
	}
	if vppauo.mutation.UpdatedByCleared() {
		_spec.ClearField(vendorprofilepostaladdress.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vppauo.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofilepostaladdress.FieldDeletedAt, field.TypeTime, value)
	}
	if vppauo.mutation.DeletedAtCleared() {
		_spec.ClearField(vendorprofilepostaladdress.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vppauo.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofilepostaladdress.FieldDeletedBy, field.TypeString, value)
	}
	if vppauo.mutation.DeletedByCleared() {
		_spec.ClearField(vendorprofilepostaladdress.FieldDeletedBy, field.TypeString)
	}
	if value, ok := vppauo.mutation.PostalAddressType(); ok {
		_spec.SetField(vendorprofilepostaladdress.FieldPostalAddressType, field.TypeEnum, value)
	}
	if vppauo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendorprofilepostaladdress.EventsTable,
			Columns: []string{vendorprofilepostaladdress.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = vppauo.schemaConfig.Event
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vppauo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !vppauo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendorprofilepostaladdress.EventsTable,
			Columns: []string{vendorprofilepostaladdress.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = vppauo.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vppauo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendorprofilepostaladdress.EventsTable,
			Columns: []string{vendorprofilepostaladdress.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = vppauo.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = vppauo.schemaConfig.VendorProfilePostalAddress
	ctx = internal.NewSchemaConfigContext(ctx, vppauo.schemaConfig)
	_node = &VendorProfilePostalAddress{config: vppauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vppauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorprofilepostaladdress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vppauo.mutation.done = true
	return _node, nil
}
