// Code generated by ent, DO NOT EDIT.

package vendorprofilepostaladdress

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/datum-cloud/datum-os/pkg/enums"
)

const (
	// Label holds the string label denoting the vendorprofilepostaladdress type in the database.
	Label = "vendor_profile_postal_address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldMappingID holds the string denoting the mapping_id field in the database.
	FieldMappingID = "mapping_id"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldPostalAddressType holds the string denoting the postal_address_type field in the database.
	FieldPostalAddressType = "postal_address_type"
	// FieldVendorProfileID holds the string denoting the vendor_profile_id field in the database.
	FieldVendorProfileID = "vendor_profile_id"
	// FieldPostalAddressID holds the string denoting the postal_address_id field in the database.
	FieldPostalAddressID = "postal_address_id"
	// EdgePostalAddress holds the string denoting the postal_address edge name in mutations.
	EdgePostalAddress = "postal_address"
	// EdgeProfile holds the string denoting the profile edge name in mutations.
	EdgeProfile = "profile"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "events"
	// Table holds the table name of the vendorprofilepostaladdress in the database.
	Table = "vendor_profile_postal_addresses"
	// PostalAddressTable is the table that holds the postal_address relation/edge.
	PostalAddressTable = "vendor_profile_postal_addresses"
	// PostalAddressInverseTable is the table name for the PostalAddress entity.
	// It exists in this package in order to avoid circular dependency with the "postaladdress" package.
	PostalAddressInverseTable = "postal_addresses"
	// PostalAddressColumn is the table column denoting the postal_address relation/edge.
	PostalAddressColumn = "postal_address_id"
	// ProfileTable is the table that holds the profile relation/edge.
	ProfileTable = "vendor_profile_postal_addresses"
	// ProfileInverseTable is the table name for the VendorProfile entity.
	// It exists in this package in order to avoid circular dependency with the "vendorprofile" package.
	ProfileInverseTable = "vendor_profiles"
	// ProfileColumn is the table column denoting the profile relation/edge.
	ProfileColumn = "vendor_profile_id"
	// EventsTable is the table that holds the events relation/edge.
	EventsTable = "events"
	// EventsInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventsInverseTable = "events"
	// EventsColumn is the table column denoting the events relation/edge.
	EventsColumn = "vendor_profile_postal_address_events"
)

// Columns holds all SQL columns for vendorprofilepostaladdress fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldMappingID,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldPostalAddressType,
	FieldVendorProfileID,
	FieldPostalAddressID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/datum-cloud/datum-os/internal/ent/generated/runtime"
var (
	Hooks        [3]ent.Hook
	Interceptors [1]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultMappingID holds the default value on creation for the "mapping_id" field.
	DefaultMappingID func() string
	// VendorProfileIDValidator is a validator for the "vendor_profile_id" field. It is called by the builders before save.
	VendorProfileIDValidator func(string) error
	// PostalAddressIDValidator is a validator for the "postal_address_id" field. It is called by the builders before save.
	PostalAddressIDValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

const DefaultPostalAddressType enums.PostalAddressType = "MAILING"

// PostalAddressTypeValidator is a validator for the "postal_address_type" field enum values. It is called by the builders before save.
func PostalAddressTypeValidator(pat enums.PostalAddressType) error {
	switch pat.String() {
	case "MAILING", "BILLING", "PHYSICAL":
		return nil
	default:
		return fmt.Errorf("vendorprofilepostaladdress: invalid enum value for postal_address_type field: %q", pat)
	}
}

// OrderOption defines the ordering options for the VendorProfilePostalAddress queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByMappingID orders the results by the mapping_id field.
func ByMappingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMappingID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByPostalAddressType orders the results by the postal_address_type field.
func ByPostalAddressType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostalAddressType, opts...).ToFunc()
}

// ByVendorProfileID orders the results by the vendor_profile_id field.
func ByVendorProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVendorProfileID, opts...).ToFunc()
}

// ByPostalAddressID orders the results by the postal_address_id field.
func ByPostalAddressID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostalAddressID, opts...).ToFunc()
}

// ByPostalAddressField orders the results by postal_address field.
func ByPostalAddressField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostalAddressStep(), sql.OrderByField(field, opts...))
	}
}

// ByProfileField orders the results by profile field.
func ByProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfileStep(), sql.OrderByField(field, opts...))
	}
}

// ByEventsCount orders the results by events count.
func ByEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventsStep(), opts...)
	}
}

// ByEvents orders the results by events terms.
func ByEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPostalAddressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostalAddressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PostalAddressTable, PostalAddressColumn),
	)
}
func newProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProfileTable, ProfileColumn),
	)
}
func newEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EventsTable, EventsColumn),
	)
}

var (
	// enums.PostalAddressType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.PostalAddressType)(nil)
	// enums.PostalAddressType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.PostalAddressType)(nil)
)
