// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contact"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contactlist"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contactlistmembership"
	"github.com/datum-cloud/datum-os/internal/ent/generated/event"
	"github.com/datum-cloud/datum-os/internal/ent/generated/integration"
	"github.com/datum-cloud/datum-os/internal/ent/generated/organization"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// ContactListUpdate is the builder for updating ContactList entities.
type ContactListUpdate struct {
	config
	hooks    []Hook
	mutation *ContactListMutation
}

// Where appends a list predicates to the ContactListUpdate builder.
func (clu *ContactListUpdate) Where(ps ...predicate.ContactList) *ContactListUpdate {
	clu.mutation.Where(ps...)
	return clu
}

// SetUpdatedAt sets the "updated_at" field.
func (clu *ContactListUpdate) SetUpdatedAt(t time.Time) *ContactListUpdate {
	clu.mutation.SetUpdatedAt(t)
	return clu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (clu *ContactListUpdate) ClearUpdatedAt() *ContactListUpdate {
	clu.mutation.ClearUpdatedAt()
	return clu
}

// SetUpdatedBy sets the "updated_by" field.
func (clu *ContactListUpdate) SetUpdatedBy(s string) *ContactListUpdate {
	clu.mutation.SetUpdatedBy(s)
	return clu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (clu *ContactListUpdate) SetNillableUpdatedBy(s *string) *ContactListUpdate {
	if s != nil {
		clu.SetUpdatedBy(*s)
	}
	return clu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (clu *ContactListUpdate) ClearUpdatedBy() *ContactListUpdate {
	clu.mutation.ClearUpdatedBy()
	return clu
}

// SetDeletedAt sets the "deleted_at" field.
func (clu *ContactListUpdate) SetDeletedAt(t time.Time) *ContactListUpdate {
	clu.mutation.SetDeletedAt(t)
	return clu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (clu *ContactListUpdate) SetNillableDeletedAt(t *time.Time) *ContactListUpdate {
	if t != nil {
		clu.SetDeletedAt(*t)
	}
	return clu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (clu *ContactListUpdate) ClearDeletedAt() *ContactListUpdate {
	clu.mutation.ClearDeletedAt()
	return clu
}

// SetDeletedBy sets the "deleted_by" field.
func (clu *ContactListUpdate) SetDeletedBy(s string) *ContactListUpdate {
	clu.mutation.SetDeletedBy(s)
	return clu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (clu *ContactListUpdate) SetNillableDeletedBy(s *string) *ContactListUpdate {
	if s != nil {
		clu.SetDeletedBy(*s)
	}
	return clu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (clu *ContactListUpdate) ClearDeletedBy() *ContactListUpdate {
	clu.mutation.ClearDeletedBy()
	return clu
}

// SetTags sets the "tags" field.
func (clu *ContactListUpdate) SetTags(s []string) *ContactListUpdate {
	clu.mutation.SetTags(s)
	return clu
}

// AppendTags appends s to the "tags" field.
func (clu *ContactListUpdate) AppendTags(s []string) *ContactListUpdate {
	clu.mutation.AppendTags(s)
	return clu
}

// ClearTags clears the value of the "tags" field.
func (clu *ContactListUpdate) ClearTags() *ContactListUpdate {
	clu.mutation.ClearTags()
	return clu
}

// SetOwnerID sets the "owner_id" field.
func (clu *ContactListUpdate) SetOwnerID(s string) *ContactListUpdate {
	clu.mutation.SetOwnerID(s)
	return clu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (clu *ContactListUpdate) SetNillableOwnerID(s *string) *ContactListUpdate {
	if s != nil {
		clu.SetOwnerID(*s)
	}
	return clu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (clu *ContactListUpdate) ClearOwnerID() *ContactListUpdate {
	clu.mutation.ClearOwnerID()
	return clu
}

// SetName sets the "name" field.
func (clu *ContactListUpdate) SetName(s string) *ContactListUpdate {
	clu.mutation.SetName(s)
	return clu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (clu *ContactListUpdate) SetNillableName(s *string) *ContactListUpdate {
	if s != nil {
		clu.SetName(*s)
	}
	return clu
}

// SetVisibility sets the "visibility" field.
func (clu *ContactListUpdate) SetVisibility(s string) *ContactListUpdate {
	clu.mutation.SetVisibility(s)
	return clu
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (clu *ContactListUpdate) SetNillableVisibility(s *string) *ContactListUpdate {
	if s != nil {
		clu.SetVisibility(*s)
	}
	return clu
}

// SetDisplayName sets the "display_name" field.
func (clu *ContactListUpdate) SetDisplayName(s string) *ContactListUpdate {
	clu.mutation.SetDisplayName(s)
	return clu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (clu *ContactListUpdate) SetNillableDisplayName(s *string) *ContactListUpdate {
	if s != nil {
		clu.SetDisplayName(*s)
	}
	return clu
}

// SetDescription sets the "description" field.
func (clu *ContactListUpdate) SetDescription(s string) *ContactListUpdate {
	clu.mutation.SetDescription(s)
	return clu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (clu *ContactListUpdate) SetNillableDescription(s *string) *ContactListUpdate {
	if s != nil {
		clu.SetDescription(*s)
	}
	return clu
}

// ClearDescription clears the value of the "description" field.
func (clu *ContactListUpdate) ClearDescription() *ContactListUpdate {
	clu.mutation.ClearDescription()
	return clu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (clu *ContactListUpdate) SetOwner(o *Organization) *ContactListUpdate {
	return clu.SetOwnerID(o.ID)
}

// AddContactIDs adds the "contacts" edge to the Contact entity by IDs.
func (clu *ContactListUpdate) AddContactIDs(ids ...string) *ContactListUpdate {
	clu.mutation.AddContactIDs(ids...)
	return clu
}

// AddContacts adds the "contacts" edges to the Contact entity.
func (clu *ContactListUpdate) AddContacts(c ...*Contact) *ContactListUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return clu.AddContactIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (clu *ContactListUpdate) AddEventIDs(ids ...string) *ContactListUpdate {
	clu.mutation.AddEventIDs(ids...)
	return clu
}

// AddEvents adds the "events" edges to the Event entity.
func (clu *ContactListUpdate) AddEvents(e ...*Event) *ContactListUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return clu.AddEventIDs(ids...)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (clu *ContactListUpdate) AddIntegrationIDs(ids ...string) *ContactListUpdate {
	clu.mutation.AddIntegrationIDs(ids...)
	return clu
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (clu *ContactListUpdate) AddIntegrations(i ...*Integration) *ContactListUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return clu.AddIntegrationIDs(ids...)
}

// AddContactListMemberIDs adds the "contact_list_members" edge to the ContactListMembership entity by IDs.
func (clu *ContactListUpdate) AddContactListMemberIDs(ids ...string) *ContactListUpdate {
	clu.mutation.AddContactListMemberIDs(ids...)
	return clu
}

// AddContactListMembers adds the "contact_list_members" edges to the ContactListMembership entity.
func (clu *ContactListUpdate) AddContactListMembers(c ...*ContactListMembership) *ContactListUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return clu.AddContactListMemberIDs(ids...)
}

// Mutation returns the ContactListMutation object of the builder.
func (clu *ContactListUpdate) Mutation() *ContactListMutation {
	return clu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (clu *ContactListUpdate) ClearOwner() *ContactListUpdate {
	clu.mutation.ClearOwner()
	return clu
}

// ClearContacts clears all "contacts" edges to the Contact entity.
func (clu *ContactListUpdate) ClearContacts() *ContactListUpdate {
	clu.mutation.ClearContacts()
	return clu
}

// RemoveContactIDs removes the "contacts" edge to Contact entities by IDs.
func (clu *ContactListUpdate) RemoveContactIDs(ids ...string) *ContactListUpdate {
	clu.mutation.RemoveContactIDs(ids...)
	return clu
}

// RemoveContacts removes "contacts" edges to Contact entities.
func (clu *ContactListUpdate) RemoveContacts(c ...*Contact) *ContactListUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return clu.RemoveContactIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (clu *ContactListUpdate) ClearEvents() *ContactListUpdate {
	clu.mutation.ClearEvents()
	return clu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (clu *ContactListUpdate) RemoveEventIDs(ids ...string) *ContactListUpdate {
	clu.mutation.RemoveEventIDs(ids...)
	return clu
}

// RemoveEvents removes "events" edges to Event entities.
func (clu *ContactListUpdate) RemoveEvents(e ...*Event) *ContactListUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return clu.RemoveEventIDs(ids...)
}

// ClearIntegrations clears all "integrations" edges to the Integration entity.
func (clu *ContactListUpdate) ClearIntegrations() *ContactListUpdate {
	clu.mutation.ClearIntegrations()
	return clu
}

// RemoveIntegrationIDs removes the "integrations" edge to Integration entities by IDs.
func (clu *ContactListUpdate) RemoveIntegrationIDs(ids ...string) *ContactListUpdate {
	clu.mutation.RemoveIntegrationIDs(ids...)
	return clu
}

// RemoveIntegrations removes "integrations" edges to Integration entities.
func (clu *ContactListUpdate) RemoveIntegrations(i ...*Integration) *ContactListUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return clu.RemoveIntegrationIDs(ids...)
}

// ClearContactListMembers clears all "contact_list_members" edges to the ContactListMembership entity.
func (clu *ContactListUpdate) ClearContactListMembers() *ContactListUpdate {
	clu.mutation.ClearContactListMembers()
	return clu
}

// RemoveContactListMemberIDs removes the "contact_list_members" edge to ContactListMembership entities by IDs.
func (clu *ContactListUpdate) RemoveContactListMemberIDs(ids ...string) *ContactListUpdate {
	clu.mutation.RemoveContactListMemberIDs(ids...)
	return clu
}

// RemoveContactListMembers removes "contact_list_members" edges to ContactListMembership entities.
func (clu *ContactListUpdate) RemoveContactListMembers(c ...*ContactListMembership) *ContactListUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return clu.RemoveContactListMemberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clu *ContactListUpdate) Save(ctx context.Context) (int, error) {
	if err := clu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, clu.sqlSave, clu.mutation, clu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clu *ContactListUpdate) SaveX(ctx context.Context) int {
	affected, err := clu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clu *ContactListUpdate) Exec(ctx context.Context) error {
	_, err := clu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clu *ContactListUpdate) ExecX(ctx context.Context) {
	if err := clu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clu *ContactListUpdate) defaults() error {
	if _, ok := clu.mutation.UpdatedAt(); !ok && !clu.mutation.UpdatedAtCleared() {
		if contactlist.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized contactlist.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := contactlist.UpdateDefaultUpdatedAt()
		clu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (clu *ContactListUpdate) check() error {
	if v, ok := clu.mutation.OwnerID(); ok {
		if err := contactlist.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "ContactList.owner_id": %w`, err)}
		}
	}
	if v, ok := clu.mutation.Name(); ok {
		if err := contactlist.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "ContactList.name": %w`, err)}
		}
	}
	if v, ok := clu.mutation.DisplayName(); ok {
		if err := contactlist.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "ContactList.display_name": %w`, err)}
		}
	}
	return nil
}

func (clu *ContactListUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := clu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(contactlist.Table, contactlist.Columns, sqlgraph.NewFieldSpec(contactlist.FieldID, field.TypeString))
	if ps := clu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if clu.mutation.CreatedAtCleared() {
		_spec.ClearField(contactlist.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := clu.mutation.UpdatedAt(); ok {
		_spec.SetField(contactlist.FieldUpdatedAt, field.TypeTime, value)
	}
	if clu.mutation.UpdatedAtCleared() {
		_spec.ClearField(contactlist.FieldUpdatedAt, field.TypeTime)
	}
	if clu.mutation.CreatedByCleared() {
		_spec.ClearField(contactlist.FieldCreatedBy, field.TypeString)
	}
	if value, ok := clu.mutation.UpdatedBy(); ok {
		_spec.SetField(contactlist.FieldUpdatedBy, field.TypeString, value)
	}
	if clu.mutation.UpdatedByCleared() {
		_spec.ClearField(contactlist.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := clu.mutation.DeletedAt(); ok {
		_spec.SetField(contactlist.FieldDeletedAt, field.TypeTime, value)
	}
	if clu.mutation.DeletedAtCleared() {
		_spec.ClearField(contactlist.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := clu.mutation.DeletedBy(); ok {
		_spec.SetField(contactlist.FieldDeletedBy, field.TypeString, value)
	}
	if clu.mutation.DeletedByCleared() {
		_spec.ClearField(contactlist.FieldDeletedBy, field.TypeString)
	}
	if value, ok := clu.mutation.Tags(); ok {
		_spec.SetField(contactlist.FieldTags, field.TypeJSON, value)
	}
	if value, ok := clu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, contactlist.FieldTags, value)
		})
	}
	if clu.mutation.TagsCleared() {
		_spec.ClearField(contactlist.FieldTags, field.TypeJSON)
	}
	if value, ok := clu.mutation.Name(); ok {
		_spec.SetField(contactlist.FieldName, field.TypeString, value)
	}
	if value, ok := clu.mutation.Visibility(); ok {
		_spec.SetField(contactlist.FieldVisibility, field.TypeString, value)
	}
	if value, ok := clu.mutation.DisplayName(); ok {
		_spec.SetField(contactlist.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := clu.mutation.Description(); ok {
		_spec.SetField(contactlist.FieldDescription, field.TypeString, value)
	}
	if clu.mutation.DescriptionCleared() {
		_spec.ClearField(contactlist.FieldDescription, field.TypeString)
	}
	if clu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactlist.OwnerTable,
			Columns: []string{contactlist.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = clu.schemaConfig.ContactList
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactlist.OwnerTable,
			Columns: []string{contactlist.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = clu.schemaConfig.ContactList
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if clu.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contactlist.ContactsTable,
			Columns: contactlist.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = clu.schemaConfig.ContactListMembership
		createE := &ContactListMembershipCreate{config: clu.config, mutation: newContactListMembershipMutation(clu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.RemovedContactsIDs(); len(nodes) > 0 && !clu.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contactlist.ContactsTable,
			Columns: contactlist.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = clu.schemaConfig.ContactListMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ContactListMembershipCreate{config: clu.config, mutation: newContactListMembershipMutation(clu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contactlist.ContactsTable,
			Columns: contactlist.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = clu.schemaConfig.ContactListMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ContactListMembershipCreate{config: clu.config, mutation: newContactListMembershipMutation(clu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if clu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactlist.EventsTable,
			Columns: []string{contactlist.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = clu.schemaConfig.Event
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !clu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactlist.EventsTable,
			Columns: []string{contactlist.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = clu.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactlist.EventsTable,
			Columns: []string{contactlist.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = clu.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if clu.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactlist.IntegrationsTable,
			Columns: []string{contactlist.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = clu.schemaConfig.Integration
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.RemovedIntegrationsIDs(); len(nodes) > 0 && !clu.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactlist.IntegrationsTable,
			Columns: []string{contactlist.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = clu.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactlist.IntegrationsTable,
			Columns: []string{contactlist.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = clu.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if clu.mutation.ContactListMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contactlist.ContactListMembersTable,
			Columns: []string{contactlist.ContactListMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactlistmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = clu.schemaConfig.ContactListMembership
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.RemovedContactListMembersIDs(); len(nodes) > 0 && !clu.mutation.ContactListMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contactlist.ContactListMembersTable,
			Columns: []string{contactlist.ContactListMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactlistmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = clu.schemaConfig.ContactListMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.ContactListMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contactlist.ContactListMembersTable,
			Columns: []string{contactlist.ContactListMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactlistmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = clu.schemaConfig.ContactListMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = clu.schemaConfig.ContactList
	ctx = internal.NewSchemaConfigContext(ctx, clu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, clu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	clu.mutation.done = true
	return n, nil
}

// ContactListUpdateOne is the builder for updating a single ContactList entity.
type ContactListUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContactListMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cluo *ContactListUpdateOne) SetUpdatedAt(t time.Time) *ContactListUpdateOne {
	cluo.mutation.SetUpdatedAt(t)
	return cluo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cluo *ContactListUpdateOne) ClearUpdatedAt() *ContactListUpdateOne {
	cluo.mutation.ClearUpdatedAt()
	return cluo
}

// SetUpdatedBy sets the "updated_by" field.
func (cluo *ContactListUpdateOne) SetUpdatedBy(s string) *ContactListUpdateOne {
	cluo.mutation.SetUpdatedBy(s)
	return cluo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cluo *ContactListUpdateOne) SetNillableUpdatedBy(s *string) *ContactListUpdateOne {
	if s != nil {
		cluo.SetUpdatedBy(*s)
	}
	return cluo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cluo *ContactListUpdateOne) ClearUpdatedBy() *ContactListUpdateOne {
	cluo.mutation.ClearUpdatedBy()
	return cluo
}

// SetDeletedAt sets the "deleted_at" field.
func (cluo *ContactListUpdateOne) SetDeletedAt(t time.Time) *ContactListUpdateOne {
	cluo.mutation.SetDeletedAt(t)
	return cluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cluo *ContactListUpdateOne) SetNillableDeletedAt(t *time.Time) *ContactListUpdateOne {
	if t != nil {
		cluo.SetDeletedAt(*t)
	}
	return cluo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cluo *ContactListUpdateOne) ClearDeletedAt() *ContactListUpdateOne {
	cluo.mutation.ClearDeletedAt()
	return cluo
}

// SetDeletedBy sets the "deleted_by" field.
func (cluo *ContactListUpdateOne) SetDeletedBy(s string) *ContactListUpdateOne {
	cluo.mutation.SetDeletedBy(s)
	return cluo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (cluo *ContactListUpdateOne) SetNillableDeletedBy(s *string) *ContactListUpdateOne {
	if s != nil {
		cluo.SetDeletedBy(*s)
	}
	return cluo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (cluo *ContactListUpdateOne) ClearDeletedBy() *ContactListUpdateOne {
	cluo.mutation.ClearDeletedBy()
	return cluo
}

// SetTags sets the "tags" field.
func (cluo *ContactListUpdateOne) SetTags(s []string) *ContactListUpdateOne {
	cluo.mutation.SetTags(s)
	return cluo
}

// AppendTags appends s to the "tags" field.
func (cluo *ContactListUpdateOne) AppendTags(s []string) *ContactListUpdateOne {
	cluo.mutation.AppendTags(s)
	return cluo
}

// ClearTags clears the value of the "tags" field.
func (cluo *ContactListUpdateOne) ClearTags() *ContactListUpdateOne {
	cluo.mutation.ClearTags()
	return cluo
}

// SetOwnerID sets the "owner_id" field.
func (cluo *ContactListUpdateOne) SetOwnerID(s string) *ContactListUpdateOne {
	cluo.mutation.SetOwnerID(s)
	return cluo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (cluo *ContactListUpdateOne) SetNillableOwnerID(s *string) *ContactListUpdateOne {
	if s != nil {
		cluo.SetOwnerID(*s)
	}
	return cluo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (cluo *ContactListUpdateOne) ClearOwnerID() *ContactListUpdateOne {
	cluo.mutation.ClearOwnerID()
	return cluo
}

// SetName sets the "name" field.
func (cluo *ContactListUpdateOne) SetName(s string) *ContactListUpdateOne {
	cluo.mutation.SetName(s)
	return cluo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cluo *ContactListUpdateOne) SetNillableName(s *string) *ContactListUpdateOne {
	if s != nil {
		cluo.SetName(*s)
	}
	return cluo
}

// SetVisibility sets the "visibility" field.
func (cluo *ContactListUpdateOne) SetVisibility(s string) *ContactListUpdateOne {
	cluo.mutation.SetVisibility(s)
	return cluo
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (cluo *ContactListUpdateOne) SetNillableVisibility(s *string) *ContactListUpdateOne {
	if s != nil {
		cluo.SetVisibility(*s)
	}
	return cluo
}

// SetDisplayName sets the "display_name" field.
func (cluo *ContactListUpdateOne) SetDisplayName(s string) *ContactListUpdateOne {
	cluo.mutation.SetDisplayName(s)
	return cluo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (cluo *ContactListUpdateOne) SetNillableDisplayName(s *string) *ContactListUpdateOne {
	if s != nil {
		cluo.SetDisplayName(*s)
	}
	return cluo
}

// SetDescription sets the "description" field.
func (cluo *ContactListUpdateOne) SetDescription(s string) *ContactListUpdateOne {
	cluo.mutation.SetDescription(s)
	return cluo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cluo *ContactListUpdateOne) SetNillableDescription(s *string) *ContactListUpdateOne {
	if s != nil {
		cluo.SetDescription(*s)
	}
	return cluo
}

// ClearDescription clears the value of the "description" field.
func (cluo *ContactListUpdateOne) ClearDescription() *ContactListUpdateOne {
	cluo.mutation.ClearDescription()
	return cluo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (cluo *ContactListUpdateOne) SetOwner(o *Organization) *ContactListUpdateOne {
	return cluo.SetOwnerID(o.ID)
}

// AddContactIDs adds the "contacts" edge to the Contact entity by IDs.
func (cluo *ContactListUpdateOne) AddContactIDs(ids ...string) *ContactListUpdateOne {
	cluo.mutation.AddContactIDs(ids...)
	return cluo
}

// AddContacts adds the "contacts" edges to the Contact entity.
func (cluo *ContactListUpdateOne) AddContacts(c ...*Contact) *ContactListUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cluo.AddContactIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (cluo *ContactListUpdateOne) AddEventIDs(ids ...string) *ContactListUpdateOne {
	cluo.mutation.AddEventIDs(ids...)
	return cluo
}

// AddEvents adds the "events" edges to the Event entity.
func (cluo *ContactListUpdateOne) AddEvents(e ...*Event) *ContactListUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cluo.AddEventIDs(ids...)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (cluo *ContactListUpdateOne) AddIntegrationIDs(ids ...string) *ContactListUpdateOne {
	cluo.mutation.AddIntegrationIDs(ids...)
	return cluo
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (cluo *ContactListUpdateOne) AddIntegrations(i ...*Integration) *ContactListUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cluo.AddIntegrationIDs(ids...)
}

// AddContactListMemberIDs adds the "contact_list_members" edge to the ContactListMembership entity by IDs.
func (cluo *ContactListUpdateOne) AddContactListMemberIDs(ids ...string) *ContactListUpdateOne {
	cluo.mutation.AddContactListMemberIDs(ids...)
	return cluo
}

// AddContactListMembers adds the "contact_list_members" edges to the ContactListMembership entity.
func (cluo *ContactListUpdateOne) AddContactListMembers(c ...*ContactListMembership) *ContactListUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cluo.AddContactListMemberIDs(ids...)
}

// Mutation returns the ContactListMutation object of the builder.
func (cluo *ContactListUpdateOne) Mutation() *ContactListMutation {
	return cluo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (cluo *ContactListUpdateOne) ClearOwner() *ContactListUpdateOne {
	cluo.mutation.ClearOwner()
	return cluo
}

// ClearContacts clears all "contacts" edges to the Contact entity.
func (cluo *ContactListUpdateOne) ClearContacts() *ContactListUpdateOne {
	cluo.mutation.ClearContacts()
	return cluo
}

// RemoveContactIDs removes the "contacts" edge to Contact entities by IDs.
func (cluo *ContactListUpdateOne) RemoveContactIDs(ids ...string) *ContactListUpdateOne {
	cluo.mutation.RemoveContactIDs(ids...)
	return cluo
}

// RemoveContacts removes "contacts" edges to Contact entities.
func (cluo *ContactListUpdateOne) RemoveContacts(c ...*Contact) *ContactListUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cluo.RemoveContactIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (cluo *ContactListUpdateOne) ClearEvents() *ContactListUpdateOne {
	cluo.mutation.ClearEvents()
	return cluo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (cluo *ContactListUpdateOne) RemoveEventIDs(ids ...string) *ContactListUpdateOne {
	cluo.mutation.RemoveEventIDs(ids...)
	return cluo
}

// RemoveEvents removes "events" edges to Event entities.
func (cluo *ContactListUpdateOne) RemoveEvents(e ...*Event) *ContactListUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cluo.RemoveEventIDs(ids...)
}

// ClearIntegrations clears all "integrations" edges to the Integration entity.
func (cluo *ContactListUpdateOne) ClearIntegrations() *ContactListUpdateOne {
	cluo.mutation.ClearIntegrations()
	return cluo
}

// RemoveIntegrationIDs removes the "integrations" edge to Integration entities by IDs.
func (cluo *ContactListUpdateOne) RemoveIntegrationIDs(ids ...string) *ContactListUpdateOne {
	cluo.mutation.RemoveIntegrationIDs(ids...)
	return cluo
}

// RemoveIntegrations removes "integrations" edges to Integration entities.
func (cluo *ContactListUpdateOne) RemoveIntegrations(i ...*Integration) *ContactListUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cluo.RemoveIntegrationIDs(ids...)
}

// ClearContactListMembers clears all "contact_list_members" edges to the ContactListMembership entity.
func (cluo *ContactListUpdateOne) ClearContactListMembers() *ContactListUpdateOne {
	cluo.mutation.ClearContactListMembers()
	return cluo
}

// RemoveContactListMemberIDs removes the "contact_list_members" edge to ContactListMembership entities by IDs.
func (cluo *ContactListUpdateOne) RemoveContactListMemberIDs(ids ...string) *ContactListUpdateOne {
	cluo.mutation.RemoveContactListMemberIDs(ids...)
	return cluo
}

// RemoveContactListMembers removes "contact_list_members" edges to ContactListMembership entities.
func (cluo *ContactListUpdateOne) RemoveContactListMembers(c ...*ContactListMembership) *ContactListUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cluo.RemoveContactListMemberIDs(ids...)
}

// Where appends a list predicates to the ContactListUpdate builder.
func (cluo *ContactListUpdateOne) Where(ps ...predicate.ContactList) *ContactListUpdateOne {
	cluo.mutation.Where(ps...)
	return cluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cluo *ContactListUpdateOne) Select(field string, fields ...string) *ContactListUpdateOne {
	cluo.fields = append([]string{field}, fields...)
	return cluo
}

// Save executes the query and returns the updated ContactList entity.
func (cluo *ContactListUpdateOne) Save(ctx context.Context) (*ContactList, error) {
	if err := cluo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cluo.sqlSave, cluo.mutation, cluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cluo *ContactListUpdateOne) SaveX(ctx context.Context) *ContactList {
	node, err := cluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cluo *ContactListUpdateOne) Exec(ctx context.Context) error {
	_, err := cluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cluo *ContactListUpdateOne) ExecX(ctx context.Context) {
	if err := cluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cluo *ContactListUpdateOne) defaults() error {
	if _, ok := cluo.mutation.UpdatedAt(); !ok && !cluo.mutation.UpdatedAtCleared() {
		if contactlist.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized contactlist.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := contactlist.UpdateDefaultUpdatedAt()
		cluo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cluo *ContactListUpdateOne) check() error {
	if v, ok := cluo.mutation.OwnerID(); ok {
		if err := contactlist.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "ContactList.owner_id": %w`, err)}
		}
	}
	if v, ok := cluo.mutation.Name(); ok {
		if err := contactlist.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "ContactList.name": %w`, err)}
		}
	}
	if v, ok := cluo.mutation.DisplayName(); ok {
		if err := contactlist.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "ContactList.display_name": %w`, err)}
		}
	}
	return nil
}

func (cluo *ContactListUpdateOne) sqlSave(ctx context.Context) (_node *ContactList, err error) {
	if err := cluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contactlist.Table, contactlist.Columns, sqlgraph.NewFieldSpec(contactlist.FieldID, field.TypeString))
	id, ok := cluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ContactList.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contactlist.FieldID)
		for _, f := range fields {
			if !contactlist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != contactlist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cluo.mutation.CreatedAtCleared() {
		_spec.ClearField(contactlist.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cluo.mutation.UpdatedAt(); ok {
		_spec.SetField(contactlist.FieldUpdatedAt, field.TypeTime, value)
	}
	if cluo.mutation.UpdatedAtCleared() {
		_spec.ClearField(contactlist.FieldUpdatedAt, field.TypeTime)
	}
	if cluo.mutation.CreatedByCleared() {
		_spec.ClearField(contactlist.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cluo.mutation.UpdatedBy(); ok {
		_spec.SetField(contactlist.FieldUpdatedBy, field.TypeString, value)
	}
	if cluo.mutation.UpdatedByCleared() {
		_spec.ClearField(contactlist.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cluo.mutation.DeletedAt(); ok {
		_spec.SetField(contactlist.FieldDeletedAt, field.TypeTime, value)
	}
	if cluo.mutation.DeletedAtCleared() {
		_spec.ClearField(contactlist.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cluo.mutation.DeletedBy(); ok {
		_spec.SetField(contactlist.FieldDeletedBy, field.TypeString, value)
	}
	if cluo.mutation.DeletedByCleared() {
		_spec.ClearField(contactlist.FieldDeletedBy, field.TypeString)
	}
	if value, ok := cluo.mutation.Tags(); ok {
		_spec.SetField(contactlist.FieldTags, field.TypeJSON, value)
	}
	if value, ok := cluo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, contactlist.FieldTags, value)
		})
	}
	if cluo.mutation.TagsCleared() {
		_spec.ClearField(contactlist.FieldTags, field.TypeJSON)
	}
	if value, ok := cluo.mutation.Name(); ok {
		_spec.SetField(contactlist.FieldName, field.TypeString, value)
	}
	if value, ok := cluo.mutation.Visibility(); ok {
		_spec.SetField(contactlist.FieldVisibility, field.TypeString, value)
	}
	if value, ok := cluo.mutation.DisplayName(); ok {
		_spec.SetField(contactlist.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := cluo.mutation.Description(); ok {
		_spec.SetField(contactlist.FieldDescription, field.TypeString, value)
	}
	if cluo.mutation.DescriptionCleared() {
		_spec.ClearField(contactlist.FieldDescription, field.TypeString)
	}
	if cluo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactlist.OwnerTable,
			Columns: []string{contactlist.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = cluo.schemaConfig.ContactList
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactlist.OwnerTable,
			Columns: []string{contactlist.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = cluo.schemaConfig.ContactList
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cluo.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contactlist.ContactsTable,
			Columns: contactlist.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = cluo.schemaConfig.ContactListMembership
		createE := &ContactListMembershipCreate{config: cluo.config, mutation: newContactListMembershipMutation(cluo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.RemovedContactsIDs(); len(nodes) > 0 && !cluo.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contactlist.ContactsTable,
			Columns: contactlist.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = cluo.schemaConfig.ContactListMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ContactListMembershipCreate{config: cluo.config, mutation: newContactListMembershipMutation(cluo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contactlist.ContactsTable,
			Columns: contactlist.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = cluo.schemaConfig.ContactListMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ContactListMembershipCreate{config: cluo.config, mutation: newContactListMembershipMutation(cluo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cluo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactlist.EventsTable,
			Columns: []string{contactlist.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = cluo.schemaConfig.Event
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !cluo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactlist.EventsTable,
			Columns: []string{contactlist.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = cluo.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactlist.EventsTable,
			Columns: []string{contactlist.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = cluo.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cluo.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactlist.IntegrationsTable,
			Columns: []string{contactlist.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = cluo.schemaConfig.Integration
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.RemovedIntegrationsIDs(); len(nodes) > 0 && !cluo.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactlist.IntegrationsTable,
			Columns: []string{contactlist.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = cluo.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactlist.IntegrationsTable,
			Columns: []string{contactlist.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = cluo.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cluo.mutation.ContactListMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contactlist.ContactListMembersTable,
			Columns: []string{contactlist.ContactListMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactlistmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = cluo.schemaConfig.ContactListMembership
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.RemovedContactListMembersIDs(); len(nodes) > 0 && !cluo.mutation.ContactListMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contactlist.ContactListMembersTable,
			Columns: []string{contactlist.ContactListMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactlistmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = cluo.schemaConfig.ContactListMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.ContactListMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contactlist.ContactListMembersTable,
			Columns: []string{contactlist.ContactListMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactlistmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = cluo.schemaConfig.ContactListMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = cluo.schemaConfig.ContactList
	ctx = internal.NewSchemaConfigContext(ctx, cluo.schemaConfig)
	_node = &ContactList{config: cluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cluo.mutation.done = true
	return _node, nil
}
