// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datum-cloud/datum-os/internal/ent/generated/phonenumber"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofile"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilephonenumber"
)

// VendorProfilePhoneNumber is the model entity for the VendorProfilePhoneNumber schema.
type VendorProfilePhoneNumber struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// VendorProfileID holds the value of the "vendor_profile_id" field.
	VendorProfileID string `json:"vendor_profile_id,omitempty"`
	// PhoneNumberID holds the value of the "phone_number_id" field.
	PhoneNumberID string `json:"phone_number_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VendorProfilePhoneNumberQuery when eager-loading is set.
	Edges        VendorProfilePhoneNumberEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VendorProfilePhoneNumberEdges holds the relations/edges for other nodes in the graph.
type VendorProfilePhoneNumberEdges struct {
	// PhoneNumber holds the value of the phone_number edge.
	PhoneNumber *PhoneNumber `json:"phone_number,omitempty"`
	// Profile holds the value of the profile edge.
	Profile *VendorProfile `json:"profile,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedEvents map[string][]*Event
}

// PhoneNumberOrErr returns the PhoneNumber value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VendorProfilePhoneNumberEdges) PhoneNumberOrErr() (*PhoneNumber, error) {
	if e.PhoneNumber != nil {
		return e.PhoneNumber, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: phonenumber.Label}
	}
	return nil, &NotLoadedError{edge: "phone_number"}
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VendorProfilePhoneNumberEdges) ProfileOrErr() (*VendorProfile, error) {
	if e.Profile != nil {
		return e.Profile, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: vendorprofile.Label}
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e VendorProfilePhoneNumberEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[2] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VendorProfilePhoneNumber) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vendorprofilephonenumber.FieldID, vendorprofilephonenumber.FieldCreatedBy, vendorprofilephonenumber.FieldUpdatedBy, vendorprofilephonenumber.FieldMappingID, vendorprofilephonenumber.FieldDeletedBy, vendorprofilephonenumber.FieldVendorProfileID, vendorprofilephonenumber.FieldPhoneNumberID:
			values[i] = new(sql.NullString)
		case vendorprofilephonenumber.FieldCreatedAt, vendorprofilephonenumber.FieldUpdatedAt, vendorprofilephonenumber.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VendorProfilePhoneNumber fields.
func (vppn *VendorProfilePhoneNumber) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vendorprofilephonenumber.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				vppn.ID = value.String
			}
		case vendorprofilephonenumber.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vppn.CreatedAt = value.Time
			}
		case vendorprofilephonenumber.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vppn.UpdatedAt = value.Time
			}
		case vendorprofilephonenumber.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				vppn.CreatedBy = value.String
			}
		case vendorprofilephonenumber.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				vppn.UpdatedBy = value.String
			}
		case vendorprofilephonenumber.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				vppn.MappingID = value.String
			}
		case vendorprofilephonenumber.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				vppn.DeletedAt = value.Time
			}
		case vendorprofilephonenumber.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				vppn.DeletedBy = value.String
			}
		case vendorprofilephonenumber.FieldVendorProfileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vendor_profile_id", values[i])
			} else if value.Valid {
				vppn.VendorProfileID = value.String
			}
		case vendorprofilephonenumber.FieldPhoneNumberID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number_id", values[i])
			} else if value.Valid {
				vppn.PhoneNumberID = value.String
			}
		default:
			vppn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VendorProfilePhoneNumber.
// This includes values selected through modifiers, order, etc.
func (vppn *VendorProfilePhoneNumber) Value(name string) (ent.Value, error) {
	return vppn.selectValues.Get(name)
}

// QueryPhoneNumber queries the "phone_number" edge of the VendorProfilePhoneNumber entity.
func (vppn *VendorProfilePhoneNumber) QueryPhoneNumber() *PhoneNumberQuery {
	return NewVendorProfilePhoneNumberClient(vppn.config).QueryPhoneNumber(vppn)
}

// QueryProfile queries the "profile" edge of the VendorProfilePhoneNumber entity.
func (vppn *VendorProfilePhoneNumber) QueryProfile() *VendorProfileQuery {
	return NewVendorProfilePhoneNumberClient(vppn.config).QueryProfile(vppn)
}

// QueryEvents queries the "events" edge of the VendorProfilePhoneNumber entity.
func (vppn *VendorProfilePhoneNumber) QueryEvents() *EventQuery {
	return NewVendorProfilePhoneNumberClient(vppn.config).QueryEvents(vppn)
}

// Update returns a builder for updating this VendorProfilePhoneNumber.
// Note that you need to call VendorProfilePhoneNumber.Unwrap() before calling this method if this VendorProfilePhoneNumber
// was returned from a transaction, and the transaction was committed or rolled back.
func (vppn *VendorProfilePhoneNumber) Update() *VendorProfilePhoneNumberUpdateOne {
	return NewVendorProfilePhoneNumberClient(vppn.config).UpdateOne(vppn)
}

// Unwrap unwraps the VendorProfilePhoneNumber entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vppn *VendorProfilePhoneNumber) Unwrap() *VendorProfilePhoneNumber {
	_tx, ok := vppn.config.driver.(*txDriver)
	if !ok {
		panic("generated: VendorProfilePhoneNumber is not a transactional entity")
	}
	vppn.config.driver = _tx.drv
	return vppn
}

// String implements the fmt.Stringer.
func (vppn *VendorProfilePhoneNumber) String() string {
	var builder strings.Builder
	builder.WriteString("VendorProfilePhoneNumber(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vppn.ID))
	builder.WriteString("created_at=")
	builder.WriteString(vppn.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(vppn.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(vppn.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(vppn.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(vppn.MappingID)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(vppn.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(vppn.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("vendor_profile_id=")
	builder.WriteString(vppn.VendorProfileID)
	builder.WriteString(", ")
	builder.WriteString("phone_number_id=")
	builder.WriteString(vppn.PhoneNumberID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedEvents returns the Events named value or an error if the edge was not
// loaded in eager-loading with this name.
func (vppn *VendorProfilePhoneNumber) NamedEvents(name string) ([]*Event, error) {
	if vppn.Edges.namedEvents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := vppn.Edges.namedEvents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (vppn *VendorProfilePhoneNumber) appendNamedEvents(name string, edges ...*Event) {
	if vppn.Edges.namedEvents == nil {
		vppn.Edges.namedEvents = make(map[string][]*Event)
	}
	if len(edges) == 0 {
		vppn.Edges.namedEvents[name] = []*Event{}
	} else {
		vppn.Edges.namedEvents[name] = append(vppn.Edges.namedEvents[name], edges...)
	}
}

// VendorProfilePhoneNumbers is a parsable slice of VendorProfilePhoneNumber.
type VendorProfilePhoneNumbers []*VendorProfilePhoneNumber
