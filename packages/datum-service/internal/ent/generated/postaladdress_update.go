// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/event"
	"github.com/datum-cloud/datum-os/internal/ent/generated/organization"
	"github.com/datum-cloud/datum-os/internal/ent/generated/postaladdress"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofile"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilepostaladdress"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// PostalAddressUpdate is the builder for updating PostalAddress entities.
type PostalAddressUpdate struct {
	config
	hooks    []Hook
	mutation *PostalAddressMutation
}

// Where appends a list predicates to the PostalAddressUpdate builder.
func (pau *PostalAddressUpdate) Where(ps ...predicate.PostalAddress) *PostalAddressUpdate {
	pau.mutation.Where(ps...)
	return pau
}

// SetUpdatedAt sets the "updated_at" field.
func (pau *PostalAddressUpdate) SetUpdatedAt(t time.Time) *PostalAddressUpdate {
	pau.mutation.SetUpdatedAt(t)
	return pau
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pau *PostalAddressUpdate) ClearUpdatedAt() *PostalAddressUpdate {
	pau.mutation.ClearUpdatedAt()
	return pau
}

// SetUpdatedBy sets the "updated_by" field.
func (pau *PostalAddressUpdate) SetUpdatedBy(s string) *PostalAddressUpdate {
	pau.mutation.SetUpdatedBy(s)
	return pau
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pau *PostalAddressUpdate) SetNillableUpdatedBy(s *string) *PostalAddressUpdate {
	if s != nil {
		pau.SetUpdatedBy(*s)
	}
	return pau
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pau *PostalAddressUpdate) ClearUpdatedBy() *PostalAddressUpdate {
	pau.mutation.ClearUpdatedBy()
	return pau
}

// SetDeletedAt sets the "deleted_at" field.
func (pau *PostalAddressUpdate) SetDeletedAt(t time.Time) *PostalAddressUpdate {
	pau.mutation.SetDeletedAt(t)
	return pau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pau *PostalAddressUpdate) SetNillableDeletedAt(t *time.Time) *PostalAddressUpdate {
	if t != nil {
		pau.SetDeletedAt(*t)
	}
	return pau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pau *PostalAddressUpdate) ClearDeletedAt() *PostalAddressUpdate {
	pau.mutation.ClearDeletedAt()
	return pau
}

// SetDeletedBy sets the "deleted_by" field.
func (pau *PostalAddressUpdate) SetDeletedBy(s string) *PostalAddressUpdate {
	pau.mutation.SetDeletedBy(s)
	return pau
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pau *PostalAddressUpdate) SetNillableDeletedBy(s *string) *PostalAddressUpdate {
	if s != nil {
		pau.SetDeletedBy(*s)
	}
	return pau
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (pau *PostalAddressUpdate) ClearDeletedBy() *PostalAddressUpdate {
	pau.mutation.ClearDeletedBy()
	return pau
}

// SetTags sets the "tags" field.
func (pau *PostalAddressUpdate) SetTags(s []string) *PostalAddressUpdate {
	pau.mutation.SetTags(s)
	return pau
}

// AppendTags appends s to the "tags" field.
func (pau *PostalAddressUpdate) AppendTags(s []string) *PostalAddressUpdate {
	pau.mutation.AppendTags(s)
	return pau
}

// ClearTags clears the value of the "tags" field.
func (pau *PostalAddressUpdate) ClearTags() *PostalAddressUpdate {
	pau.mutation.ClearTags()
	return pau
}

// SetOwnerID sets the "owner_id" field.
func (pau *PostalAddressUpdate) SetOwnerID(s string) *PostalAddressUpdate {
	pau.mutation.SetOwnerID(s)
	return pau
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pau *PostalAddressUpdate) SetNillableOwnerID(s *string) *PostalAddressUpdate {
	if s != nil {
		pau.SetOwnerID(*s)
	}
	return pau
}

// ClearOwnerID clears the value of the "owner_id" field.
func (pau *PostalAddressUpdate) ClearOwnerID() *PostalAddressUpdate {
	pau.mutation.ClearOwnerID()
	return pau
}

// SetRegionCode sets the "region_code" field.
func (pau *PostalAddressUpdate) SetRegionCode(s string) *PostalAddressUpdate {
	pau.mutation.SetRegionCode(s)
	return pau
}

// SetNillableRegionCode sets the "region_code" field if the given value is not nil.
func (pau *PostalAddressUpdate) SetNillableRegionCode(s *string) *PostalAddressUpdate {
	if s != nil {
		pau.SetRegionCode(*s)
	}
	return pau
}

// SetLanguageCode sets the "language_code" field.
func (pau *PostalAddressUpdate) SetLanguageCode(s string) *PostalAddressUpdate {
	pau.mutation.SetLanguageCode(s)
	return pau
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (pau *PostalAddressUpdate) SetNillableLanguageCode(s *string) *PostalAddressUpdate {
	if s != nil {
		pau.SetLanguageCode(*s)
	}
	return pau
}

// ClearLanguageCode clears the value of the "language_code" field.
func (pau *PostalAddressUpdate) ClearLanguageCode() *PostalAddressUpdate {
	pau.mutation.ClearLanguageCode()
	return pau
}

// SetPostalCode sets the "postal_code" field.
func (pau *PostalAddressUpdate) SetPostalCode(s string) *PostalAddressUpdate {
	pau.mutation.SetPostalCode(s)
	return pau
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (pau *PostalAddressUpdate) SetNillablePostalCode(s *string) *PostalAddressUpdate {
	if s != nil {
		pau.SetPostalCode(*s)
	}
	return pau
}

// ClearPostalCode clears the value of the "postal_code" field.
func (pau *PostalAddressUpdate) ClearPostalCode() *PostalAddressUpdate {
	pau.mutation.ClearPostalCode()
	return pau
}

// SetSortingCode sets the "sorting_code" field.
func (pau *PostalAddressUpdate) SetSortingCode(s string) *PostalAddressUpdate {
	pau.mutation.SetSortingCode(s)
	return pau
}

// SetNillableSortingCode sets the "sorting_code" field if the given value is not nil.
func (pau *PostalAddressUpdate) SetNillableSortingCode(s *string) *PostalAddressUpdate {
	if s != nil {
		pau.SetSortingCode(*s)
	}
	return pau
}

// ClearSortingCode clears the value of the "sorting_code" field.
func (pau *PostalAddressUpdate) ClearSortingCode() *PostalAddressUpdate {
	pau.mutation.ClearSortingCode()
	return pau
}

// SetAdministrativeArea sets the "administrative_area" field.
func (pau *PostalAddressUpdate) SetAdministrativeArea(s string) *PostalAddressUpdate {
	pau.mutation.SetAdministrativeArea(s)
	return pau
}

// SetNillableAdministrativeArea sets the "administrative_area" field if the given value is not nil.
func (pau *PostalAddressUpdate) SetNillableAdministrativeArea(s *string) *PostalAddressUpdate {
	if s != nil {
		pau.SetAdministrativeArea(*s)
	}
	return pau
}

// ClearAdministrativeArea clears the value of the "administrative_area" field.
func (pau *PostalAddressUpdate) ClearAdministrativeArea() *PostalAddressUpdate {
	pau.mutation.ClearAdministrativeArea()
	return pau
}

// SetLocality sets the "locality" field.
func (pau *PostalAddressUpdate) SetLocality(s string) *PostalAddressUpdate {
	pau.mutation.SetLocality(s)
	return pau
}

// SetNillableLocality sets the "locality" field if the given value is not nil.
func (pau *PostalAddressUpdate) SetNillableLocality(s *string) *PostalAddressUpdate {
	if s != nil {
		pau.SetLocality(*s)
	}
	return pau
}

// ClearLocality clears the value of the "locality" field.
func (pau *PostalAddressUpdate) ClearLocality() *PostalAddressUpdate {
	pau.mutation.ClearLocality()
	return pau
}

// SetSublocality sets the "sublocality" field.
func (pau *PostalAddressUpdate) SetSublocality(s string) *PostalAddressUpdate {
	pau.mutation.SetSublocality(s)
	return pau
}

// SetNillableSublocality sets the "sublocality" field if the given value is not nil.
func (pau *PostalAddressUpdate) SetNillableSublocality(s *string) *PostalAddressUpdate {
	if s != nil {
		pau.SetSublocality(*s)
	}
	return pau
}

// ClearSublocality clears the value of the "sublocality" field.
func (pau *PostalAddressUpdate) ClearSublocality() *PostalAddressUpdate {
	pau.mutation.ClearSublocality()
	return pau
}

// SetAddressLines sets the "address_lines" field.
func (pau *PostalAddressUpdate) SetAddressLines(s []string) *PostalAddressUpdate {
	pau.mutation.SetAddressLines(s)
	return pau
}

// AppendAddressLines appends s to the "address_lines" field.
func (pau *PostalAddressUpdate) AppendAddressLines(s []string) *PostalAddressUpdate {
	pau.mutation.AppendAddressLines(s)
	return pau
}

// SetRecipients sets the "recipients" field.
func (pau *PostalAddressUpdate) SetRecipients(s []string) *PostalAddressUpdate {
	pau.mutation.SetRecipients(s)
	return pau
}

// AppendRecipients appends s to the "recipients" field.
func (pau *PostalAddressUpdate) AppendRecipients(s []string) *PostalAddressUpdate {
	pau.mutation.AppendRecipients(s)
	return pau
}

// SetOrganization sets the "organization" field.
func (pau *PostalAddressUpdate) SetOrganization(s string) *PostalAddressUpdate {
	pau.mutation.SetOrganization(s)
	return pau
}

// SetNillableOrganization sets the "organization" field if the given value is not nil.
func (pau *PostalAddressUpdate) SetNillableOrganization(s *string) *PostalAddressUpdate {
	if s != nil {
		pau.SetOrganization(*s)
	}
	return pau
}

// ClearOrganization clears the value of the "organization" field.
func (pau *PostalAddressUpdate) ClearOrganization() *PostalAddressUpdate {
	pau.mutation.ClearOrganization()
	return pau
}

// SetOwner sets the "owner" edge to the Organization entity.
func (pau *PostalAddressUpdate) SetOwner(o *Organization) *PostalAddressUpdate {
	return pau.SetOwnerID(o.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (pau *PostalAddressUpdate) AddEventIDs(ids ...string) *PostalAddressUpdate {
	pau.mutation.AddEventIDs(ids...)
	return pau
}

// AddEvents adds the "events" edges to the Event entity.
func (pau *PostalAddressUpdate) AddEvents(e ...*Event) *PostalAddressUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pau.AddEventIDs(ids...)
}

// AddProfileIDs adds the "profile" edge to the VendorProfile entity by IDs.
func (pau *PostalAddressUpdate) AddProfileIDs(ids ...string) *PostalAddressUpdate {
	pau.mutation.AddProfileIDs(ids...)
	return pau
}

// AddProfile adds the "profile" edges to the VendorProfile entity.
func (pau *PostalAddressUpdate) AddProfile(v ...*VendorProfile) *PostalAddressUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pau.AddProfileIDs(ids...)
}

// AddVendorProfilePostalAddressIDs adds the "vendor_profile_postal_addresses" edge to the VendorProfilePostalAddress entity by IDs.
func (pau *PostalAddressUpdate) AddVendorProfilePostalAddressIDs(ids ...string) *PostalAddressUpdate {
	pau.mutation.AddVendorProfilePostalAddressIDs(ids...)
	return pau
}

// AddVendorProfilePostalAddresses adds the "vendor_profile_postal_addresses" edges to the VendorProfilePostalAddress entity.
func (pau *PostalAddressUpdate) AddVendorProfilePostalAddresses(v ...*VendorProfilePostalAddress) *PostalAddressUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pau.AddVendorProfilePostalAddressIDs(ids...)
}

// Mutation returns the PostalAddressMutation object of the builder.
func (pau *PostalAddressUpdate) Mutation() *PostalAddressMutation {
	return pau.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (pau *PostalAddressUpdate) ClearOwner() *PostalAddressUpdate {
	pau.mutation.ClearOwner()
	return pau
}

// ClearEvents clears all "events" edges to the Event entity.
func (pau *PostalAddressUpdate) ClearEvents() *PostalAddressUpdate {
	pau.mutation.ClearEvents()
	return pau
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (pau *PostalAddressUpdate) RemoveEventIDs(ids ...string) *PostalAddressUpdate {
	pau.mutation.RemoveEventIDs(ids...)
	return pau
}

// RemoveEvents removes "events" edges to Event entities.
func (pau *PostalAddressUpdate) RemoveEvents(e ...*Event) *PostalAddressUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pau.RemoveEventIDs(ids...)
}

// ClearProfile clears all "profile" edges to the VendorProfile entity.
func (pau *PostalAddressUpdate) ClearProfile() *PostalAddressUpdate {
	pau.mutation.ClearProfile()
	return pau
}

// RemoveProfileIDs removes the "profile" edge to VendorProfile entities by IDs.
func (pau *PostalAddressUpdate) RemoveProfileIDs(ids ...string) *PostalAddressUpdate {
	pau.mutation.RemoveProfileIDs(ids...)
	return pau
}

// RemoveProfile removes "profile" edges to VendorProfile entities.
func (pau *PostalAddressUpdate) RemoveProfile(v ...*VendorProfile) *PostalAddressUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pau.RemoveProfileIDs(ids...)
}

// ClearVendorProfilePostalAddresses clears all "vendor_profile_postal_addresses" edges to the VendorProfilePostalAddress entity.
func (pau *PostalAddressUpdate) ClearVendorProfilePostalAddresses() *PostalAddressUpdate {
	pau.mutation.ClearVendorProfilePostalAddresses()
	return pau
}

// RemoveVendorProfilePostalAddressIDs removes the "vendor_profile_postal_addresses" edge to VendorProfilePostalAddress entities by IDs.
func (pau *PostalAddressUpdate) RemoveVendorProfilePostalAddressIDs(ids ...string) *PostalAddressUpdate {
	pau.mutation.RemoveVendorProfilePostalAddressIDs(ids...)
	return pau
}

// RemoveVendorProfilePostalAddresses removes "vendor_profile_postal_addresses" edges to VendorProfilePostalAddress entities.
func (pau *PostalAddressUpdate) RemoveVendorProfilePostalAddresses(v ...*VendorProfilePostalAddress) *PostalAddressUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pau.RemoveVendorProfilePostalAddressIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pau *PostalAddressUpdate) Save(ctx context.Context) (int, error) {
	if err := pau.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pau.sqlSave, pau.mutation, pau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pau *PostalAddressUpdate) SaveX(ctx context.Context) int {
	affected, err := pau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pau *PostalAddressUpdate) Exec(ctx context.Context) error {
	_, err := pau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pau *PostalAddressUpdate) ExecX(ctx context.Context) {
	if err := pau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pau *PostalAddressUpdate) defaults() error {
	if _, ok := pau.mutation.UpdatedAt(); !ok && !pau.mutation.UpdatedAtCleared() {
		if postaladdress.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized postaladdress.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := postaladdress.UpdateDefaultUpdatedAt()
		pau.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pau *PostalAddressUpdate) check() error {
	if v, ok := pau.mutation.OwnerID(); ok {
		if err := postaladdress.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.owner_id": %w`, err)}
		}
	}
	if v, ok := pau.mutation.RegionCode(); ok {
		if err := postaladdress.RegionCodeValidator(v); err != nil {
			return &ValidationError{Name: "region_code", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.region_code": %w`, err)}
		}
	}
	if v, ok := pau.mutation.LanguageCode(); ok {
		if err := postaladdress.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.language_code": %w`, err)}
		}
	}
	if v, ok := pau.mutation.PostalCode(); ok {
		if err := postaladdress.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.postal_code": %w`, err)}
		}
	}
	if v, ok := pau.mutation.SortingCode(); ok {
		if err := postaladdress.SortingCodeValidator(v); err != nil {
			return &ValidationError{Name: "sorting_code", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.sorting_code": %w`, err)}
		}
	}
	if v, ok := pau.mutation.AdministrativeArea(); ok {
		if err := postaladdress.AdministrativeAreaValidator(v); err != nil {
			return &ValidationError{Name: "administrative_area", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.administrative_area": %w`, err)}
		}
	}
	if v, ok := pau.mutation.Locality(); ok {
		if err := postaladdress.LocalityValidator(v); err != nil {
			return &ValidationError{Name: "locality", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.locality": %w`, err)}
		}
	}
	if v, ok := pau.mutation.Sublocality(); ok {
		if err := postaladdress.SublocalityValidator(v); err != nil {
			return &ValidationError{Name: "sublocality", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.sublocality": %w`, err)}
		}
	}
	if v, ok := pau.mutation.Organization(); ok {
		if err := postaladdress.OrganizationValidator(v); err != nil {
			return &ValidationError{Name: "organization", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.organization": %w`, err)}
		}
	}
	return nil
}

func (pau *PostalAddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(postaladdress.Table, postaladdress.Columns, sqlgraph.NewFieldSpec(postaladdress.FieldID, field.TypeString))
	if ps := pau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pau.mutation.CreatedAtCleared() {
		_spec.ClearField(postaladdress.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pau.mutation.UpdatedAt(); ok {
		_spec.SetField(postaladdress.FieldUpdatedAt, field.TypeTime, value)
	}
	if pau.mutation.UpdatedAtCleared() {
		_spec.ClearField(postaladdress.FieldUpdatedAt, field.TypeTime)
	}
	if pau.mutation.CreatedByCleared() {
		_spec.ClearField(postaladdress.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pau.mutation.UpdatedBy(); ok {
		_spec.SetField(postaladdress.FieldUpdatedBy, field.TypeString, value)
	}
	if pau.mutation.UpdatedByCleared() {
		_spec.ClearField(postaladdress.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pau.mutation.DeletedAt(); ok {
		_spec.SetField(postaladdress.FieldDeletedAt, field.TypeTime, value)
	}
	if pau.mutation.DeletedAtCleared() {
		_spec.ClearField(postaladdress.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pau.mutation.DeletedBy(); ok {
		_spec.SetField(postaladdress.FieldDeletedBy, field.TypeString, value)
	}
	if pau.mutation.DeletedByCleared() {
		_spec.ClearField(postaladdress.FieldDeletedBy, field.TypeString)
	}
	if value, ok := pau.mutation.Tags(); ok {
		_spec.SetField(postaladdress.FieldTags, field.TypeJSON, value)
	}
	if value, ok := pau.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, postaladdress.FieldTags, value)
		})
	}
	if pau.mutation.TagsCleared() {
		_spec.ClearField(postaladdress.FieldTags, field.TypeJSON)
	}
	if value, ok := pau.mutation.RegionCode(); ok {
		_spec.SetField(postaladdress.FieldRegionCode, field.TypeString, value)
	}
	if value, ok := pau.mutation.LanguageCode(); ok {
		_spec.SetField(postaladdress.FieldLanguageCode, field.TypeString, value)
	}
	if pau.mutation.LanguageCodeCleared() {
		_spec.ClearField(postaladdress.FieldLanguageCode, field.TypeString)
	}
	if value, ok := pau.mutation.PostalCode(); ok {
		_spec.SetField(postaladdress.FieldPostalCode, field.TypeString, value)
	}
	if pau.mutation.PostalCodeCleared() {
		_spec.ClearField(postaladdress.FieldPostalCode, field.TypeString)
	}
	if value, ok := pau.mutation.SortingCode(); ok {
		_spec.SetField(postaladdress.FieldSortingCode, field.TypeString, value)
	}
	if pau.mutation.SortingCodeCleared() {
		_spec.ClearField(postaladdress.FieldSortingCode, field.TypeString)
	}
	if value, ok := pau.mutation.AdministrativeArea(); ok {
		_spec.SetField(postaladdress.FieldAdministrativeArea, field.TypeString, value)
	}
	if pau.mutation.AdministrativeAreaCleared() {
		_spec.ClearField(postaladdress.FieldAdministrativeArea, field.TypeString)
	}
	if value, ok := pau.mutation.Locality(); ok {
		_spec.SetField(postaladdress.FieldLocality, field.TypeString, value)
	}
	if pau.mutation.LocalityCleared() {
		_spec.ClearField(postaladdress.FieldLocality, field.TypeString)
	}
	if value, ok := pau.mutation.Sublocality(); ok {
		_spec.SetField(postaladdress.FieldSublocality, field.TypeString, value)
	}
	if pau.mutation.SublocalityCleared() {
		_spec.ClearField(postaladdress.FieldSublocality, field.TypeString)
	}
	if value, ok := pau.mutation.AddressLines(); ok {
		_spec.SetField(postaladdress.FieldAddressLines, field.TypeJSON, value)
	}
	if value, ok := pau.mutation.AppendedAddressLines(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, postaladdress.FieldAddressLines, value)
		})
	}
	if value, ok := pau.mutation.Recipients(); ok {
		_spec.SetField(postaladdress.FieldRecipients, field.TypeJSON, value)
	}
	if value, ok := pau.mutation.AppendedRecipients(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, postaladdress.FieldRecipients, value)
		})
	}
	if value, ok := pau.mutation.Organization(); ok {
		_spec.SetField(postaladdress.FieldOrganization, field.TypeString, value)
	}
	if pau.mutation.OrganizationCleared() {
		_spec.ClearField(postaladdress.FieldOrganization, field.TypeString)
	}
	if pau.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postaladdress.OwnerTable,
			Columns: []string{postaladdress.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = pau.schemaConfig.PostalAddress
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pau.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postaladdress.OwnerTable,
			Columns: []string{postaladdress.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = pau.schemaConfig.PostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pau.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postaladdress.EventsTable,
			Columns: []string{postaladdress.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = pau.schemaConfig.Event
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pau.mutation.RemovedEventsIDs(); len(nodes) > 0 && !pau.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postaladdress.EventsTable,
			Columns: []string{postaladdress.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = pau.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pau.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postaladdress.EventsTable,
			Columns: []string{postaladdress.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = pau.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pau.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   postaladdress.ProfileTable,
			Columns: postaladdress.ProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = pau.schemaConfig.VendorProfilePostalAddress
		createE := &VendorProfilePostalAddressCreate{config: pau.config, mutation: newVendorProfilePostalAddressMutation(pau.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pau.mutation.RemovedProfileIDs(); len(nodes) > 0 && !pau.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   postaladdress.ProfileTable,
			Columns: postaladdress.ProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = pau.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VendorProfilePostalAddressCreate{config: pau.config, mutation: newVendorProfilePostalAddressMutation(pau.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pau.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   postaladdress.ProfileTable,
			Columns: postaladdress.ProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = pau.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VendorProfilePostalAddressCreate{config: pau.config, mutation: newVendorProfilePostalAddressMutation(pau.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pau.mutation.VendorProfilePostalAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   postaladdress.VendorProfilePostalAddressesTable,
			Columns: []string{postaladdress.VendorProfilePostalAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilepostaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = pau.schemaConfig.VendorProfilePostalAddress
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pau.mutation.RemovedVendorProfilePostalAddressesIDs(); len(nodes) > 0 && !pau.mutation.VendorProfilePostalAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   postaladdress.VendorProfilePostalAddressesTable,
			Columns: []string{postaladdress.VendorProfilePostalAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilepostaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = pau.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pau.mutation.VendorProfilePostalAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   postaladdress.VendorProfilePostalAddressesTable,
			Columns: []string{postaladdress.VendorProfilePostalAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilepostaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = pau.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = pau.schemaConfig.PostalAddress
	ctx = internal.NewSchemaConfigContext(ctx, pau.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, pau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postaladdress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pau.mutation.done = true
	return n, nil
}

// PostalAddressUpdateOne is the builder for updating a single PostalAddress entity.
type PostalAddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostalAddressMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (pauo *PostalAddressUpdateOne) SetUpdatedAt(t time.Time) *PostalAddressUpdateOne {
	pauo.mutation.SetUpdatedAt(t)
	return pauo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pauo *PostalAddressUpdateOne) ClearUpdatedAt() *PostalAddressUpdateOne {
	pauo.mutation.ClearUpdatedAt()
	return pauo
}

// SetUpdatedBy sets the "updated_by" field.
func (pauo *PostalAddressUpdateOne) SetUpdatedBy(s string) *PostalAddressUpdateOne {
	pauo.mutation.SetUpdatedBy(s)
	return pauo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pauo *PostalAddressUpdateOne) SetNillableUpdatedBy(s *string) *PostalAddressUpdateOne {
	if s != nil {
		pauo.SetUpdatedBy(*s)
	}
	return pauo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pauo *PostalAddressUpdateOne) ClearUpdatedBy() *PostalAddressUpdateOne {
	pauo.mutation.ClearUpdatedBy()
	return pauo
}

// SetDeletedAt sets the "deleted_at" field.
func (pauo *PostalAddressUpdateOne) SetDeletedAt(t time.Time) *PostalAddressUpdateOne {
	pauo.mutation.SetDeletedAt(t)
	return pauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pauo *PostalAddressUpdateOne) SetNillableDeletedAt(t *time.Time) *PostalAddressUpdateOne {
	if t != nil {
		pauo.SetDeletedAt(*t)
	}
	return pauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pauo *PostalAddressUpdateOne) ClearDeletedAt() *PostalAddressUpdateOne {
	pauo.mutation.ClearDeletedAt()
	return pauo
}

// SetDeletedBy sets the "deleted_by" field.
func (pauo *PostalAddressUpdateOne) SetDeletedBy(s string) *PostalAddressUpdateOne {
	pauo.mutation.SetDeletedBy(s)
	return pauo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pauo *PostalAddressUpdateOne) SetNillableDeletedBy(s *string) *PostalAddressUpdateOne {
	if s != nil {
		pauo.SetDeletedBy(*s)
	}
	return pauo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (pauo *PostalAddressUpdateOne) ClearDeletedBy() *PostalAddressUpdateOne {
	pauo.mutation.ClearDeletedBy()
	return pauo
}

// SetTags sets the "tags" field.
func (pauo *PostalAddressUpdateOne) SetTags(s []string) *PostalAddressUpdateOne {
	pauo.mutation.SetTags(s)
	return pauo
}

// AppendTags appends s to the "tags" field.
func (pauo *PostalAddressUpdateOne) AppendTags(s []string) *PostalAddressUpdateOne {
	pauo.mutation.AppendTags(s)
	return pauo
}

// ClearTags clears the value of the "tags" field.
func (pauo *PostalAddressUpdateOne) ClearTags() *PostalAddressUpdateOne {
	pauo.mutation.ClearTags()
	return pauo
}

// SetOwnerID sets the "owner_id" field.
func (pauo *PostalAddressUpdateOne) SetOwnerID(s string) *PostalAddressUpdateOne {
	pauo.mutation.SetOwnerID(s)
	return pauo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pauo *PostalAddressUpdateOne) SetNillableOwnerID(s *string) *PostalAddressUpdateOne {
	if s != nil {
		pauo.SetOwnerID(*s)
	}
	return pauo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (pauo *PostalAddressUpdateOne) ClearOwnerID() *PostalAddressUpdateOne {
	pauo.mutation.ClearOwnerID()
	return pauo
}

// SetRegionCode sets the "region_code" field.
func (pauo *PostalAddressUpdateOne) SetRegionCode(s string) *PostalAddressUpdateOne {
	pauo.mutation.SetRegionCode(s)
	return pauo
}

// SetNillableRegionCode sets the "region_code" field if the given value is not nil.
func (pauo *PostalAddressUpdateOne) SetNillableRegionCode(s *string) *PostalAddressUpdateOne {
	if s != nil {
		pauo.SetRegionCode(*s)
	}
	return pauo
}

// SetLanguageCode sets the "language_code" field.
func (pauo *PostalAddressUpdateOne) SetLanguageCode(s string) *PostalAddressUpdateOne {
	pauo.mutation.SetLanguageCode(s)
	return pauo
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (pauo *PostalAddressUpdateOne) SetNillableLanguageCode(s *string) *PostalAddressUpdateOne {
	if s != nil {
		pauo.SetLanguageCode(*s)
	}
	return pauo
}

// ClearLanguageCode clears the value of the "language_code" field.
func (pauo *PostalAddressUpdateOne) ClearLanguageCode() *PostalAddressUpdateOne {
	pauo.mutation.ClearLanguageCode()
	return pauo
}

// SetPostalCode sets the "postal_code" field.
func (pauo *PostalAddressUpdateOne) SetPostalCode(s string) *PostalAddressUpdateOne {
	pauo.mutation.SetPostalCode(s)
	return pauo
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (pauo *PostalAddressUpdateOne) SetNillablePostalCode(s *string) *PostalAddressUpdateOne {
	if s != nil {
		pauo.SetPostalCode(*s)
	}
	return pauo
}

// ClearPostalCode clears the value of the "postal_code" field.
func (pauo *PostalAddressUpdateOne) ClearPostalCode() *PostalAddressUpdateOne {
	pauo.mutation.ClearPostalCode()
	return pauo
}

// SetSortingCode sets the "sorting_code" field.
func (pauo *PostalAddressUpdateOne) SetSortingCode(s string) *PostalAddressUpdateOne {
	pauo.mutation.SetSortingCode(s)
	return pauo
}

// SetNillableSortingCode sets the "sorting_code" field if the given value is not nil.
func (pauo *PostalAddressUpdateOne) SetNillableSortingCode(s *string) *PostalAddressUpdateOne {
	if s != nil {
		pauo.SetSortingCode(*s)
	}
	return pauo
}

// ClearSortingCode clears the value of the "sorting_code" field.
func (pauo *PostalAddressUpdateOne) ClearSortingCode() *PostalAddressUpdateOne {
	pauo.mutation.ClearSortingCode()
	return pauo
}

// SetAdministrativeArea sets the "administrative_area" field.
func (pauo *PostalAddressUpdateOne) SetAdministrativeArea(s string) *PostalAddressUpdateOne {
	pauo.mutation.SetAdministrativeArea(s)
	return pauo
}

// SetNillableAdministrativeArea sets the "administrative_area" field if the given value is not nil.
func (pauo *PostalAddressUpdateOne) SetNillableAdministrativeArea(s *string) *PostalAddressUpdateOne {
	if s != nil {
		pauo.SetAdministrativeArea(*s)
	}
	return pauo
}

// ClearAdministrativeArea clears the value of the "administrative_area" field.
func (pauo *PostalAddressUpdateOne) ClearAdministrativeArea() *PostalAddressUpdateOne {
	pauo.mutation.ClearAdministrativeArea()
	return pauo
}

// SetLocality sets the "locality" field.
func (pauo *PostalAddressUpdateOne) SetLocality(s string) *PostalAddressUpdateOne {
	pauo.mutation.SetLocality(s)
	return pauo
}

// SetNillableLocality sets the "locality" field if the given value is not nil.
func (pauo *PostalAddressUpdateOne) SetNillableLocality(s *string) *PostalAddressUpdateOne {
	if s != nil {
		pauo.SetLocality(*s)
	}
	return pauo
}

// ClearLocality clears the value of the "locality" field.
func (pauo *PostalAddressUpdateOne) ClearLocality() *PostalAddressUpdateOne {
	pauo.mutation.ClearLocality()
	return pauo
}

// SetSublocality sets the "sublocality" field.
func (pauo *PostalAddressUpdateOne) SetSublocality(s string) *PostalAddressUpdateOne {
	pauo.mutation.SetSublocality(s)
	return pauo
}

// SetNillableSublocality sets the "sublocality" field if the given value is not nil.
func (pauo *PostalAddressUpdateOne) SetNillableSublocality(s *string) *PostalAddressUpdateOne {
	if s != nil {
		pauo.SetSublocality(*s)
	}
	return pauo
}

// ClearSublocality clears the value of the "sublocality" field.
func (pauo *PostalAddressUpdateOne) ClearSublocality() *PostalAddressUpdateOne {
	pauo.mutation.ClearSublocality()
	return pauo
}

// SetAddressLines sets the "address_lines" field.
func (pauo *PostalAddressUpdateOne) SetAddressLines(s []string) *PostalAddressUpdateOne {
	pauo.mutation.SetAddressLines(s)
	return pauo
}

// AppendAddressLines appends s to the "address_lines" field.
func (pauo *PostalAddressUpdateOne) AppendAddressLines(s []string) *PostalAddressUpdateOne {
	pauo.mutation.AppendAddressLines(s)
	return pauo
}

// SetRecipients sets the "recipients" field.
func (pauo *PostalAddressUpdateOne) SetRecipients(s []string) *PostalAddressUpdateOne {
	pauo.mutation.SetRecipients(s)
	return pauo
}

// AppendRecipients appends s to the "recipients" field.
func (pauo *PostalAddressUpdateOne) AppendRecipients(s []string) *PostalAddressUpdateOne {
	pauo.mutation.AppendRecipients(s)
	return pauo
}

// SetOrganization sets the "organization" field.
func (pauo *PostalAddressUpdateOne) SetOrganization(s string) *PostalAddressUpdateOne {
	pauo.mutation.SetOrganization(s)
	return pauo
}

// SetNillableOrganization sets the "organization" field if the given value is not nil.
func (pauo *PostalAddressUpdateOne) SetNillableOrganization(s *string) *PostalAddressUpdateOne {
	if s != nil {
		pauo.SetOrganization(*s)
	}
	return pauo
}

// ClearOrganization clears the value of the "organization" field.
func (pauo *PostalAddressUpdateOne) ClearOrganization() *PostalAddressUpdateOne {
	pauo.mutation.ClearOrganization()
	return pauo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (pauo *PostalAddressUpdateOne) SetOwner(o *Organization) *PostalAddressUpdateOne {
	return pauo.SetOwnerID(o.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (pauo *PostalAddressUpdateOne) AddEventIDs(ids ...string) *PostalAddressUpdateOne {
	pauo.mutation.AddEventIDs(ids...)
	return pauo
}

// AddEvents adds the "events" edges to the Event entity.
func (pauo *PostalAddressUpdateOne) AddEvents(e ...*Event) *PostalAddressUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pauo.AddEventIDs(ids...)
}

// AddProfileIDs adds the "profile" edge to the VendorProfile entity by IDs.
func (pauo *PostalAddressUpdateOne) AddProfileIDs(ids ...string) *PostalAddressUpdateOne {
	pauo.mutation.AddProfileIDs(ids...)
	return pauo
}

// AddProfile adds the "profile" edges to the VendorProfile entity.
func (pauo *PostalAddressUpdateOne) AddProfile(v ...*VendorProfile) *PostalAddressUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pauo.AddProfileIDs(ids...)
}

// AddVendorProfilePostalAddressIDs adds the "vendor_profile_postal_addresses" edge to the VendorProfilePostalAddress entity by IDs.
func (pauo *PostalAddressUpdateOne) AddVendorProfilePostalAddressIDs(ids ...string) *PostalAddressUpdateOne {
	pauo.mutation.AddVendorProfilePostalAddressIDs(ids...)
	return pauo
}

// AddVendorProfilePostalAddresses adds the "vendor_profile_postal_addresses" edges to the VendorProfilePostalAddress entity.
func (pauo *PostalAddressUpdateOne) AddVendorProfilePostalAddresses(v ...*VendorProfilePostalAddress) *PostalAddressUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pauo.AddVendorProfilePostalAddressIDs(ids...)
}

// Mutation returns the PostalAddressMutation object of the builder.
func (pauo *PostalAddressUpdateOne) Mutation() *PostalAddressMutation {
	return pauo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (pauo *PostalAddressUpdateOne) ClearOwner() *PostalAddressUpdateOne {
	pauo.mutation.ClearOwner()
	return pauo
}

// ClearEvents clears all "events" edges to the Event entity.
func (pauo *PostalAddressUpdateOne) ClearEvents() *PostalAddressUpdateOne {
	pauo.mutation.ClearEvents()
	return pauo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (pauo *PostalAddressUpdateOne) RemoveEventIDs(ids ...string) *PostalAddressUpdateOne {
	pauo.mutation.RemoveEventIDs(ids...)
	return pauo
}

// RemoveEvents removes "events" edges to Event entities.
func (pauo *PostalAddressUpdateOne) RemoveEvents(e ...*Event) *PostalAddressUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pauo.RemoveEventIDs(ids...)
}

// ClearProfile clears all "profile" edges to the VendorProfile entity.
func (pauo *PostalAddressUpdateOne) ClearProfile() *PostalAddressUpdateOne {
	pauo.mutation.ClearProfile()
	return pauo
}

// RemoveProfileIDs removes the "profile" edge to VendorProfile entities by IDs.
func (pauo *PostalAddressUpdateOne) RemoveProfileIDs(ids ...string) *PostalAddressUpdateOne {
	pauo.mutation.RemoveProfileIDs(ids...)
	return pauo
}

// RemoveProfile removes "profile" edges to VendorProfile entities.
func (pauo *PostalAddressUpdateOne) RemoveProfile(v ...*VendorProfile) *PostalAddressUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pauo.RemoveProfileIDs(ids...)
}

// ClearVendorProfilePostalAddresses clears all "vendor_profile_postal_addresses" edges to the VendorProfilePostalAddress entity.
func (pauo *PostalAddressUpdateOne) ClearVendorProfilePostalAddresses() *PostalAddressUpdateOne {
	pauo.mutation.ClearVendorProfilePostalAddresses()
	return pauo
}

// RemoveVendorProfilePostalAddressIDs removes the "vendor_profile_postal_addresses" edge to VendorProfilePostalAddress entities by IDs.
func (pauo *PostalAddressUpdateOne) RemoveVendorProfilePostalAddressIDs(ids ...string) *PostalAddressUpdateOne {
	pauo.mutation.RemoveVendorProfilePostalAddressIDs(ids...)
	return pauo
}

// RemoveVendorProfilePostalAddresses removes "vendor_profile_postal_addresses" edges to VendorProfilePostalAddress entities.
func (pauo *PostalAddressUpdateOne) RemoveVendorProfilePostalAddresses(v ...*VendorProfilePostalAddress) *PostalAddressUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pauo.RemoveVendorProfilePostalAddressIDs(ids...)
}

// Where appends a list predicates to the PostalAddressUpdate builder.
func (pauo *PostalAddressUpdateOne) Where(ps ...predicate.PostalAddress) *PostalAddressUpdateOne {
	pauo.mutation.Where(ps...)
	return pauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pauo *PostalAddressUpdateOne) Select(field string, fields ...string) *PostalAddressUpdateOne {
	pauo.fields = append([]string{field}, fields...)
	return pauo
}

// Save executes the query and returns the updated PostalAddress entity.
func (pauo *PostalAddressUpdateOne) Save(ctx context.Context) (*PostalAddress, error) {
	if err := pauo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pauo.sqlSave, pauo.mutation, pauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pauo *PostalAddressUpdateOne) SaveX(ctx context.Context) *PostalAddress {
	node, err := pauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pauo *PostalAddressUpdateOne) Exec(ctx context.Context) error {
	_, err := pauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pauo *PostalAddressUpdateOne) ExecX(ctx context.Context) {
	if err := pauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pauo *PostalAddressUpdateOne) defaults() error {
	if _, ok := pauo.mutation.UpdatedAt(); !ok && !pauo.mutation.UpdatedAtCleared() {
		if postaladdress.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized postaladdress.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := postaladdress.UpdateDefaultUpdatedAt()
		pauo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pauo *PostalAddressUpdateOne) check() error {
	if v, ok := pauo.mutation.OwnerID(); ok {
		if err := postaladdress.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.owner_id": %w`, err)}
		}
	}
	if v, ok := pauo.mutation.RegionCode(); ok {
		if err := postaladdress.RegionCodeValidator(v); err != nil {
			return &ValidationError{Name: "region_code", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.region_code": %w`, err)}
		}
	}
	if v, ok := pauo.mutation.LanguageCode(); ok {
		if err := postaladdress.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.language_code": %w`, err)}
		}
	}
	if v, ok := pauo.mutation.PostalCode(); ok {
		if err := postaladdress.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.postal_code": %w`, err)}
		}
	}
	if v, ok := pauo.mutation.SortingCode(); ok {
		if err := postaladdress.SortingCodeValidator(v); err != nil {
			return &ValidationError{Name: "sorting_code", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.sorting_code": %w`, err)}
		}
	}
	if v, ok := pauo.mutation.AdministrativeArea(); ok {
		if err := postaladdress.AdministrativeAreaValidator(v); err != nil {
			return &ValidationError{Name: "administrative_area", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.administrative_area": %w`, err)}
		}
	}
	if v, ok := pauo.mutation.Locality(); ok {
		if err := postaladdress.LocalityValidator(v); err != nil {
			return &ValidationError{Name: "locality", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.locality": %w`, err)}
		}
	}
	if v, ok := pauo.mutation.Sublocality(); ok {
		if err := postaladdress.SublocalityValidator(v); err != nil {
			return &ValidationError{Name: "sublocality", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.sublocality": %w`, err)}
		}
	}
	if v, ok := pauo.mutation.Organization(); ok {
		if err := postaladdress.OrganizationValidator(v); err != nil {
			return &ValidationError{Name: "organization", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.organization": %w`, err)}
		}
	}
	return nil
}

func (pauo *PostalAddressUpdateOne) sqlSave(ctx context.Context) (_node *PostalAddress, err error) {
	if err := pauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(postaladdress.Table, postaladdress.Columns, sqlgraph.NewFieldSpec(postaladdress.FieldID, field.TypeString))
	id, ok := pauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "PostalAddress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, postaladdress.FieldID)
		for _, f := range fields {
			if !postaladdress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != postaladdress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pauo.mutation.CreatedAtCleared() {
		_spec.ClearField(postaladdress.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pauo.mutation.UpdatedAt(); ok {
		_spec.SetField(postaladdress.FieldUpdatedAt, field.TypeTime, value)
	}
	if pauo.mutation.UpdatedAtCleared() {
		_spec.ClearField(postaladdress.FieldUpdatedAt, field.TypeTime)
	}
	if pauo.mutation.CreatedByCleared() {
		_spec.ClearField(postaladdress.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pauo.mutation.UpdatedBy(); ok {
		_spec.SetField(postaladdress.FieldUpdatedBy, field.TypeString, value)
	}
	if pauo.mutation.UpdatedByCleared() {
		_spec.ClearField(postaladdress.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pauo.mutation.DeletedAt(); ok {
		_spec.SetField(postaladdress.FieldDeletedAt, field.TypeTime, value)
	}
	if pauo.mutation.DeletedAtCleared() {
		_spec.ClearField(postaladdress.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pauo.mutation.DeletedBy(); ok {
		_spec.SetField(postaladdress.FieldDeletedBy, field.TypeString, value)
	}
	if pauo.mutation.DeletedByCleared() {
		_spec.ClearField(postaladdress.FieldDeletedBy, field.TypeString)
	}
	if value, ok := pauo.mutation.Tags(); ok {
		_spec.SetField(postaladdress.FieldTags, field.TypeJSON, value)
	}
	if value, ok := pauo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, postaladdress.FieldTags, value)
		})
	}
	if pauo.mutation.TagsCleared() {
		_spec.ClearField(postaladdress.FieldTags, field.TypeJSON)
	}
	if value, ok := pauo.mutation.RegionCode(); ok {
		_spec.SetField(postaladdress.FieldRegionCode, field.TypeString, value)
	}
	if value, ok := pauo.mutation.LanguageCode(); ok {
		_spec.SetField(postaladdress.FieldLanguageCode, field.TypeString, value)
	}
	if pauo.mutation.LanguageCodeCleared() {
		_spec.ClearField(postaladdress.FieldLanguageCode, field.TypeString)
	}
	if value, ok := pauo.mutation.PostalCode(); ok {
		_spec.SetField(postaladdress.FieldPostalCode, field.TypeString, value)
	}
	if pauo.mutation.PostalCodeCleared() {
		_spec.ClearField(postaladdress.FieldPostalCode, field.TypeString)
	}
	if value, ok := pauo.mutation.SortingCode(); ok {
		_spec.SetField(postaladdress.FieldSortingCode, field.TypeString, value)
	}
	if pauo.mutation.SortingCodeCleared() {
		_spec.ClearField(postaladdress.FieldSortingCode, field.TypeString)
	}
	if value, ok := pauo.mutation.AdministrativeArea(); ok {
		_spec.SetField(postaladdress.FieldAdministrativeArea, field.TypeString, value)
	}
	if pauo.mutation.AdministrativeAreaCleared() {
		_spec.ClearField(postaladdress.FieldAdministrativeArea, field.TypeString)
	}
	if value, ok := pauo.mutation.Locality(); ok {
		_spec.SetField(postaladdress.FieldLocality, field.TypeString, value)
	}
	if pauo.mutation.LocalityCleared() {
		_spec.ClearField(postaladdress.FieldLocality, field.TypeString)
	}
	if value, ok := pauo.mutation.Sublocality(); ok {
		_spec.SetField(postaladdress.FieldSublocality, field.TypeString, value)
	}
	if pauo.mutation.SublocalityCleared() {
		_spec.ClearField(postaladdress.FieldSublocality, field.TypeString)
	}
	if value, ok := pauo.mutation.AddressLines(); ok {
		_spec.SetField(postaladdress.FieldAddressLines, field.TypeJSON, value)
	}
	if value, ok := pauo.mutation.AppendedAddressLines(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, postaladdress.FieldAddressLines, value)
		})
	}
	if value, ok := pauo.mutation.Recipients(); ok {
		_spec.SetField(postaladdress.FieldRecipients, field.TypeJSON, value)
	}
	if value, ok := pauo.mutation.AppendedRecipients(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, postaladdress.FieldRecipients, value)
		})
	}
	if value, ok := pauo.mutation.Organization(); ok {
		_spec.SetField(postaladdress.FieldOrganization, field.TypeString, value)
	}
	if pauo.mutation.OrganizationCleared() {
		_spec.ClearField(postaladdress.FieldOrganization, field.TypeString)
	}
	if pauo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postaladdress.OwnerTable,
			Columns: []string{postaladdress.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = pauo.schemaConfig.PostalAddress
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pauo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postaladdress.OwnerTable,
			Columns: []string{postaladdress.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = pauo.schemaConfig.PostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pauo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postaladdress.EventsTable,
			Columns: []string{postaladdress.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = pauo.schemaConfig.Event
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pauo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !pauo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postaladdress.EventsTable,
			Columns: []string{postaladdress.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = pauo.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pauo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postaladdress.EventsTable,
			Columns: []string{postaladdress.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = pauo.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pauo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   postaladdress.ProfileTable,
			Columns: postaladdress.ProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = pauo.schemaConfig.VendorProfilePostalAddress
		createE := &VendorProfilePostalAddressCreate{config: pauo.config, mutation: newVendorProfilePostalAddressMutation(pauo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pauo.mutation.RemovedProfileIDs(); len(nodes) > 0 && !pauo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   postaladdress.ProfileTable,
			Columns: postaladdress.ProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = pauo.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VendorProfilePostalAddressCreate{config: pauo.config, mutation: newVendorProfilePostalAddressMutation(pauo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pauo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   postaladdress.ProfileTable,
			Columns: postaladdress.ProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = pauo.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VendorProfilePostalAddressCreate{config: pauo.config, mutation: newVendorProfilePostalAddressMutation(pauo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pauo.mutation.VendorProfilePostalAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   postaladdress.VendorProfilePostalAddressesTable,
			Columns: []string{postaladdress.VendorProfilePostalAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilepostaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = pauo.schemaConfig.VendorProfilePostalAddress
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pauo.mutation.RemovedVendorProfilePostalAddressesIDs(); len(nodes) > 0 && !pauo.mutation.VendorProfilePostalAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   postaladdress.VendorProfilePostalAddressesTable,
			Columns: []string{postaladdress.VendorProfilePostalAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilepostaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = pauo.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pauo.mutation.VendorProfilePostalAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   postaladdress.VendorProfilePostalAddressesTable,
			Columns: []string{postaladdress.VendorProfilePostalAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilepostaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = pauo.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = pauo.schemaConfig.PostalAddress
	ctx = internal.NewSchemaConfigContext(ctx, pauo.schemaConfig)
	_node = &PostalAddress{config: pauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postaladdress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pauo.mutation.done = true
	return _node, nil
}
