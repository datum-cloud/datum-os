// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/event"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilephonenumber"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// VendorProfilePhoneNumberUpdate is the builder for updating VendorProfilePhoneNumber entities.
type VendorProfilePhoneNumberUpdate struct {
	config
	hooks    []Hook
	mutation *VendorProfilePhoneNumberMutation
}

// Where appends a list predicates to the VendorProfilePhoneNumberUpdate builder.
func (vppnu *VendorProfilePhoneNumberUpdate) Where(ps ...predicate.VendorProfilePhoneNumber) *VendorProfilePhoneNumberUpdate {
	vppnu.mutation.Where(ps...)
	return vppnu
}

// SetUpdatedAt sets the "updated_at" field.
func (vppnu *VendorProfilePhoneNumberUpdate) SetUpdatedAt(t time.Time) *VendorProfilePhoneNumberUpdate {
	vppnu.mutation.SetUpdatedAt(t)
	return vppnu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vppnu *VendorProfilePhoneNumberUpdate) ClearUpdatedAt() *VendorProfilePhoneNumberUpdate {
	vppnu.mutation.ClearUpdatedAt()
	return vppnu
}

// SetUpdatedBy sets the "updated_by" field.
func (vppnu *VendorProfilePhoneNumberUpdate) SetUpdatedBy(s string) *VendorProfilePhoneNumberUpdate {
	vppnu.mutation.SetUpdatedBy(s)
	return vppnu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vppnu *VendorProfilePhoneNumberUpdate) SetNillableUpdatedBy(s *string) *VendorProfilePhoneNumberUpdate {
	if s != nil {
		vppnu.SetUpdatedBy(*s)
	}
	return vppnu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vppnu *VendorProfilePhoneNumberUpdate) ClearUpdatedBy() *VendorProfilePhoneNumberUpdate {
	vppnu.mutation.ClearUpdatedBy()
	return vppnu
}

// SetDeletedAt sets the "deleted_at" field.
func (vppnu *VendorProfilePhoneNumberUpdate) SetDeletedAt(t time.Time) *VendorProfilePhoneNumberUpdate {
	vppnu.mutation.SetDeletedAt(t)
	return vppnu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vppnu *VendorProfilePhoneNumberUpdate) SetNillableDeletedAt(t *time.Time) *VendorProfilePhoneNumberUpdate {
	if t != nil {
		vppnu.SetDeletedAt(*t)
	}
	return vppnu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vppnu *VendorProfilePhoneNumberUpdate) ClearDeletedAt() *VendorProfilePhoneNumberUpdate {
	vppnu.mutation.ClearDeletedAt()
	return vppnu
}

// SetDeletedBy sets the "deleted_by" field.
func (vppnu *VendorProfilePhoneNumberUpdate) SetDeletedBy(s string) *VendorProfilePhoneNumberUpdate {
	vppnu.mutation.SetDeletedBy(s)
	return vppnu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vppnu *VendorProfilePhoneNumberUpdate) SetNillableDeletedBy(s *string) *VendorProfilePhoneNumberUpdate {
	if s != nil {
		vppnu.SetDeletedBy(*s)
	}
	return vppnu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (vppnu *VendorProfilePhoneNumberUpdate) ClearDeletedBy() *VendorProfilePhoneNumberUpdate {
	vppnu.mutation.ClearDeletedBy()
	return vppnu
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (vppnu *VendorProfilePhoneNumberUpdate) AddEventIDs(ids ...string) *VendorProfilePhoneNumberUpdate {
	vppnu.mutation.AddEventIDs(ids...)
	return vppnu
}

// AddEvents adds the "events" edges to the Event entity.
func (vppnu *VendorProfilePhoneNumberUpdate) AddEvents(e ...*Event) *VendorProfilePhoneNumberUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vppnu.AddEventIDs(ids...)
}

// Mutation returns the VendorProfilePhoneNumberMutation object of the builder.
func (vppnu *VendorProfilePhoneNumberUpdate) Mutation() *VendorProfilePhoneNumberMutation {
	return vppnu.mutation
}

// ClearEvents clears all "events" edges to the Event entity.
func (vppnu *VendorProfilePhoneNumberUpdate) ClearEvents() *VendorProfilePhoneNumberUpdate {
	vppnu.mutation.ClearEvents()
	return vppnu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (vppnu *VendorProfilePhoneNumberUpdate) RemoveEventIDs(ids ...string) *VendorProfilePhoneNumberUpdate {
	vppnu.mutation.RemoveEventIDs(ids...)
	return vppnu
}

// RemoveEvents removes "events" edges to Event entities.
func (vppnu *VendorProfilePhoneNumberUpdate) RemoveEvents(e ...*Event) *VendorProfilePhoneNumberUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vppnu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vppnu *VendorProfilePhoneNumberUpdate) Save(ctx context.Context) (int, error) {
	if err := vppnu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, vppnu.sqlSave, vppnu.mutation, vppnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vppnu *VendorProfilePhoneNumberUpdate) SaveX(ctx context.Context) int {
	affected, err := vppnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vppnu *VendorProfilePhoneNumberUpdate) Exec(ctx context.Context) error {
	_, err := vppnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vppnu *VendorProfilePhoneNumberUpdate) ExecX(ctx context.Context) {
	if err := vppnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vppnu *VendorProfilePhoneNumberUpdate) defaults() error {
	if _, ok := vppnu.mutation.UpdatedAt(); !ok && !vppnu.mutation.UpdatedAtCleared() {
		if vendorprofilephonenumber.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized vendorprofilephonenumber.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := vendorprofilephonenumber.UpdateDefaultUpdatedAt()
		vppnu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vppnu *VendorProfilePhoneNumberUpdate) check() error {
	if vppnu.mutation.PhoneNumberCleared() && len(vppnu.mutation.PhoneNumberIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "VendorProfilePhoneNumber.phone_number"`)
	}
	if vppnu.mutation.ProfileCleared() && len(vppnu.mutation.ProfileIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "VendorProfilePhoneNumber.profile"`)
	}
	return nil
}

func (vppnu *VendorProfilePhoneNumberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vppnu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendorprofilephonenumber.Table, vendorprofilephonenumber.Columns, sqlgraph.NewFieldSpec(vendorprofilephonenumber.FieldID, field.TypeString))
	if ps := vppnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vppnu.mutation.CreatedAtCleared() {
		_spec.ClearField(vendorprofilephonenumber.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vppnu.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofilephonenumber.FieldUpdatedAt, field.TypeTime, value)
	}
	if vppnu.mutation.UpdatedAtCleared() {
		_spec.ClearField(vendorprofilephonenumber.FieldUpdatedAt, field.TypeTime)
	}
	if vppnu.mutation.CreatedByCleared() {
		_spec.ClearField(vendorprofilephonenumber.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vppnu.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofilephonenumber.FieldUpdatedBy, field.TypeString, value)
	}
	if vppnu.mutation.UpdatedByCleared() {
		_spec.ClearField(vendorprofilephonenumber.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vppnu.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofilephonenumber.FieldDeletedAt, field.TypeTime, value)
	}
	if vppnu.mutation.DeletedAtCleared() {
		_spec.ClearField(vendorprofilephonenumber.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vppnu.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofilephonenumber.FieldDeletedBy, field.TypeString, value)
	}
	if vppnu.mutation.DeletedByCleared() {
		_spec.ClearField(vendorprofilephonenumber.FieldDeletedBy, field.TypeString)
	}
	if vppnu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendorprofilephonenumber.EventsTable,
			Columns: []string{vendorprofilephonenumber.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = vppnu.schemaConfig.Event
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vppnu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !vppnu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendorprofilephonenumber.EventsTable,
			Columns: []string{vendorprofilephonenumber.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = vppnu.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vppnu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendorprofilephonenumber.EventsTable,
			Columns: []string{vendorprofilephonenumber.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = vppnu.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = vppnu.schemaConfig.VendorProfilePhoneNumber
	ctx = internal.NewSchemaConfigContext(ctx, vppnu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, vppnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorprofilephonenumber.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vppnu.mutation.done = true
	return n, nil
}

// VendorProfilePhoneNumberUpdateOne is the builder for updating a single VendorProfilePhoneNumber entity.
type VendorProfilePhoneNumberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VendorProfilePhoneNumberMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) SetUpdatedAt(t time.Time) *VendorProfilePhoneNumberUpdateOne {
	vppnuo.mutation.SetUpdatedAt(t)
	return vppnuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) ClearUpdatedAt() *VendorProfilePhoneNumberUpdateOne {
	vppnuo.mutation.ClearUpdatedAt()
	return vppnuo
}

// SetUpdatedBy sets the "updated_by" field.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) SetUpdatedBy(s string) *VendorProfilePhoneNumberUpdateOne {
	vppnuo.mutation.SetUpdatedBy(s)
	return vppnuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) SetNillableUpdatedBy(s *string) *VendorProfilePhoneNumberUpdateOne {
	if s != nil {
		vppnuo.SetUpdatedBy(*s)
	}
	return vppnuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) ClearUpdatedBy() *VendorProfilePhoneNumberUpdateOne {
	vppnuo.mutation.ClearUpdatedBy()
	return vppnuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) SetDeletedAt(t time.Time) *VendorProfilePhoneNumberUpdateOne {
	vppnuo.mutation.SetDeletedAt(t)
	return vppnuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) SetNillableDeletedAt(t *time.Time) *VendorProfilePhoneNumberUpdateOne {
	if t != nil {
		vppnuo.SetDeletedAt(*t)
	}
	return vppnuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) ClearDeletedAt() *VendorProfilePhoneNumberUpdateOne {
	vppnuo.mutation.ClearDeletedAt()
	return vppnuo
}

// SetDeletedBy sets the "deleted_by" field.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) SetDeletedBy(s string) *VendorProfilePhoneNumberUpdateOne {
	vppnuo.mutation.SetDeletedBy(s)
	return vppnuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) SetNillableDeletedBy(s *string) *VendorProfilePhoneNumberUpdateOne {
	if s != nil {
		vppnuo.SetDeletedBy(*s)
	}
	return vppnuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) ClearDeletedBy() *VendorProfilePhoneNumberUpdateOne {
	vppnuo.mutation.ClearDeletedBy()
	return vppnuo
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) AddEventIDs(ids ...string) *VendorProfilePhoneNumberUpdateOne {
	vppnuo.mutation.AddEventIDs(ids...)
	return vppnuo
}

// AddEvents adds the "events" edges to the Event entity.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) AddEvents(e ...*Event) *VendorProfilePhoneNumberUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vppnuo.AddEventIDs(ids...)
}

// Mutation returns the VendorProfilePhoneNumberMutation object of the builder.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) Mutation() *VendorProfilePhoneNumberMutation {
	return vppnuo.mutation
}

// ClearEvents clears all "events" edges to the Event entity.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) ClearEvents() *VendorProfilePhoneNumberUpdateOne {
	vppnuo.mutation.ClearEvents()
	return vppnuo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) RemoveEventIDs(ids ...string) *VendorProfilePhoneNumberUpdateOne {
	vppnuo.mutation.RemoveEventIDs(ids...)
	return vppnuo
}

// RemoveEvents removes "events" edges to Event entities.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) RemoveEvents(e ...*Event) *VendorProfilePhoneNumberUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vppnuo.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the VendorProfilePhoneNumberUpdate builder.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) Where(ps ...predicate.VendorProfilePhoneNumber) *VendorProfilePhoneNumberUpdateOne {
	vppnuo.mutation.Where(ps...)
	return vppnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) Select(field string, fields ...string) *VendorProfilePhoneNumberUpdateOne {
	vppnuo.fields = append([]string{field}, fields...)
	return vppnuo
}

// Save executes the query and returns the updated VendorProfilePhoneNumber entity.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) Save(ctx context.Context) (*VendorProfilePhoneNumber, error) {
	if err := vppnuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, vppnuo.sqlSave, vppnuo.mutation, vppnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) SaveX(ctx context.Context) *VendorProfilePhoneNumber {
	node, err := vppnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) Exec(ctx context.Context) error {
	_, err := vppnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) ExecX(ctx context.Context) {
	if err := vppnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) defaults() error {
	if _, ok := vppnuo.mutation.UpdatedAt(); !ok && !vppnuo.mutation.UpdatedAtCleared() {
		if vendorprofilephonenumber.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized vendorprofilephonenumber.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := vendorprofilephonenumber.UpdateDefaultUpdatedAt()
		vppnuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vppnuo *VendorProfilePhoneNumberUpdateOne) check() error {
	if vppnuo.mutation.PhoneNumberCleared() && len(vppnuo.mutation.PhoneNumberIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "VendorProfilePhoneNumber.phone_number"`)
	}
	if vppnuo.mutation.ProfileCleared() && len(vppnuo.mutation.ProfileIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "VendorProfilePhoneNumber.profile"`)
	}
	return nil
}

func (vppnuo *VendorProfilePhoneNumberUpdateOne) sqlSave(ctx context.Context) (_node *VendorProfilePhoneNumber, err error) {
	if err := vppnuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendorprofilephonenumber.Table, vendorprofilephonenumber.Columns, sqlgraph.NewFieldSpec(vendorprofilephonenumber.FieldID, field.TypeString))
	id, ok := vppnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "VendorProfilePhoneNumber.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vppnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vendorprofilephonenumber.FieldID)
		for _, f := range fields {
			if !vendorprofilephonenumber.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != vendorprofilephonenumber.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vppnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vppnuo.mutation.CreatedAtCleared() {
		_spec.ClearField(vendorprofilephonenumber.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vppnuo.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofilephonenumber.FieldUpdatedAt, field.TypeTime, value)
	}
	if vppnuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(vendorprofilephonenumber.FieldUpdatedAt, field.TypeTime)
	}
	if vppnuo.mutation.CreatedByCleared() {
		_spec.ClearField(vendorprofilephonenumber.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vppnuo.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofilephonenumber.FieldUpdatedBy, field.TypeString, value)
	}
	if vppnuo.mutation.UpdatedByCleared() {
		_spec.ClearField(vendorprofilephonenumber.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vppnuo.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofilephonenumber.FieldDeletedAt, field.TypeTime, value)
	}
	if vppnuo.mutation.DeletedAtCleared() {
		_spec.ClearField(vendorprofilephonenumber.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vppnuo.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofilephonenumber.FieldDeletedBy, field.TypeString, value)
	}
	if vppnuo.mutation.DeletedByCleared() {
		_spec.ClearField(vendorprofilephonenumber.FieldDeletedBy, field.TypeString)
	}
	if vppnuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendorprofilephonenumber.EventsTable,
			Columns: []string{vendorprofilephonenumber.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = vppnuo.schemaConfig.Event
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vppnuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !vppnuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendorprofilephonenumber.EventsTable,
			Columns: []string{vendorprofilephonenumber.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = vppnuo.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vppnuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendorprofilephonenumber.EventsTable,
			Columns: []string{vendorprofilephonenumber.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = vppnuo.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = vppnuo.schemaConfig.VendorProfilePhoneNumber
	ctx = internal.NewSchemaConfigContext(ctx, vppnuo.schemaConfig)
	_node = &VendorProfilePhoneNumber{config: vppnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vppnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorprofilephonenumber.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vppnuo.mutation.done = true
	return _node, nil
}
