// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"

	"github.com/datum-cloud/datum-os/internal/ent/generated/contactlistmembershiphistory"
	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// ContactListMembershipHistoryDelete is the builder for deleting a ContactListMembershipHistory entity.
type ContactListMembershipHistoryDelete struct {
	config
	hooks    []Hook
	mutation *ContactListMembershipHistoryMutation
}

// Where appends a list predicates to the ContactListMembershipHistoryDelete builder.
func (clmhd *ContactListMembershipHistoryDelete) Where(ps ...predicate.ContactListMembershipHistory) *ContactListMembershipHistoryDelete {
	clmhd.mutation.Where(ps...)
	return clmhd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (clmhd *ContactListMembershipHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, clmhd.sqlExec, clmhd.mutation, clmhd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (clmhd *ContactListMembershipHistoryDelete) ExecX(ctx context.Context) int {
	n, err := clmhd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (clmhd *ContactListMembershipHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(contactlistmembershiphistory.Table, sqlgraph.NewFieldSpec(contactlistmembershiphistory.FieldID, field.TypeString))
	_spec.Node.Schema = clmhd.schemaConfig.ContactListMembershipHistory
	ctx = internal.NewSchemaConfigContext(ctx, clmhd.schemaConfig)
	if ps := clmhd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, clmhd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	clmhd.mutation.done = true
	return affected, err
}

// ContactListMembershipHistoryDeleteOne is the builder for deleting a single ContactListMembershipHistory entity.
type ContactListMembershipHistoryDeleteOne struct {
	clmhd *ContactListMembershipHistoryDelete
}

// Where appends a list predicates to the ContactListMembershipHistoryDelete builder.
func (clmhdo *ContactListMembershipHistoryDeleteOne) Where(ps ...predicate.ContactListMembershipHistory) *ContactListMembershipHistoryDeleteOne {
	clmhdo.clmhd.mutation.Where(ps...)
	return clmhdo
}

// Exec executes the deletion query.
func (clmhdo *ContactListMembershipHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := clmhdo.clmhd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{contactlistmembershiphistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (clmhdo *ContactListMembershipHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := clmhdo.Exec(ctx); err != nil {
		panic(err)
	}
}
