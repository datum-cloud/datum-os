// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/phonenumberhistory"
	"github.com/datum-cloud/datum-os/pkg/enthistory"
	"github.com/datum-cloud/datum-os/pkg/enums"
)

// PhoneNumberHistoryCreate is the builder for creating a PhoneNumberHistory entity.
type PhoneNumberHistoryCreate struct {
	config
	mutation *PhoneNumberHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (pnhc *PhoneNumberHistoryCreate) SetHistoryTime(t time.Time) *PhoneNumberHistoryCreate {
	pnhc.mutation.SetHistoryTime(t)
	return pnhc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (pnhc *PhoneNumberHistoryCreate) SetNillableHistoryTime(t *time.Time) *PhoneNumberHistoryCreate {
	if t != nil {
		pnhc.SetHistoryTime(*t)
	}
	return pnhc
}

// SetRef sets the "ref" field.
func (pnhc *PhoneNumberHistoryCreate) SetRef(s string) *PhoneNumberHistoryCreate {
	pnhc.mutation.SetRef(s)
	return pnhc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (pnhc *PhoneNumberHistoryCreate) SetNillableRef(s *string) *PhoneNumberHistoryCreate {
	if s != nil {
		pnhc.SetRef(*s)
	}
	return pnhc
}

// SetOperation sets the "operation" field.
func (pnhc *PhoneNumberHistoryCreate) SetOperation(et enthistory.OpType) *PhoneNumberHistoryCreate {
	pnhc.mutation.SetOperation(et)
	return pnhc
}

// SetCreatedAt sets the "created_at" field.
func (pnhc *PhoneNumberHistoryCreate) SetCreatedAt(t time.Time) *PhoneNumberHistoryCreate {
	pnhc.mutation.SetCreatedAt(t)
	return pnhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pnhc *PhoneNumberHistoryCreate) SetNillableCreatedAt(t *time.Time) *PhoneNumberHistoryCreate {
	if t != nil {
		pnhc.SetCreatedAt(*t)
	}
	return pnhc
}

// SetUpdatedAt sets the "updated_at" field.
func (pnhc *PhoneNumberHistoryCreate) SetUpdatedAt(t time.Time) *PhoneNumberHistoryCreate {
	pnhc.mutation.SetUpdatedAt(t)
	return pnhc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pnhc *PhoneNumberHistoryCreate) SetNillableUpdatedAt(t *time.Time) *PhoneNumberHistoryCreate {
	if t != nil {
		pnhc.SetUpdatedAt(*t)
	}
	return pnhc
}

// SetCreatedBy sets the "created_by" field.
func (pnhc *PhoneNumberHistoryCreate) SetCreatedBy(s string) *PhoneNumberHistoryCreate {
	pnhc.mutation.SetCreatedBy(s)
	return pnhc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pnhc *PhoneNumberHistoryCreate) SetNillableCreatedBy(s *string) *PhoneNumberHistoryCreate {
	if s != nil {
		pnhc.SetCreatedBy(*s)
	}
	return pnhc
}

// SetUpdatedBy sets the "updated_by" field.
func (pnhc *PhoneNumberHistoryCreate) SetUpdatedBy(s string) *PhoneNumberHistoryCreate {
	pnhc.mutation.SetUpdatedBy(s)
	return pnhc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pnhc *PhoneNumberHistoryCreate) SetNillableUpdatedBy(s *string) *PhoneNumberHistoryCreate {
	if s != nil {
		pnhc.SetUpdatedBy(*s)
	}
	return pnhc
}

// SetDeletedAt sets the "deleted_at" field.
func (pnhc *PhoneNumberHistoryCreate) SetDeletedAt(t time.Time) *PhoneNumberHistoryCreate {
	pnhc.mutation.SetDeletedAt(t)
	return pnhc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pnhc *PhoneNumberHistoryCreate) SetNillableDeletedAt(t *time.Time) *PhoneNumberHistoryCreate {
	if t != nil {
		pnhc.SetDeletedAt(*t)
	}
	return pnhc
}

// SetDeletedBy sets the "deleted_by" field.
func (pnhc *PhoneNumberHistoryCreate) SetDeletedBy(s string) *PhoneNumberHistoryCreate {
	pnhc.mutation.SetDeletedBy(s)
	return pnhc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pnhc *PhoneNumberHistoryCreate) SetNillableDeletedBy(s *string) *PhoneNumberHistoryCreate {
	if s != nil {
		pnhc.SetDeletedBy(*s)
	}
	return pnhc
}

// SetMappingID sets the "mapping_id" field.
func (pnhc *PhoneNumberHistoryCreate) SetMappingID(s string) *PhoneNumberHistoryCreate {
	pnhc.mutation.SetMappingID(s)
	return pnhc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (pnhc *PhoneNumberHistoryCreate) SetNillableMappingID(s *string) *PhoneNumberHistoryCreate {
	if s != nil {
		pnhc.SetMappingID(*s)
	}
	return pnhc
}

// SetTags sets the "tags" field.
func (pnhc *PhoneNumberHistoryCreate) SetTags(s []string) *PhoneNumberHistoryCreate {
	pnhc.mutation.SetTags(s)
	return pnhc
}

// SetOwnerID sets the "owner_id" field.
func (pnhc *PhoneNumberHistoryCreate) SetOwnerID(s string) *PhoneNumberHistoryCreate {
	pnhc.mutation.SetOwnerID(s)
	return pnhc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pnhc *PhoneNumberHistoryCreate) SetNillableOwnerID(s *string) *PhoneNumberHistoryCreate {
	if s != nil {
		pnhc.SetOwnerID(*s)
	}
	return pnhc
}

// SetKind sets the "kind" field.
func (pnhc *PhoneNumberHistoryCreate) SetKind(ennuty enums.PhoneNumberType) *PhoneNumberHistoryCreate {
	pnhc.mutation.SetKind(ennuty)
	return pnhc
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (pnhc *PhoneNumberHistoryCreate) SetNillableKind(ennuty *enums.PhoneNumberType) *PhoneNumberHistoryCreate {
	if ennuty != nil {
		pnhc.SetKind(*ennuty)
	}
	return pnhc
}

// SetRegionCode sets the "region_code" field.
func (pnhc *PhoneNumberHistoryCreate) SetRegionCode(s string) *PhoneNumberHistoryCreate {
	pnhc.mutation.SetRegionCode(s)
	return pnhc
}

// SetNillableRegionCode sets the "region_code" field if the given value is not nil.
func (pnhc *PhoneNumberHistoryCreate) SetNillableRegionCode(s *string) *PhoneNumberHistoryCreate {
	if s != nil {
		pnhc.SetRegionCode(*s)
	}
	return pnhc
}

// SetShortCode sets the "short_code" field.
func (pnhc *PhoneNumberHistoryCreate) SetShortCode(s string) *PhoneNumberHistoryCreate {
	pnhc.mutation.SetShortCode(s)
	return pnhc
}

// SetNillableShortCode sets the "short_code" field if the given value is not nil.
func (pnhc *PhoneNumberHistoryCreate) SetNillableShortCode(s *string) *PhoneNumberHistoryCreate {
	if s != nil {
		pnhc.SetShortCode(*s)
	}
	return pnhc
}

// SetNumber sets the "number" field.
func (pnhc *PhoneNumberHistoryCreate) SetNumber(s string) *PhoneNumberHistoryCreate {
	pnhc.mutation.SetNumber(s)
	return pnhc
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (pnhc *PhoneNumberHistoryCreate) SetNillableNumber(s *string) *PhoneNumberHistoryCreate {
	if s != nil {
		pnhc.SetNumber(*s)
	}
	return pnhc
}

// SetExtension sets the "extension" field.
func (pnhc *PhoneNumberHistoryCreate) SetExtension(s string) *PhoneNumberHistoryCreate {
	pnhc.mutation.SetExtension(s)
	return pnhc
}

// SetNillableExtension sets the "extension" field if the given value is not nil.
func (pnhc *PhoneNumberHistoryCreate) SetNillableExtension(s *string) *PhoneNumberHistoryCreate {
	if s != nil {
		pnhc.SetExtension(*s)
	}
	return pnhc
}

// SetID sets the "id" field.
func (pnhc *PhoneNumberHistoryCreate) SetID(s string) *PhoneNumberHistoryCreate {
	pnhc.mutation.SetID(s)
	return pnhc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pnhc *PhoneNumberHistoryCreate) SetNillableID(s *string) *PhoneNumberHistoryCreate {
	if s != nil {
		pnhc.SetID(*s)
	}
	return pnhc
}

// Mutation returns the PhoneNumberHistoryMutation object of the builder.
func (pnhc *PhoneNumberHistoryCreate) Mutation() *PhoneNumberHistoryMutation {
	return pnhc.mutation
}

// Save creates the PhoneNumberHistory in the database.
func (pnhc *PhoneNumberHistoryCreate) Save(ctx context.Context) (*PhoneNumberHistory, error) {
	pnhc.defaults()
	return withHooks(ctx, pnhc.sqlSave, pnhc.mutation, pnhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pnhc *PhoneNumberHistoryCreate) SaveX(ctx context.Context) *PhoneNumberHistory {
	v, err := pnhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pnhc *PhoneNumberHistoryCreate) Exec(ctx context.Context) error {
	_, err := pnhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pnhc *PhoneNumberHistoryCreate) ExecX(ctx context.Context) {
	if err := pnhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pnhc *PhoneNumberHistoryCreate) defaults() {
	if _, ok := pnhc.mutation.HistoryTime(); !ok {
		v := phonenumberhistory.DefaultHistoryTime()
		pnhc.mutation.SetHistoryTime(v)
	}
	if _, ok := pnhc.mutation.CreatedAt(); !ok {
		v := phonenumberhistory.DefaultCreatedAt()
		pnhc.mutation.SetCreatedAt(v)
	}
	if _, ok := pnhc.mutation.UpdatedAt(); !ok {
		v := phonenumberhistory.DefaultUpdatedAt()
		pnhc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pnhc.mutation.MappingID(); !ok {
		v := phonenumberhistory.DefaultMappingID()
		pnhc.mutation.SetMappingID(v)
	}
	if _, ok := pnhc.mutation.Tags(); !ok {
		v := phonenumberhistory.DefaultTags
		pnhc.mutation.SetTags(v)
	}
	if _, ok := pnhc.mutation.Kind(); !ok {
		v := phonenumberhistory.DefaultKind
		pnhc.mutation.SetKind(v)
	}
	if _, ok := pnhc.mutation.ID(); !ok {
		v := phonenumberhistory.DefaultID()
		pnhc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pnhc *PhoneNumberHistoryCreate) check() error {
	if _, ok := pnhc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "PhoneNumberHistory.history_time"`)}
	}
	if _, ok := pnhc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "PhoneNumberHistory.operation"`)}
	}
	if v, ok := pnhc.mutation.Operation(); ok {
		if err := phonenumberhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "PhoneNumberHistory.operation": %w`, err)}
		}
	}
	if _, ok := pnhc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "PhoneNumberHistory.mapping_id"`)}
	}
	if _, ok := pnhc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`generated: missing required field "PhoneNumberHistory.kind"`)}
	}
	if v, ok := pnhc.mutation.Kind(); ok {
		if err := phonenumberhistory.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`generated: validator failed for field "PhoneNumberHistory.kind": %w`, err)}
		}
	}
	return nil
}

func (pnhc *PhoneNumberHistoryCreate) sqlSave(ctx context.Context) (*PhoneNumberHistory, error) {
	if err := pnhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pnhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pnhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PhoneNumberHistory.ID type: %T", _spec.ID.Value)
		}
	}
	pnhc.mutation.id = &_node.ID
	pnhc.mutation.done = true
	return _node, nil
}

func (pnhc *PhoneNumberHistoryCreate) createSpec() (*PhoneNumberHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &PhoneNumberHistory{config: pnhc.config}
		_spec = sqlgraph.NewCreateSpec(phonenumberhistory.Table, sqlgraph.NewFieldSpec(phonenumberhistory.FieldID, field.TypeString))
	)
	_spec.Schema = pnhc.schemaConfig.PhoneNumberHistory
	if id, ok := pnhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pnhc.mutation.HistoryTime(); ok {
		_spec.SetField(phonenumberhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := pnhc.mutation.Ref(); ok {
		_spec.SetField(phonenumberhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := pnhc.mutation.Operation(); ok {
		_spec.SetField(phonenumberhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := pnhc.mutation.CreatedAt(); ok {
		_spec.SetField(phonenumberhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pnhc.mutation.UpdatedAt(); ok {
		_spec.SetField(phonenumberhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pnhc.mutation.CreatedBy(); ok {
		_spec.SetField(phonenumberhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := pnhc.mutation.UpdatedBy(); ok {
		_spec.SetField(phonenumberhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := pnhc.mutation.DeletedAt(); ok {
		_spec.SetField(phonenumberhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pnhc.mutation.DeletedBy(); ok {
		_spec.SetField(phonenumberhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = &value
	}
	if value, ok := pnhc.mutation.MappingID(); ok {
		_spec.SetField(phonenumberhistory.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := pnhc.mutation.Tags(); ok {
		_spec.SetField(phonenumberhistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := pnhc.mutation.OwnerID(); ok {
		_spec.SetField(phonenumberhistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := pnhc.mutation.Kind(); ok {
		_spec.SetField(phonenumberhistory.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if value, ok := pnhc.mutation.RegionCode(); ok {
		_spec.SetField(phonenumberhistory.FieldRegionCode, field.TypeString, value)
		_node.RegionCode = value
	}
	if value, ok := pnhc.mutation.ShortCode(); ok {
		_spec.SetField(phonenumberhistory.FieldShortCode, field.TypeString, value)
		_node.ShortCode = value
	}
	if value, ok := pnhc.mutation.Number(); ok {
		_spec.SetField(phonenumberhistory.FieldNumber, field.TypeString, value)
		_node.Number = value
	}
	if value, ok := pnhc.mutation.Extension(); ok {
		_spec.SetField(phonenumberhistory.FieldExtension, field.TypeString, value)
		_node.Extension = value
	}
	return _node, _spec
}

// PhoneNumberHistoryCreateBulk is the builder for creating many PhoneNumberHistory entities in bulk.
type PhoneNumberHistoryCreateBulk struct {
	config
	err      error
	builders []*PhoneNumberHistoryCreate
}

// Save creates the PhoneNumberHistory entities in the database.
func (pnhcb *PhoneNumberHistoryCreateBulk) Save(ctx context.Context) ([]*PhoneNumberHistory, error) {
	if pnhcb.err != nil {
		return nil, pnhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pnhcb.builders))
	nodes := make([]*PhoneNumberHistory, len(pnhcb.builders))
	mutators := make([]Mutator, len(pnhcb.builders))
	for i := range pnhcb.builders {
		func(i int, root context.Context) {
			builder := pnhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PhoneNumberHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pnhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pnhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pnhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pnhcb *PhoneNumberHistoryCreateBulk) SaveX(ctx context.Context) []*PhoneNumberHistory {
	v, err := pnhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pnhcb *PhoneNumberHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := pnhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pnhcb *PhoneNumberHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := pnhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
