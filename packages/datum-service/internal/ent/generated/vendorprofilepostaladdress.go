// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datum-cloud/datum-os/internal/ent/generated/postaladdress"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofile"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilepostaladdress"
	"github.com/datum-cloud/datum-os/pkg/enums"
)

// VendorProfilePostalAddress is the model entity for the VendorProfilePostalAddress schema.
type VendorProfilePostalAddress struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// PostalAddressType holds the value of the "postal_address_type" field.
	PostalAddressType enums.PostalAddressType `json:"postal_address_type,omitempty"`
	// VendorProfileID holds the value of the "vendor_profile_id" field.
	VendorProfileID string `json:"vendor_profile_id,omitempty"`
	// PostalAddressID holds the value of the "postal_address_id" field.
	PostalAddressID string `json:"postal_address_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VendorProfilePostalAddressQuery when eager-loading is set.
	Edges        VendorProfilePostalAddressEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VendorProfilePostalAddressEdges holds the relations/edges for other nodes in the graph.
type VendorProfilePostalAddressEdges struct {
	// PostalAddress holds the value of the postal_address edge.
	PostalAddress *PostalAddress `json:"postal_address,omitempty"`
	// Profile holds the value of the profile edge.
	Profile *VendorProfile `json:"profile,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedEvents map[string][]*Event
}

// PostalAddressOrErr returns the PostalAddress value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VendorProfilePostalAddressEdges) PostalAddressOrErr() (*PostalAddress, error) {
	if e.PostalAddress != nil {
		return e.PostalAddress, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: postaladdress.Label}
	}
	return nil, &NotLoadedError{edge: "postal_address"}
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VendorProfilePostalAddressEdges) ProfileOrErr() (*VendorProfile, error) {
	if e.Profile != nil {
		return e.Profile, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: vendorprofile.Label}
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e VendorProfilePostalAddressEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[2] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VendorProfilePostalAddress) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vendorprofilepostaladdress.FieldID, vendorprofilepostaladdress.FieldCreatedBy, vendorprofilepostaladdress.FieldUpdatedBy, vendorprofilepostaladdress.FieldMappingID, vendorprofilepostaladdress.FieldDeletedBy, vendorprofilepostaladdress.FieldPostalAddressType, vendorprofilepostaladdress.FieldVendorProfileID, vendorprofilepostaladdress.FieldPostalAddressID:
			values[i] = new(sql.NullString)
		case vendorprofilepostaladdress.FieldCreatedAt, vendorprofilepostaladdress.FieldUpdatedAt, vendorprofilepostaladdress.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VendorProfilePostalAddress fields.
func (vppa *VendorProfilePostalAddress) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vendorprofilepostaladdress.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				vppa.ID = value.String
			}
		case vendorprofilepostaladdress.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vppa.CreatedAt = value.Time
			}
		case vendorprofilepostaladdress.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vppa.UpdatedAt = value.Time
			}
		case vendorprofilepostaladdress.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				vppa.CreatedBy = value.String
			}
		case vendorprofilepostaladdress.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				vppa.UpdatedBy = value.String
			}
		case vendorprofilepostaladdress.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				vppa.MappingID = value.String
			}
		case vendorprofilepostaladdress.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				vppa.DeletedAt = value.Time
			}
		case vendorprofilepostaladdress.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				vppa.DeletedBy = value.String
			}
		case vendorprofilepostaladdress.FieldPostalAddressType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field postal_address_type", values[i])
			} else if value.Valid {
				vppa.PostalAddressType = enums.PostalAddressType(value.String)
			}
		case vendorprofilepostaladdress.FieldVendorProfileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vendor_profile_id", values[i])
			} else if value.Valid {
				vppa.VendorProfileID = value.String
			}
		case vendorprofilepostaladdress.FieldPostalAddressID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field postal_address_id", values[i])
			} else if value.Valid {
				vppa.PostalAddressID = value.String
			}
		default:
			vppa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VendorProfilePostalAddress.
// This includes values selected through modifiers, order, etc.
func (vppa *VendorProfilePostalAddress) Value(name string) (ent.Value, error) {
	return vppa.selectValues.Get(name)
}

// QueryPostalAddress queries the "postal_address" edge of the VendorProfilePostalAddress entity.
func (vppa *VendorProfilePostalAddress) QueryPostalAddress() *PostalAddressQuery {
	return NewVendorProfilePostalAddressClient(vppa.config).QueryPostalAddress(vppa)
}

// QueryProfile queries the "profile" edge of the VendorProfilePostalAddress entity.
func (vppa *VendorProfilePostalAddress) QueryProfile() *VendorProfileQuery {
	return NewVendorProfilePostalAddressClient(vppa.config).QueryProfile(vppa)
}

// QueryEvents queries the "events" edge of the VendorProfilePostalAddress entity.
func (vppa *VendorProfilePostalAddress) QueryEvents() *EventQuery {
	return NewVendorProfilePostalAddressClient(vppa.config).QueryEvents(vppa)
}

// Update returns a builder for updating this VendorProfilePostalAddress.
// Note that you need to call VendorProfilePostalAddress.Unwrap() before calling this method if this VendorProfilePostalAddress
// was returned from a transaction, and the transaction was committed or rolled back.
func (vppa *VendorProfilePostalAddress) Update() *VendorProfilePostalAddressUpdateOne {
	return NewVendorProfilePostalAddressClient(vppa.config).UpdateOne(vppa)
}

// Unwrap unwraps the VendorProfilePostalAddress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vppa *VendorProfilePostalAddress) Unwrap() *VendorProfilePostalAddress {
	_tx, ok := vppa.config.driver.(*txDriver)
	if !ok {
		panic("generated: VendorProfilePostalAddress is not a transactional entity")
	}
	vppa.config.driver = _tx.drv
	return vppa
}

// String implements the fmt.Stringer.
func (vppa *VendorProfilePostalAddress) String() string {
	var builder strings.Builder
	builder.WriteString("VendorProfilePostalAddress(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vppa.ID))
	builder.WriteString("created_at=")
	builder.WriteString(vppa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(vppa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(vppa.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(vppa.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(vppa.MappingID)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(vppa.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(vppa.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("postal_address_type=")
	builder.WriteString(fmt.Sprintf("%v", vppa.PostalAddressType))
	builder.WriteString(", ")
	builder.WriteString("vendor_profile_id=")
	builder.WriteString(vppa.VendorProfileID)
	builder.WriteString(", ")
	builder.WriteString("postal_address_id=")
	builder.WriteString(vppa.PostalAddressID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedEvents returns the Events named value or an error if the edge was not
// loaded in eager-loading with this name.
func (vppa *VendorProfilePostalAddress) NamedEvents(name string) ([]*Event, error) {
	if vppa.Edges.namedEvents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := vppa.Edges.namedEvents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (vppa *VendorProfilePostalAddress) appendNamedEvents(name string, edges ...*Event) {
	if vppa.Edges.namedEvents == nil {
		vppa.Edges.namedEvents = make(map[string][]*Event)
	}
	if len(edges) == 0 {
		vppa.Edges.namedEvents[name] = []*Event{}
	} else {
		vppa.Edges.namedEvents[name] = append(vppa.Edges.namedEvents[name], edges...)
	}
}

// VendorProfilePostalAddresses is a parsable slice of VendorProfilePostalAddress.
type VendorProfilePostalAddresses []*VendorProfilePostalAddress
