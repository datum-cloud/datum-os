// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/event"
	"github.com/datum-cloud/datum-os/internal/ent/generated/organization"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendor"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofile"
	"github.com/datum-cloud/datum-os/pkg/enums"
)

// VendorCreate is the builder for creating a Vendor entity.
type VendorCreate struct {
	config
	mutation *VendorMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (vc *VendorCreate) SetCreatedAt(t time.Time) *VendorCreate {
	vc.mutation.SetCreatedAt(t)
	return vc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vc *VendorCreate) SetNillableCreatedAt(t *time.Time) *VendorCreate {
	if t != nil {
		vc.SetCreatedAt(*t)
	}
	return vc
}

// SetUpdatedAt sets the "updated_at" field.
func (vc *VendorCreate) SetUpdatedAt(t time.Time) *VendorCreate {
	vc.mutation.SetUpdatedAt(t)
	return vc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vc *VendorCreate) SetNillableUpdatedAt(t *time.Time) *VendorCreate {
	if t != nil {
		vc.SetUpdatedAt(*t)
	}
	return vc
}

// SetCreatedBy sets the "created_by" field.
func (vc *VendorCreate) SetCreatedBy(s string) *VendorCreate {
	vc.mutation.SetCreatedBy(s)
	return vc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vc *VendorCreate) SetNillableCreatedBy(s *string) *VendorCreate {
	if s != nil {
		vc.SetCreatedBy(*s)
	}
	return vc
}

// SetUpdatedBy sets the "updated_by" field.
func (vc *VendorCreate) SetUpdatedBy(s string) *VendorCreate {
	vc.mutation.SetUpdatedBy(s)
	return vc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vc *VendorCreate) SetNillableUpdatedBy(s *string) *VendorCreate {
	if s != nil {
		vc.SetUpdatedBy(*s)
	}
	return vc
}

// SetDeletedAt sets the "deleted_at" field.
func (vc *VendorCreate) SetDeletedAt(t time.Time) *VendorCreate {
	vc.mutation.SetDeletedAt(t)
	return vc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vc *VendorCreate) SetNillableDeletedAt(t *time.Time) *VendorCreate {
	if t != nil {
		vc.SetDeletedAt(*t)
	}
	return vc
}

// SetDeletedBy sets the "deleted_by" field.
func (vc *VendorCreate) SetDeletedBy(s string) *VendorCreate {
	vc.mutation.SetDeletedBy(s)
	return vc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vc *VendorCreate) SetNillableDeletedBy(s *string) *VendorCreate {
	if s != nil {
		vc.SetDeletedBy(*s)
	}
	return vc
}

// SetMappingID sets the "mapping_id" field.
func (vc *VendorCreate) SetMappingID(s string) *VendorCreate {
	vc.mutation.SetMappingID(s)
	return vc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (vc *VendorCreate) SetNillableMappingID(s *string) *VendorCreate {
	if s != nil {
		vc.SetMappingID(*s)
	}
	return vc
}

// SetTags sets the "tags" field.
func (vc *VendorCreate) SetTags(s []string) *VendorCreate {
	vc.mutation.SetTags(s)
	return vc
}

// SetOwnerID sets the "owner_id" field.
func (vc *VendorCreate) SetOwnerID(s string) *VendorCreate {
	vc.mutation.SetOwnerID(s)
	return vc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (vc *VendorCreate) SetNillableOwnerID(s *string) *VendorCreate {
	if s != nil {
		vc.SetOwnerID(*s)
	}
	return vc
}

// SetDisplayName sets the "display_name" field.
func (vc *VendorCreate) SetDisplayName(s string) *VendorCreate {
	vc.mutation.SetDisplayName(s)
	return vc
}

// SetVendorType sets the "vendor_type" field.
func (vc *VendorCreate) SetVendorType(et enums.VendorType) *VendorCreate {
	vc.mutation.SetVendorType(et)
	return vc
}

// SetNillableVendorType sets the "vendor_type" field if the given value is not nil.
func (vc *VendorCreate) SetNillableVendorType(et *enums.VendorType) *VendorCreate {
	if et != nil {
		vc.SetVendorType(*et)
	}
	return vc
}

// SetOnboardingState sets the "onboarding_state" field.
func (vc *VendorCreate) SetOnboardingState(es enums.OnboardingState) *VendorCreate {
	vc.mutation.SetOnboardingState(es)
	return vc
}

// SetNillableOnboardingState sets the "onboarding_state" field if the given value is not nil.
func (vc *VendorCreate) SetNillableOnboardingState(es *enums.OnboardingState) *VendorCreate {
	if es != nil {
		vc.SetOnboardingState(*es)
	}
	return vc
}

// SetID sets the "id" field.
func (vc *VendorCreate) SetID(s string) *VendorCreate {
	vc.mutation.SetID(s)
	return vc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vc *VendorCreate) SetNillableID(s *string) *VendorCreate {
	if s != nil {
		vc.SetID(*s)
	}
	return vc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (vc *VendorCreate) SetOwner(o *Organization) *VendorCreate {
	return vc.SetOwnerID(o.ID)
}

// SetProfileID sets the "profile" edge to the VendorProfile entity by ID.
func (vc *VendorCreate) SetProfileID(id string) *VendorCreate {
	vc.mutation.SetProfileID(id)
	return vc
}

// SetProfile sets the "profile" edge to the VendorProfile entity.
func (vc *VendorCreate) SetProfile(v *VendorProfile) *VendorCreate {
	return vc.SetProfileID(v.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (vc *VendorCreate) AddEventIDs(ids ...string) *VendorCreate {
	vc.mutation.AddEventIDs(ids...)
	return vc
}

// AddEvents adds the "events" edges to the Event entity.
func (vc *VendorCreate) AddEvents(e ...*Event) *VendorCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vc.AddEventIDs(ids...)
}

// Mutation returns the VendorMutation object of the builder.
func (vc *VendorCreate) Mutation() *VendorMutation {
	return vc.mutation
}

// Save creates the Vendor in the database.
func (vc *VendorCreate) Save(ctx context.Context) (*Vendor, error) {
	if err := vc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VendorCreate) SaveX(ctx context.Context) *Vendor {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VendorCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VendorCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VendorCreate) defaults() error {
	if _, ok := vc.mutation.CreatedAt(); !ok {
		if vendor.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized vendor.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := vendor.DefaultCreatedAt()
		vc.mutation.SetCreatedAt(v)
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		if vendor.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized vendor.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := vendor.DefaultUpdatedAt()
		vc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vc.mutation.MappingID(); !ok {
		if vendor.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized vendor.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := vendor.DefaultMappingID()
		vc.mutation.SetMappingID(v)
	}
	if _, ok := vc.mutation.Tags(); !ok {
		v := vendor.DefaultTags
		vc.mutation.SetTags(v)
	}
	if _, ok := vc.mutation.VendorType(); !ok {
		v := vendor.DefaultVendorType
		vc.mutation.SetVendorType(v)
	}
	if _, ok := vc.mutation.OnboardingState(); !ok {
		v := vendor.DefaultOnboardingState
		vc.mutation.SetOnboardingState(v)
	}
	if _, ok := vc.mutation.ID(); !ok {
		if vendor.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized vendor.DefaultID (forgotten import generated/runtime?)")
		}
		v := vendor.DefaultID()
		vc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vc *VendorCreate) check() error {
	if _, ok := vc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "Vendor.mapping_id"`)}
	}
	if v, ok := vc.mutation.OwnerID(); ok {
		if err := vendor.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Vendor.owner_id": %w`, err)}
		}
	}
	if _, ok := vc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`generated: missing required field "Vendor.display_name"`)}
	}
	if v, ok := vc.mutation.DisplayName(); ok {
		if err := vendor.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "Vendor.display_name": %w`, err)}
		}
	}
	if _, ok := vc.mutation.VendorType(); !ok {
		return &ValidationError{Name: "vendor_type", err: errors.New(`generated: missing required field "Vendor.vendor_type"`)}
	}
	if v, ok := vc.mutation.VendorType(); ok {
		if err := vendor.VendorTypeValidator(v); err != nil {
			return &ValidationError{Name: "vendor_type", err: fmt.Errorf(`generated: validator failed for field "Vendor.vendor_type": %w`, err)}
		}
	}
	if _, ok := vc.mutation.OnboardingState(); !ok {
		return &ValidationError{Name: "onboarding_state", err: errors.New(`generated: missing required field "Vendor.onboarding_state"`)}
	}
	if v, ok := vc.mutation.OnboardingState(); ok {
		if err := vendor.OnboardingStateValidator(v); err != nil {
			return &ValidationError{Name: "onboarding_state", err: fmt.Errorf(`generated: validator failed for field "Vendor.onboarding_state": %w`, err)}
		}
	}
	if len(vc.mutation.ProfileIDs()) == 0 {
		return &ValidationError{Name: "profile", err: errors.New(`generated: missing required edge "Vendor.profile"`)}
	}
	return nil
}

func (vc *VendorCreate) sqlSave(ctx context.Context) (*Vendor, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Vendor.ID type: %T", _spec.ID.Value)
		}
	}
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VendorCreate) createSpec() (*Vendor, *sqlgraph.CreateSpec) {
	var (
		_node = &Vendor{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(vendor.Table, sqlgraph.NewFieldSpec(vendor.FieldID, field.TypeString))
	)
	_spec.Schema = vc.schemaConfig.Vendor
	if id, ok := vc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vc.mutation.CreatedAt(); ok {
		_spec.SetField(vendor.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vc.mutation.UpdatedAt(); ok {
		_spec.SetField(vendor.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vc.mutation.CreatedBy(); ok {
		_spec.SetField(vendor.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := vc.mutation.UpdatedBy(); ok {
		_spec.SetField(vendor.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := vc.mutation.DeletedAt(); ok {
		_spec.SetField(vendor.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := vc.mutation.DeletedBy(); ok {
		_spec.SetField(vendor.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = &value
	}
	if value, ok := vc.mutation.MappingID(); ok {
		_spec.SetField(vendor.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := vc.mutation.Tags(); ok {
		_spec.SetField(vendor.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := vc.mutation.DisplayName(); ok {
		_spec.SetField(vendor.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := vc.mutation.VendorType(); ok {
		_spec.SetField(vendor.FieldVendorType, field.TypeEnum, value)
		_node.VendorType = value
	}
	if value, ok := vc.mutation.OnboardingState(); ok {
		_spec.SetField(vendor.FieldOnboardingState, field.TypeEnum, value)
		_node.OnboardingState = value
	}
	if nodes := vc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendor.OwnerTable,
			Columns: []string{vendor.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = vc.schemaConfig.Vendor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   vendor.ProfileTable,
			Columns: []string{vendor.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = vc.schemaConfig.VendorProfile
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.EventsTable,
			Columns: []string{vendor.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = vc.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VendorCreateBulk is the builder for creating many Vendor entities in bulk.
type VendorCreateBulk struct {
	config
	err      error
	builders []*VendorCreate
}

// Save creates the Vendor entities in the database.
func (vcb *VendorCreateBulk) Save(ctx context.Context) ([]*Vendor, error) {
	if vcb.err != nil {
		return nil, vcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Vendor, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VendorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VendorCreateBulk) SaveX(ctx context.Context) []*Vendor {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VendorCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VendorCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
