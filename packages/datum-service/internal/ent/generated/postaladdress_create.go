// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/event"
	"github.com/datum-cloud/datum-os/internal/ent/generated/organization"
	"github.com/datum-cloud/datum-os/internal/ent/generated/postaladdress"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofile"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilepostaladdress"
)

// PostalAddressCreate is the builder for creating a PostalAddress entity.
type PostalAddressCreate struct {
	config
	mutation *PostalAddressMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pac *PostalAddressCreate) SetCreatedAt(t time.Time) *PostalAddressCreate {
	pac.mutation.SetCreatedAt(t)
	return pac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pac *PostalAddressCreate) SetNillableCreatedAt(t *time.Time) *PostalAddressCreate {
	if t != nil {
		pac.SetCreatedAt(*t)
	}
	return pac
}

// SetUpdatedAt sets the "updated_at" field.
func (pac *PostalAddressCreate) SetUpdatedAt(t time.Time) *PostalAddressCreate {
	pac.mutation.SetUpdatedAt(t)
	return pac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pac *PostalAddressCreate) SetNillableUpdatedAt(t *time.Time) *PostalAddressCreate {
	if t != nil {
		pac.SetUpdatedAt(*t)
	}
	return pac
}

// SetCreatedBy sets the "created_by" field.
func (pac *PostalAddressCreate) SetCreatedBy(s string) *PostalAddressCreate {
	pac.mutation.SetCreatedBy(s)
	return pac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pac *PostalAddressCreate) SetNillableCreatedBy(s *string) *PostalAddressCreate {
	if s != nil {
		pac.SetCreatedBy(*s)
	}
	return pac
}

// SetUpdatedBy sets the "updated_by" field.
func (pac *PostalAddressCreate) SetUpdatedBy(s string) *PostalAddressCreate {
	pac.mutation.SetUpdatedBy(s)
	return pac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pac *PostalAddressCreate) SetNillableUpdatedBy(s *string) *PostalAddressCreate {
	if s != nil {
		pac.SetUpdatedBy(*s)
	}
	return pac
}

// SetDeletedAt sets the "deleted_at" field.
func (pac *PostalAddressCreate) SetDeletedAt(t time.Time) *PostalAddressCreate {
	pac.mutation.SetDeletedAt(t)
	return pac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pac *PostalAddressCreate) SetNillableDeletedAt(t *time.Time) *PostalAddressCreate {
	if t != nil {
		pac.SetDeletedAt(*t)
	}
	return pac
}

// SetDeletedBy sets the "deleted_by" field.
func (pac *PostalAddressCreate) SetDeletedBy(s string) *PostalAddressCreate {
	pac.mutation.SetDeletedBy(s)
	return pac
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pac *PostalAddressCreate) SetNillableDeletedBy(s *string) *PostalAddressCreate {
	if s != nil {
		pac.SetDeletedBy(*s)
	}
	return pac
}

// SetMappingID sets the "mapping_id" field.
func (pac *PostalAddressCreate) SetMappingID(s string) *PostalAddressCreate {
	pac.mutation.SetMappingID(s)
	return pac
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (pac *PostalAddressCreate) SetNillableMappingID(s *string) *PostalAddressCreate {
	if s != nil {
		pac.SetMappingID(*s)
	}
	return pac
}

// SetTags sets the "tags" field.
func (pac *PostalAddressCreate) SetTags(s []string) *PostalAddressCreate {
	pac.mutation.SetTags(s)
	return pac
}

// SetOwnerID sets the "owner_id" field.
func (pac *PostalAddressCreate) SetOwnerID(s string) *PostalAddressCreate {
	pac.mutation.SetOwnerID(s)
	return pac
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pac *PostalAddressCreate) SetNillableOwnerID(s *string) *PostalAddressCreate {
	if s != nil {
		pac.SetOwnerID(*s)
	}
	return pac
}

// SetRegionCode sets the "region_code" field.
func (pac *PostalAddressCreate) SetRegionCode(s string) *PostalAddressCreate {
	pac.mutation.SetRegionCode(s)
	return pac
}

// SetLanguageCode sets the "language_code" field.
func (pac *PostalAddressCreate) SetLanguageCode(s string) *PostalAddressCreate {
	pac.mutation.SetLanguageCode(s)
	return pac
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (pac *PostalAddressCreate) SetNillableLanguageCode(s *string) *PostalAddressCreate {
	if s != nil {
		pac.SetLanguageCode(*s)
	}
	return pac
}

// SetPostalCode sets the "postal_code" field.
func (pac *PostalAddressCreate) SetPostalCode(s string) *PostalAddressCreate {
	pac.mutation.SetPostalCode(s)
	return pac
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (pac *PostalAddressCreate) SetNillablePostalCode(s *string) *PostalAddressCreate {
	if s != nil {
		pac.SetPostalCode(*s)
	}
	return pac
}

// SetSortingCode sets the "sorting_code" field.
func (pac *PostalAddressCreate) SetSortingCode(s string) *PostalAddressCreate {
	pac.mutation.SetSortingCode(s)
	return pac
}

// SetNillableSortingCode sets the "sorting_code" field if the given value is not nil.
func (pac *PostalAddressCreate) SetNillableSortingCode(s *string) *PostalAddressCreate {
	if s != nil {
		pac.SetSortingCode(*s)
	}
	return pac
}

// SetAdministrativeArea sets the "administrative_area" field.
func (pac *PostalAddressCreate) SetAdministrativeArea(s string) *PostalAddressCreate {
	pac.mutation.SetAdministrativeArea(s)
	return pac
}

// SetNillableAdministrativeArea sets the "administrative_area" field if the given value is not nil.
func (pac *PostalAddressCreate) SetNillableAdministrativeArea(s *string) *PostalAddressCreate {
	if s != nil {
		pac.SetAdministrativeArea(*s)
	}
	return pac
}

// SetLocality sets the "locality" field.
func (pac *PostalAddressCreate) SetLocality(s string) *PostalAddressCreate {
	pac.mutation.SetLocality(s)
	return pac
}

// SetNillableLocality sets the "locality" field if the given value is not nil.
func (pac *PostalAddressCreate) SetNillableLocality(s *string) *PostalAddressCreate {
	if s != nil {
		pac.SetLocality(*s)
	}
	return pac
}

// SetSublocality sets the "sublocality" field.
func (pac *PostalAddressCreate) SetSublocality(s string) *PostalAddressCreate {
	pac.mutation.SetSublocality(s)
	return pac
}

// SetNillableSublocality sets the "sublocality" field if the given value is not nil.
func (pac *PostalAddressCreate) SetNillableSublocality(s *string) *PostalAddressCreate {
	if s != nil {
		pac.SetSublocality(*s)
	}
	return pac
}

// SetAddressLines sets the "address_lines" field.
func (pac *PostalAddressCreate) SetAddressLines(s []string) *PostalAddressCreate {
	pac.mutation.SetAddressLines(s)
	return pac
}

// SetRecipients sets the "recipients" field.
func (pac *PostalAddressCreate) SetRecipients(s []string) *PostalAddressCreate {
	pac.mutation.SetRecipients(s)
	return pac
}

// SetOrganization sets the "organization" field.
func (pac *PostalAddressCreate) SetOrganization(s string) *PostalAddressCreate {
	pac.mutation.SetOrganization(s)
	return pac
}

// SetNillableOrganization sets the "organization" field if the given value is not nil.
func (pac *PostalAddressCreate) SetNillableOrganization(s *string) *PostalAddressCreate {
	if s != nil {
		pac.SetOrganization(*s)
	}
	return pac
}

// SetID sets the "id" field.
func (pac *PostalAddressCreate) SetID(s string) *PostalAddressCreate {
	pac.mutation.SetID(s)
	return pac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pac *PostalAddressCreate) SetNillableID(s *string) *PostalAddressCreate {
	if s != nil {
		pac.SetID(*s)
	}
	return pac
}

// SetOwner sets the "owner" edge to the Organization entity.
func (pac *PostalAddressCreate) SetOwner(o *Organization) *PostalAddressCreate {
	return pac.SetOwnerID(o.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (pac *PostalAddressCreate) AddEventIDs(ids ...string) *PostalAddressCreate {
	pac.mutation.AddEventIDs(ids...)
	return pac
}

// AddEvents adds the "events" edges to the Event entity.
func (pac *PostalAddressCreate) AddEvents(e ...*Event) *PostalAddressCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pac.AddEventIDs(ids...)
}

// AddProfileIDs adds the "profile" edge to the VendorProfile entity by IDs.
func (pac *PostalAddressCreate) AddProfileIDs(ids ...string) *PostalAddressCreate {
	pac.mutation.AddProfileIDs(ids...)
	return pac
}

// AddProfile adds the "profile" edges to the VendorProfile entity.
func (pac *PostalAddressCreate) AddProfile(v ...*VendorProfile) *PostalAddressCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pac.AddProfileIDs(ids...)
}

// AddVendorProfilePostalAddressIDs adds the "vendor_profile_postal_addresses" edge to the VendorProfilePostalAddress entity by IDs.
func (pac *PostalAddressCreate) AddVendorProfilePostalAddressIDs(ids ...string) *PostalAddressCreate {
	pac.mutation.AddVendorProfilePostalAddressIDs(ids...)
	return pac
}

// AddVendorProfilePostalAddresses adds the "vendor_profile_postal_addresses" edges to the VendorProfilePostalAddress entity.
func (pac *PostalAddressCreate) AddVendorProfilePostalAddresses(v ...*VendorProfilePostalAddress) *PostalAddressCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pac.AddVendorProfilePostalAddressIDs(ids...)
}

// Mutation returns the PostalAddressMutation object of the builder.
func (pac *PostalAddressCreate) Mutation() *PostalAddressMutation {
	return pac.mutation
}

// Save creates the PostalAddress in the database.
func (pac *PostalAddressCreate) Save(ctx context.Context) (*PostalAddress, error) {
	if err := pac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pac.sqlSave, pac.mutation, pac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pac *PostalAddressCreate) SaveX(ctx context.Context) *PostalAddress {
	v, err := pac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pac *PostalAddressCreate) Exec(ctx context.Context) error {
	_, err := pac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pac *PostalAddressCreate) ExecX(ctx context.Context) {
	if err := pac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pac *PostalAddressCreate) defaults() error {
	if _, ok := pac.mutation.CreatedAt(); !ok {
		if postaladdress.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized postaladdress.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := postaladdress.DefaultCreatedAt()
		pac.mutation.SetCreatedAt(v)
	}
	if _, ok := pac.mutation.UpdatedAt(); !ok {
		if postaladdress.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized postaladdress.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := postaladdress.DefaultUpdatedAt()
		pac.mutation.SetUpdatedAt(v)
	}
	if _, ok := pac.mutation.MappingID(); !ok {
		if postaladdress.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized postaladdress.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := postaladdress.DefaultMappingID()
		pac.mutation.SetMappingID(v)
	}
	if _, ok := pac.mutation.Tags(); !ok {
		v := postaladdress.DefaultTags
		pac.mutation.SetTags(v)
	}
	if _, ok := pac.mutation.ID(); !ok {
		if postaladdress.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized postaladdress.DefaultID (forgotten import generated/runtime?)")
		}
		v := postaladdress.DefaultID()
		pac.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pac *PostalAddressCreate) check() error {
	if _, ok := pac.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "PostalAddress.mapping_id"`)}
	}
	if v, ok := pac.mutation.OwnerID(); ok {
		if err := postaladdress.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.owner_id": %w`, err)}
		}
	}
	if _, ok := pac.mutation.RegionCode(); !ok {
		return &ValidationError{Name: "region_code", err: errors.New(`generated: missing required field "PostalAddress.region_code"`)}
	}
	if v, ok := pac.mutation.RegionCode(); ok {
		if err := postaladdress.RegionCodeValidator(v); err != nil {
			return &ValidationError{Name: "region_code", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.region_code": %w`, err)}
		}
	}
	if v, ok := pac.mutation.LanguageCode(); ok {
		if err := postaladdress.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.language_code": %w`, err)}
		}
	}
	if v, ok := pac.mutation.PostalCode(); ok {
		if err := postaladdress.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.postal_code": %w`, err)}
		}
	}
	if v, ok := pac.mutation.SortingCode(); ok {
		if err := postaladdress.SortingCodeValidator(v); err != nil {
			return &ValidationError{Name: "sorting_code", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.sorting_code": %w`, err)}
		}
	}
	if v, ok := pac.mutation.AdministrativeArea(); ok {
		if err := postaladdress.AdministrativeAreaValidator(v); err != nil {
			return &ValidationError{Name: "administrative_area", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.administrative_area": %w`, err)}
		}
	}
	if v, ok := pac.mutation.Locality(); ok {
		if err := postaladdress.LocalityValidator(v); err != nil {
			return &ValidationError{Name: "locality", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.locality": %w`, err)}
		}
	}
	if v, ok := pac.mutation.Sublocality(); ok {
		if err := postaladdress.SublocalityValidator(v); err != nil {
			return &ValidationError{Name: "sublocality", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.sublocality": %w`, err)}
		}
	}
	if _, ok := pac.mutation.AddressLines(); !ok {
		return &ValidationError{Name: "address_lines", err: errors.New(`generated: missing required field "PostalAddress.address_lines"`)}
	}
	if _, ok := pac.mutation.Recipients(); !ok {
		return &ValidationError{Name: "recipients", err: errors.New(`generated: missing required field "PostalAddress.recipients"`)}
	}
	if v, ok := pac.mutation.Organization(); ok {
		if err := postaladdress.OrganizationValidator(v); err != nil {
			return &ValidationError{Name: "organization", err: fmt.Errorf(`generated: validator failed for field "PostalAddress.organization": %w`, err)}
		}
	}
	return nil
}

func (pac *PostalAddressCreate) sqlSave(ctx context.Context) (*PostalAddress, error) {
	if err := pac.check(); err != nil {
		return nil, err
	}
	_node, _spec := pac.createSpec()
	if err := sqlgraph.CreateNode(ctx, pac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PostalAddress.ID type: %T", _spec.ID.Value)
		}
	}
	pac.mutation.id = &_node.ID
	pac.mutation.done = true
	return _node, nil
}

func (pac *PostalAddressCreate) createSpec() (*PostalAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &PostalAddress{config: pac.config}
		_spec = sqlgraph.NewCreateSpec(postaladdress.Table, sqlgraph.NewFieldSpec(postaladdress.FieldID, field.TypeString))
	)
	_spec.Schema = pac.schemaConfig.PostalAddress
	if id, ok := pac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pac.mutation.CreatedAt(); ok {
		_spec.SetField(postaladdress.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pac.mutation.UpdatedAt(); ok {
		_spec.SetField(postaladdress.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pac.mutation.CreatedBy(); ok {
		_spec.SetField(postaladdress.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := pac.mutation.UpdatedBy(); ok {
		_spec.SetField(postaladdress.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := pac.mutation.DeletedAt(); ok {
		_spec.SetField(postaladdress.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pac.mutation.DeletedBy(); ok {
		_spec.SetField(postaladdress.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = &value
	}
	if value, ok := pac.mutation.MappingID(); ok {
		_spec.SetField(postaladdress.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := pac.mutation.Tags(); ok {
		_spec.SetField(postaladdress.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := pac.mutation.RegionCode(); ok {
		_spec.SetField(postaladdress.FieldRegionCode, field.TypeString, value)
		_node.RegionCode = value
	}
	if value, ok := pac.mutation.LanguageCode(); ok {
		_spec.SetField(postaladdress.FieldLanguageCode, field.TypeString, value)
		_node.LanguageCode = &value
	}
	if value, ok := pac.mutation.PostalCode(); ok {
		_spec.SetField(postaladdress.FieldPostalCode, field.TypeString, value)
		_node.PostalCode = &value
	}
	if value, ok := pac.mutation.SortingCode(); ok {
		_spec.SetField(postaladdress.FieldSortingCode, field.TypeString, value)
		_node.SortingCode = &value
	}
	if value, ok := pac.mutation.AdministrativeArea(); ok {
		_spec.SetField(postaladdress.FieldAdministrativeArea, field.TypeString, value)
		_node.AdministrativeArea = &value
	}
	if value, ok := pac.mutation.Locality(); ok {
		_spec.SetField(postaladdress.FieldLocality, field.TypeString, value)
		_node.Locality = &value
	}
	if value, ok := pac.mutation.Sublocality(); ok {
		_spec.SetField(postaladdress.FieldSublocality, field.TypeString, value)
		_node.Sublocality = &value
	}
	if value, ok := pac.mutation.AddressLines(); ok {
		_spec.SetField(postaladdress.FieldAddressLines, field.TypeJSON, value)
		_node.AddressLines = value
	}
	if value, ok := pac.mutation.Recipients(); ok {
		_spec.SetField(postaladdress.FieldRecipients, field.TypeJSON, value)
		_node.Recipients = value
	}
	if value, ok := pac.mutation.Organization(); ok {
		_spec.SetField(postaladdress.FieldOrganization, field.TypeString, value)
		_node.Organization = &value
	}
	if nodes := pac.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postaladdress.OwnerTable,
			Columns: []string{postaladdress.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = pac.schemaConfig.PostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pac.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postaladdress.EventsTable,
			Columns: []string{postaladdress.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = pac.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pac.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   postaladdress.ProfileTable,
			Columns: postaladdress.ProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = pac.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VendorProfilePostalAddressCreate{config: pac.config, mutation: newVendorProfilePostalAddressMutation(pac.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pac.mutation.VendorProfilePostalAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   postaladdress.VendorProfilePostalAddressesTable,
			Columns: []string{postaladdress.VendorProfilePostalAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilepostaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = pac.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PostalAddressCreateBulk is the builder for creating many PostalAddress entities in bulk.
type PostalAddressCreateBulk struct {
	config
	err      error
	builders []*PostalAddressCreate
}

// Save creates the PostalAddress entities in the database.
func (pacb *PostalAddressCreateBulk) Save(ctx context.Context) ([]*PostalAddress, error) {
	if pacb.err != nil {
		return nil, pacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pacb.builders))
	nodes := make([]*PostalAddress, len(pacb.builders))
	mutators := make([]Mutator, len(pacb.builders))
	for i := range pacb.builders {
		func(i int, root context.Context) {
			builder := pacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PostalAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pacb *PostalAddressCreateBulk) SaveX(ctx context.Context) []*PostalAddress {
	v, err := pacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pacb *PostalAddressCreateBulk) Exec(ctx context.Context) error {
	_, err := pacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pacb *PostalAddressCreateBulk) ExecX(ctx context.Context) {
	if err := pacb.Exec(ctx); err != nil {
		panic(err)
	}
}
