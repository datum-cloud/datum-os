// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"

	"github.com/datum-cloud/datum-os/internal/ent/generated/contactlisthistory"
	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// ContactListHistoryDelete is the builder for deleting a ContactListHistory entity.
type ContactListHistoryDelete struct {
	config
	hooks    []Hook
	mutation *ContactListHistoryMutation
}

// Where appends a list predicates to the ContactListHistoryDelete builder.
func (clhd *ContactListHistoryDelete) Where(ps ...predicate.ContactListHistory) *ContactListHistoryDelete {
	clhd.mutation.Where(ps...)
	return clhd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (clhd *ContactListHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, clhd.sqlExec, clhd.mutation, clhd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (clhd *ContactListHistoryDelete) ExecX(ctx context.Context) int {
	n, err := clhd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (clhd *ContactListHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(contactlisthistory.Table, sqlgraph.NewFieldSpec(contactlisthistory.FieldID, field.TypeString))
	_spec.Node.Schema = clhd.schemaConfig.ContactListHistory
	ctx = internal.NewSchemaConfigContext(ctx, clhd.schemaConfig)
	if ps := clhd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, clhd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	clhd.mutation.done = true
	return affected, err
}

// ContactListHistoryDeleteOne is the builder for deleting a single ContactListHistory entity.
type ContactListHistoryDeleteOne struct {
	clhd *ContactListHistoryDelete
}

// Where appends a list predicates to the ContactListHistoryDelete builder.
func (clhdo *ContactListHistoryDeleteOne) Where(ps ...predicate.ContactListHistory) *ContactListHistoryDeleteOne {
	clhdo.clhd.mutation.Where(ps...)
	return clhdo
}

// Exec executes the deletion query.
func (clhdo *ContactListHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := clhdo.clhd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{contactlisthistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (clhdo *ContactListHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := clhdo.Exec(ctx); err != nil {
		panic(err)
	}
}
