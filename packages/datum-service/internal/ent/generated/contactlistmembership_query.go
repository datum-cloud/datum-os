// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contact"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contactlist"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contactlistmembership"
	"github.com/datum-cloud/datum-os/internal/ent/generated/event"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// ContactListMembershipQuery is the builder for querying ContactListMembership entities.
type ContactListMembershipQuery struct {
	config
	ctx             *QueryContext
	order           []contactlistmembership.OrderOption
	inters          []Interceptor
	predicates      []predicate.ContactListMembership
	withContactList *ContactListQuery
	withContact     *ContactQuery
	withEvents      *EventQuery
	modifiers       []func(*sql.Selector)
	loadTotal       []func(context.Context, []*ContactListMembership) error
	withNamedEvents map[string]*EventQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ContactListMembershipQuery builder.
func (clmq *ContactListMembershipQuery) Where(ps ...predicate.ContactListMembership) *ContactListMembershipQuery {
	clmq.predicates = append(clmq.predicates, ps...)
	return clmq
}

// Limit the number of records to be returned by this query.
func (clmq *ContactListMembershipQuery) Limit(limit int) *ContactListMembershipQuery {
	clmq.ctx.Limit = &limit
	return clmq
}

// Offset to start from.
func (clmq *ContactListMembershipQuery) Offset(offset int) *ContactListMembershipQuery {
	clmq.ctx.Offset = &offset
	return clmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (clmq *ContactListMembershipQuery) Unique(unique bool) *ContactListMembershipQuery {
	clmq.ctx.Unique = &unique
	return clmq
}

// Order specifies how the records should be ordered.
func (clmq *ContactListMembershipQuery) Order(o ...contactlistmembership.OrderOption) *ContactListMembershipQuery {
	clmq.order = append(clmq.order, o...)
	return clmq
}

// QueryContactList chains the current query on the "contact_list" edge.
func (clmq *ContactListMembershipQuery) QueryContactList() *ContactListQuery {
	query := (&ContactListClient{config: clmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contactlistmembership.Table, contactlistmembership.FieldID, selector),
			sqlgraph.To(contactlist.Table, contactlist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, contactlistmembership.ContactListTable, contactlistmembership.ContactListColumn),
		)
		schemaConfig := clmq.schemaConfig
		step.To.Schema = schemaConfig.ContactList
		step.Edge.Schema = schemaConfig.ContactListMembership
		fromU = sqlgraph.SetNeighbors(clmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContact chains the current query on the "contact" edge.
func (clmq *ContactListMembershipQuery) QueryContact() *ContactQuery {
	query := (&ContactClient{config: clmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contactlistmembership.Table, contactlistmembership.FieldID, selector),
			sqlgraph.To(contact.Table, contact.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, contactlistmembership.ContactTable, contactlistmembership.ContactColumn),
		)
		schemaConfig := clmq.schemaConfig
		step.To.Schema = schemaConfig.Contact
		step.Edge.Schema = schemaConfig.ContactListMembership
		fromU = sqlgraph.SetNeighbors(clmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvents chains the current query on the "events" edge.
func (clmq *ContactListMembershipQuery) QueryEvents() *EventQuery {
	query := (&EventClient{config: clmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contactlistmembership.Table, contactlistmembership.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, contactlistmembership.EventsTable, contactlistmembership.EventsColumn),
		)
		schemaConfig := clmq.schemaConfig
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.Event
		fromU = sqlgraph.SetNeighbors(clmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ContactListMembership entity from the query.
// Returns a *NotFoundError when no ContactListMembership was found.
func (clmq *ContactListMembershipQuery) First(ctx context.Context) (*ContactListMembership, error) {
	nodes, err := clmq.Limit(1).All(setContextOp(ctx, clmq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{contactlistmembership.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (clmq *ContactListMembershipQuery) FirstX(ctx context.Context) *ContactListMembership {
	node, err := clmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ContactListMembership ID from the query.
// Returns a *NotFoundError when no ContactListMembership ID was found.
func (clmq *ContactListMembershipQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = clmq.Limit(1).IDs(setContextOp(ctx, clmq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{contactlistmembership.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (clmq *ContactListMembershipQuery) FirstIDX(ctx context.Context) string {
	id, err := clmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ContactListMembership entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ContactListMembership entity is found.
// Returns a *NotFoundError when no ContactListMembership entities are found.
func (clmq *ContactListMembershipQuery) Only(ctx context.Context) (*ContactListMembership, error) {
	nodes, err := clmq.Limit(2).All(setContextOp(ctx, clmq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{contactlistmembership.Label}
	default:
		return nil, &NotSingularError{contactlistmembership.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (clmq *ContactListMembershipQuery) OnlyX(ctx context.Context) *ContactListMembership {
	node, err := clmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ContactListMembership ID in the query.
// Returns a *NotSingularError when more than one ContactListMembership ID is found.
// Returns a *NotFoundError when no entities are found.
func (clmq *ContactListMembershipQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = clmq.Limit(2).IDs(setContextOp(ctx, clmq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{contactlistmembership.Label}
	default:
		err = &NotSingularError{contactlistmembership.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (clmq *ContactListMembershipQuery) OnlyIDX(ctx context.Context) string {
	id, err := clmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ContactListMemberships.
func (clmq *ContactListMembershipQuery) All(ctx context.Context) ([]*ContactListMembership, error) {
	ctx = setContextOp(ctx, clmq.ctx, ent.OpQueryAll)
	if err := clmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ContactListMembership, *ContactListMembershipQuery]()
	return withInterceptors[[]*ContactListMembership](ctx, clmq, qr, clmq.inters)
}

// AllX is like All, but panics if an error occurs.
func (clmq *ContactListMembershipQuery) AllX(ctx context.Context) []*ContactListMembership {
	nodes, err := clmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ContactListMembership IDs.
func (clmq *ContactListMembershipQuery) IDs(ctx context.Context) (ids []string, err error) {
	if clmq.ctx.Unique == nil && clmq.path != nil {
		clmq.Unique(true)
	}
	ctx = setContextOp(ctx, clmq.ctx, ent.OpQueryIDs)
	if err = clmq.Select(contactlistmembership.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (clmq *ContactListMembershipQuery) IDsX(ctx context.Context) []string {
	ids, err := clmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (clmq *ContactListMembershipQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, clmq.ctx, ent.OpQueryCount)
	if err := clmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, clmq, querierCount[*ContactListMembershipQuery](), clmq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (clmq *ContactListMembershipQuery) CountX(ctx context.Context) int {
	count, err := clmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (clmq *ContactListMembershipQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, clmq.ctx, ent.OpQueryExist)
	switch _, err := clmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (clmq *ContactListMembershipQuery) ExistX(ctx context.Context) bool {
	exist, err := clmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ContactListMembershipQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (clmq *ContactListMembershipQuery) Clone() *ContactListMembershipQuery {
	if clmq == nil {
		return nil
	}
	return &ContactListMembershipQuery{
		config:          clmq.config,
		ctx:             clmq.ctx.Clone(),
		order:           append([]contactlistmembership.OrderOption{}, clmq.order...),
		inters:          append([]Interceptor{}, clmq.inters...),
		predicates:      append([]predicate.ContactListMembership{}, clmq.predicates...),
		withContactList: clmq.withContactList.Clone(),
		withContact:     clmq.withContact.Clone(),
		withEvents:      clmq.withEvents.Clone(),
		// clone intermediate query.
		sql:  clmq.sql.Clone(),
		path: clmq.path,
	}
}

// WithContactList tells the query-builder to eager-load the nodes that are connected to
// the "contact_list" edge. The optional arguments are used to configure the query builder of the edge.
func (clmq *ContactListMembershipQuery) WithContactList(opts ...func(*ContactListQuery)) *ContactListMembershipQuery {
	query := (&ContactListClient{config: clmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clmq.withContactList = query
	return clmq
}

// WithContact tells the query-builder to eager-load the nodes that are connected to
// the "contact" edge. The optional arguments are used to configure the query builder of the edge.
func (clmq *ContactListMembershipQuery) WithContact(opts ...func(*ContactQuery)) *ContactListMembershipQuery {
	query := (&ContactClient{config: clmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clmq.withContact = query
	return clmq
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (clmq *ContactListMembershipQuery) WithEvents(opts ...func(*EventQuery)) *ContactListMembershipQuery {
	query := (&EventClient{config: clmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clmq.withEvents = query
	return clmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ContactListMembership.Query().
//		GroupBy(contactlistmembership.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (clmq *ContactListMembershipQuery) GroupBy(field string, fields ...string) *ContactListMembershipGroupBy {
	clmq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ContactListMembershipGroupBy{build: clmq}
	grbuild.flds = &clmq.ctx.Fields
	grbuild.label = contactlistmembership.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ContactListMembership.Query().
//		Select(contactlistmembership.FieldCreatedAt).
//		Scan(ctx, &v)
func (clmq *ContactListMembershipQuery) Select(fields ...string) *ContactListMembershipSelect {
	clmq.ctx.Fields = append(clmq.ctx.Fields, fields...)
	sbuild := &ContactListMembershipSelect{ContactListMembershipQuery: clmq}
	sbuild.label = contactlistmembership.Label
	sbuild.flds, sbuild.scan = &clmq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ContactListMembershipSelect configured with the given aggregations.
func (clmq *ContactListMembershipQuery) Aggregate(fns ...AggregateFunc) *ContactListMembershipSelect {
	return clmq.Select().Aggregate(fns...)
}

func (clmq *ContactListMembershipQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range clmq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, clmq); err != nil {
				return err
			}
		}
	}
	for _, f := range clmq.ctx.Fields {
		if !contactlistmembership.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if clmq.path != nil {
		prev, err := clmq.path(ctx)
		if err != nil {
			return err
		}
		clmq.sql = prev
	}
	if contactlistmembership.Policy == nil {
		return errors.New("generated: uninitialized contactlistmembership.Policy (forgotten import generated/runtime?)")
	}
	if err := contactlistmembership.Policy.EvalQuery(ctx, clmq); err != nil {
		return err
	}
	return nil
}

func (clmq *ContactListMembershipQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ContactListMembership, error) {
	var (
		nodes       = []*ContactListMembership{}
		_spec       = clmq.querySpec()
		loadedTypes = [3]bool{
			clmq.withContactList != nil,
			clmq.withContact != nil,
			clmq.withEvents != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ContactListMembership).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ContactListMembership{config: clmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = clmq.schemaConfig.ContactListMembership
	ctx = internal.NewSchemaConfigContext(ctx, clmq.schemaConfig)
	if len(clmq.modifiers) > 0 {
		_spec.Modifiers = clmq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, clmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := clmq.withContactList; query != nil {
		if err := clmq.loadContactList(ctx, query, nodes, nil,
			func(n *ContactListMembership, e *ContactList) { n.Edges.ContactList = e }); err != nil {
			return nil, err
		}
	}
	if query := clmq.withContact; query != nil {
		if err := clmq.loadContact(ctx, query, nodes, nil,
			func(n *ContactListMembership, e *Contact) { n.Edges.Contact = e }); err != nil {
			return nil, err
		}
	}
	if query := clmq.withEvents; query != nil {
		if err := clmq.loadEvents(ctx, query, nodes,
			func(n *ContactListMembership) { n.Edges.Events = []*Event{} },
			func(n *ContactListMembership, e *Event) { n.Edges.Events = append(n.Edges.Events, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range clmq.withNamedEvents {
		if err := clmq.loadEvents(ctx, query, nodes,
			func(n *ContactListMembership) { n.appendNamedEvents(name) },
			func(n *ContactListMembership, e *Event) { n.appendNamedEvents(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range clmq.loadTotal {
		if err := clmq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (clmq *ContactListMembershipQuery) loadContactList(ctx context.Context, query *ContactListQuery, nodes []*ContactListMembership, init func(*ContactListMembership), assign func(*ContactListMembership, *ContactList)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*ContactListMembership)
	for i := range nodes {
		fk := nodes[i].ContactListID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(contactlist.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "contact_list_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (clmq *ContactListMembershipQuery) loadContact(ctx context.Context, query *ContactQuery, nodes []*ContactListMembership, init func(*ContactListMembership), assign func(*ContactListMembership, *Contact)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*ContactListMembership)
	for i := range nodes {
		fk := nodes[i].ContactID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(contact.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "contact_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (clmq *ContactListMembershipQuery) loadEvents(ctx context.Context, query *EventQuery, nodes []*ContactListMembership, init func(*ContactListMembership), assign func(*ContactListMembership, *Event)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ContactListMembership)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Event(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(contactlistmembership.EventsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.contact_list_membership_events
		if fk == nil {
			return fmt.Errorf(`foreign-key "contact_list_membership_events" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "contact_list_membership_events" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (clmq *ContactListMembershipQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := clmq.querySpec()
	_spec.Node.Schema = clmq.schemaConfig.ContactListMembership
	ctx = internal.NewSchemaConfigContext(ctx, clmq.schemaConfig)
	if len(clmq.modifiers) > 0 {
		_spec.Modifiers = clmq.modifiers
	}
	_spec.Node.Columns = clmq.ctx.Fields
	if len(clmq.ctx.Fields) > 0 {
		_spec.Unique = clmq.ctx.Unique != nil && *clmq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, clmq.driver, _spec)
}

func (clmq *ContactListMembershipQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(contactlistmembership.Table, contactlistmembership.Columns, sqlgraph.NewFieldSpec(contactlistmembership.FieldID, field.TypeString))
	_spec.From = clmq.sql
	if unique := clmq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if clmq.path != nil {
		_spec.Unique = true
	}
	if fields := clmq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contactlistmembership.FieldID)
		for i := range fields {
			if fields[i] != contactlistmembership.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if clmq.withContactList != nil {
			_spec.Node.AddColumnOnce(contactlistmembership.FieldContactListID)
		}
		if clmq.withContact != nil {
			_spec.Node.AddColumnOnce(contactlistmembership.FieldContactID)
		}
	}
	if ps := clmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := clmq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := clmq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := clmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (clmq *ContactListMembershipQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(clmq.driver.Dialect())
	t1 := builder.Table(contactlistmembership.Table)
	columns := clmq.ctx.Fields
	if len(columns) == 0 {
		columns = contactlistmembership.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if clmq.sql != nil {
		selector = clmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if clmq.ctx.Unique != nil && *clmq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(clmq.schemaConfig.ContactListMembership)
	ctx = internal.NewSchemaConfigContext(ctx, clmq.schemaConfig)
	selector.WithContext(ctx)
	for _, p := range clmq.predicates {
		p(selector)
	}
	for _, p := range clmq.order {
		p(selector)
	}
	if offset := clmq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := clmq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedEvents tells the query-builder to eager-load the nodes that are connected to the "events"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (clmq *ContactListMembershipQuery) WithNamedEvents(name string, opts ...func(*EventQuery)) *ContactListMembershipQuery {
	query := (&EventClient{config: clmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if clmq.withNamedEvents == nil {
		clmq.withNamedEvents = make(map[string]*EventQuery)
	}
	clmq.withNamedEvents[name] = query
	return clmq
}

// ContactListMembershipGroupBy is the group-by builder for ContactListMembership entities.
type ContactListMembershipGroupBy struct {
	selector
	build *ContactListMembershipQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (clmgb *ContactListMembershipGroupBy) Aggregate(fns ...AggregateFunc) *ContactListMembershipGroupBy {
	clmgb.fns = append(clmgb.fns, fns...)
	return clmgb
}

// Scan applies the selector query and scans the result into the given value.
func (clmgb *ContactListMembershipGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, clmgb.build.ctx, ent.OpQueryGroupBy)
	if err := clmgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ContactListMembershipQuery, *ContactListMembershipGroupBy](ctx, clmgb.build, clmgb, clmgb.build.inters, v)
}

func (clmgb *ContactListMembershipGroupBy) sqlScan(ctx context.Context, root *ContactListMembershipQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(clmgb.fns))
	for _, fn := range clmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*clmgb.flds)+len(clmgb.fns))
		for _, f := range *clmgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*clmgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := clmgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ContactListMembershipSelect is the builder for selecting fields of ContactListMembership entities.
type ContactListMembershipSelect struct {
	*ContactListMembershipQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (clms *ContactListMembershipSelect) Aggregate(fns ...AggregateFunc) *ContactListMembershipSelect {
	clms.fns = append(clms.fns, fns...)
	return clms
}

// Scan applies the selector query and scans the result into the given value.
func (clms *ContactListMembershipSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, clms.ctx, ent.OpQuerySelect)
	if err := clms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ContactListMembershipQuery, *ContactListMembershipSelect](ctx, clms.ContactListMembershipQuery, clms, clms.inters, v)
}

func (clms *ContactListMembershipSelect) sqlScan(ctx context.Context, root *ContactListMembershipQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(clms.fns))
	for _, fn := range clms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*clms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := clms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
