// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorhistory"
	"github.com/datum-cloud/datum-os/pkg/enthistory"
	"github.com/datum-cloud/datum-os/pkg/enums"
)

// VendorHistoryCreate is the builder for creating a VendorHistory entity.
type VendorHistoryCreate struct {
	config
	mutation *VendorHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (vhc *VendorHistoryCreate) SetHistoryTime(t time.Time) *VendorHistoryCreate {
	vhc.mutation.SetHistoryTime(t)
	return vhc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (vhc *VendorHistoryCreate) SetNillableHistoryTime(t *time.Time) *VendorHistoryCreate {
	if t != nil {
		vhc.SetHistoryTime(*t)
	}
	return vhc
}

// SetRef sets the "ref" field.
func (vhc *VendorHistoryCreate) SetRef(s string) *VendorHistoryCreate {
	vhc.mutation.SetRef(s)
	return vhc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (vhc *VendorHistoryCreate) SetNillableRef(s *string) *VendorHistoryCreate {
	if s != nil {
		vhc.SetRef(*s)
	}
	return vhc
}

// SetOperation sets the "operation" field.
func (vhc *VendorHistoryCreate) SetOperation(et enthistory.OpType) *VendorHistoryCreate {
	vhc.mutation.SetOperation(et)
	return vhc
}

// SetCreatedAt sets the "created_at" field.
func (vhc *VendorHistoryCreate) SetCreatedAt(t time.Time) *VendorHistoryCreate {
	vhc.mutation.SetCreatedAt(t)
	return vhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vhc *VendorHistoryCreate) SetNillableCreatedAt(t *time.Time) *VendorHistoryCreate {
	if t != nil {
		vhc.SetCreatedAt(*t)
	}
	return vhc
}

// SetUpdatedAt sets the "updated_at" field.
func (vhc *VendorHistoryCreate) SetUpdatedAt(t time.Time) *VendorHistoryCreate {
	vhc.mutation.SetUpdatedAt(t)
	return vhc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vhc *VendorHistoryCreate) SetNillableUpdatedAt(t *time.Time) *VendorHistoryCreate {
	if t != nil {
		vhc.SetUpdatedAt(*t)
	}
	return vhc
}

// SetCreatedBy sets the "created_by" field.
func (vhc *VendorHistoryCreate) SetCreatedBy(s string) *VendorHistoryCreate {
	vhc.mutation.SetCreatedBy(s)
	return vhc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vhc *VendorHistoryCreate) SetNillableCreatedBy(s *string) *VendorHistoryCreate {
	if s != nil {
		vhc.SetCreatedBy(*s)
	}
	return vhc
}

// SetUpdatedBy sets the "updated_by" field.
func (vhc *VendorHistoryCreate) SetUpdatedBy(s string) *VendorHistoryCreate {
	vhc.mutation.SetUpdatedBy(s)
	return vhc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vhc *VendorHistoryCreate) SetNillableUpdatedBy(s *string) *VendorHistoryCreate {
	if s != nil {
		vhc.SetUpdatedBy(*s)
	}
	return vhc
}

// SetDeletedAt sets the "deleted_at" field.
func (vhc *VendorHistoryCreate) SetDeletedAt(t time.Time) *VendorHistoryCreate {
	vhc.mutation.SetDeletedAt(t)
	return vhc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vhc *VendorHistoryCreate) SetNillableDeletedAt(t *time.Time) *VendorHistoryCreate {
	if t != nil {
		vhc.SetDeletedAt(*t)
	}
	return vhc
}

// SetDeletedBy sets the "deleted_by" field.
func (vhc *VendorHistoryCreate) SetDeletedBy(s string) *VendorHistoryCreate {
	vhc.mutation.SetDeletedBy(s)
	return vhc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vhc *VendorHistoryCreate) SetNillableDeletedBy(s *string) *VendorHistoryCreate {
	if s != nil {
		vhc.SetDeletedBy(*s)
	}
	return vhc
}

// SetMappingID sets the "mapping_id" field.
func (vhc *VendorHistoryCreate) SetMappingID(s string) *VendorHistoryCreate {
	vhc.mutation.SetMappingID(s)
	return vhc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (vhc *VendorHistoryCreate) SetNillableMappingID(s *string) *VendorHistoryCreate {
	if s != nil {
		vhc.SetMappingID(*s)
	}
	return vhc
}

// SetTags sets the "tags" field.
func (vhc *VendorHistoryCreate) SetTags(s []string) *VendorHistoryCreate {
	vhc.mutation.SetTags(s)
	return vhc
}

// SetOwnerID sets the "owner_id" field.
func (vhc *VendorHistoryCreate) SetOwnerID(s string) *VendorHistoryCreate {
	vhc.mutation.SetOwnerID(s)
	return vhc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (vhc *VendorHistoryCreate) SetNillableOwnerID(s *string) *VendorHistoryCreate {
	if s != nil {
		vhc.SetOwnerID(*s)
	}
	return vhc
}

// SetDisplayName sets the "display_name" field.
func (vhc *VendorHistoryCreate) SetDisplayName(s string) *VendorHistoryCreate {
	vhc.mutation.SetDisplayName(s)
	return vhc
}

// SetVendorType sets the "vendor_type" field.
func (vhc *VendorHistoryCreate) SetVendorType(et enums.VendorType) *VendorHistoryCreate {
	vhc.mutation.SetVendorType(et)
	return vhc
}

// SetNillableVendorType sets the "vendor_type" field if the given value is not nil.
func (vhc *VendorHistoryCreate) SetNillableVendorType(et *enums.VendorType) *VendorHistoryCreate {
	if et != nil {
		vhc.SetVendorType(*et)
	}
	return vhc
}

// SetOnboardingState sets the "onboarding_state" field.
func (vhc *VendorHistoryCreate) SetOnboardingState(es enums.OnboardingState) *VendorHistoryCreate {
	vhc.mutation.SetOnboardingState(es)
	return vhc
}

// SetNillableOnboardingState sets the "onboarding_state" field if the given value is not nil.
func (vhc *VendorHistoryCreate) SetNillableOnboardingState(es *enums.OnboardingState) *VendorHistoryCreate {
	if es != nil {
		vhc.SetOnboardingState(*es)
	}
	return vhc
}

// SetID sets the "id" field.
func (vhc *VendorHistoryCreate) SetID(s string) *VendorHistoryCreate {
	vhc.mutation.SetID(s)
	return vhc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vhc *VendorHistoryCreate) SetNillableID(s *string) *VendorHistoryCreate {
	if s != nil {
		vhc.SetID(*s)
	}
	return vhc
}

// Mutation returns the VendorHistoryMutation object of the builder.
func (vhc *VendorHistoryCreate) Mutation() *VendorHistoryMutation {
	return vhc.mutation
}

// Save creates the VendorHistory in the database.
func (vhc *VendorHistoryCreate) Save(ctx context.Context) (*VendorHistory, error) {
	vhc.defaults()
	return withHooks(ctx, vhc.sqlSave, vhc.mutation, vhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vhc *VendorHistoryCreate) SaveX(ctx context.Context) *VendorHistory {
	v, err := vhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vhc *VendorHistoryCreate) Exec(ctx context.Context) error {
	_, err := vhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vhc *VendorHistoryCreate) ExecX(ctx context.Context) {
	if err := vhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vhc *VendorHistoryCreate) defaults() {
	if _, ok := vhc.mutation.HistoryTime(); !ok {
		v := vendorhistory.DefaultHistoryTime()
		vhc.mutation.SetHistoryTime(v)
	}
	if _, ok := vhc.mutation.CreatedAt(); !ok {
		v := vendorhistory.DefaultCreatedAt()
		vhc.mutation.SetCreatedAt(v)
	}
	if _, ok := vhc.mutation.UpdatedAt(); !ok {
		v := vendorhistory.DefaultUpdatedAt()
		vhc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vhc.mutation.MappingID(); !ok {
		v := vendorhistory.DefaultMappingID()
		vhc.mutation.SetMappingID(v)
	}
	if _, ok := vhc.mutation.Tags(); !ok {
		v := vendorhistory.DefaultTags
		vhc.mutation.SetTags(v)
	}
	if _, ok := vhc.mutation.VendorType(); !ok {
		v := vendorhistory.DefaultVendorType
		vhc.mutation.SetVendorType(v)
	}
	if _, ok := vhc.mutation.OnboardingState(); !ok {
		v := vendorhistory.DefaultOnboardingState
		vhc.mutation.SetOnboardingState(v)
	}
	if _, ok := vhc.mutation.ID(); !ok {
		v := vendorhistory.DefaultID()
		vhc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vhc *VendorHistoryCreate) check() error {
	if _, ok := vhc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "VendorHistory.history_time"`)}
	}
	if _, ok := vhc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "VendorHistory.operation"`)}
	}
	if v, ok := vhc.mutation.Operation(); ok {
		if err := vendorhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "VendorHistory.operation": %w`, err)}
		}
	}
	if _, ok := vhc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "VendorHistory.mapping_id"`)}
	}
	if _, ok := vhc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`generated: missing required field "VendorHistory.display_name"`)}
	}
	if _, ok := vhc.mutation.VendorType(); !ok {
		return &ValidationError{Name: "vendor_type", err: errors.New(`generated: missing required field "VendorHistory.vendor_type"`)}
	}
	if v, ok := vhc.mutation.VendorType(); ok {
		if err := vendorhistory.VendorTypeValidator(v); err != nil {
			return &ValidationError{Name: "vendor_type", err: fmt.Errorf(`generated: validator failed for field "VendorHistory.vendor_type": %w`, err)}
		}
	}
	if _, ok := vhc.mutation.OnboardingState(); !ok {
		return &ValidationError{Name: "onboarding_state", err: errors.New(`generated: missing required field "VendorHistory.onboarding_state"`)}
	}
	if v, ok := vhc.mutation.OnboardingState(); ok {
		if err := vendorhistory.OnboardingStateValidator(v); err != nil {
			return &ValidationError{Name: "onboarding_state", err: fmt.Errorf(`generated: validator failed for field "VendorHistory.onboarding_state": %w`, err)}
		}
	}
	return nil
}

func (vhc *VendorHistoryCreate) sqlSave(ctx context.Context) (*VendorHistory, error) {
	if err := vhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected VendorHistory.ID type: %T", _spec.ID.Value)
		}
	}
	vhc.mutation.id = &_node.ID
	vhc.mutation.done = true
	return _node, nil
}

func (vhc *VendorHistoryCreate) createSpec() (*VendorHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &VendorHistory{config: vhc.config}
		_spec = sqlgraph.NewCreateSpec(vendorhistory.Table, sqlgraph.NewFieldSpec(vendorhistory.FieldID, field.TypeString))
	)
	_spec.Schema = vhc.schemaConfig.VendorHistory
	if id, ok := vhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vhc.mutation.HistoryTime(); ok {
		_spec.SetField(vendorhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := vhc.mutation.Ref(); ok {
		_spec.SetField(vendorhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := vhc.mutation.Operation(); ok {
		_spec.SetField(vendorhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := vhc.mutation.CreatedAt(); ok {
		_spec.SetField(vendorhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vhc.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vhc.mutation.CreatedBy(); ok {
		_spec.SetField(vendorhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := vhc.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := vhc.mutation.DeletedAt(); ok {
		_spec.SetField(vendorhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := vhc.mutation.DeletedBy(); ok {
		_spec.SetField(vendorhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = &value
	}
	if value, ok := vhc.mutation.MappingID(); ok {
		_spec.SetField(vendorhistory.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := vhc.mutation.Tags(); ok {
		_spec.SetField(vendorhistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := vhc.mutation.OwnerID(); ok {
		_spec.SetField(vendorhistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := vhc.mutation.DisplayName(); ok {
		_spec.SetField(vendorhistory.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := vhc.mutation.VendorType(); ok {
		_spec.SetField(vendorhistory.FieldVendorType, field.TypeEnum, value)
		_node.VendorType = value
	}
	if value, ok := vhc.mutation.OnboardingState(); ok {
		_spec.SetField(vendorhistory.FieldOnboardingState, field.TypeEnum, value)
		_node.OnboardingState = value
	}
	return _node, _spec
}

// VendorHistoryCreateBulk is the builder for creating many VendorHistory entities in bulk.
type VendorHistoryCreateBulk struct {
	config
	err      error
	builders []*VendorHistoryCreate
}

// Save creates the VendorHistory entities in the database.
func (vhcb *VendorHistoryCreateBulk) Save(ctx context.Context) ([]*VendorHistory, error) {
	if vhcb.err != nil {
		return nil, vhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vhcb.builders))
	nodes := make([]*VendorHistory, len(vhcb.builders))
	mutators := make([]Mutator, len(vhcb.builders))
	for i := range vhcb.builders {
		func(i int, root context.Context) {
			builder := vhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VendorHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vhcb *VendorHistoryCreateBulk) SaveX(ctx context.Context) []*VendorHistory {
	v, err := vhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vhcb *VendorHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := vhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vhcb *VendorHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := vhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
