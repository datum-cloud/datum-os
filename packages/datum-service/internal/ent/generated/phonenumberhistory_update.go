// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/phonenumberhistory"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"
	"github.com/datum-cloud/datum-os/pkg/enums"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// PhoneNumberHistoryUpdate is the builder for updating PhoneNumberHistory entities.
type PhoneNumberHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *PhoneNumberHistoryMutation
}

// Where appends a list predicates to the PhoneNumberHistoryUpdate builder.
func (pnhu *PhoneNumberHistoryUpdate) Where(ps ...predicate.PhoneNumberHistory) *PhoneNumberHistoryUpdate {
	pnhu.mutation.Where(ps...)
	return pnhu
}

// SetUpdatedAt sets the "updated_at" field.
func (pnhu *PhoneNumberHistoryUpdate) SetUpdatedAt(t time.Time) *PhoneNumberHistoryUpdate {
	pnhu.mutation.SetUpdatedAt(t)
	return pnhu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pnhu *PhoneNumberHistoryUpdate) ClearUpdatedAt() *PhoneNumberHistoryUpdate {
	pnhu.mutation.ClearUpdatedAt()
	return pnhu
}

// SetUpdatedBy sets the "updated_by" field.
func (pnhu *PhoneNumberHistoryUpdate) SetUpdatedBy(s string) *PhoneNumberHistoryUpdate {
	pnhu.mutation.SetUpdatedBy(s)
	return pnhu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pnhu *PhoneNumberHistoryUpdate) SetNillableUpdatedBy(s *string) *PhoneNumberHistoryUpdate {
	if s != nil {
		pnhu.SetUpdatedBy(*s)
	}
	return pnhu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pnhu *PhoneNumberHistoryUpdate) ClearUpdatedBy() *PhoneNumberHistoryUpdate {
	pnhu.mutation.ClearUpdatedBy()
	return pnhu
}

// SetDeletedAt sets the "deleted_at" field.
func (pnhu *PhoneNumberHistoryUpdate) SetDeletedAt(t time.Time) *PhoneNumberHistoryUpdate {
	pnhu.mutation.SetDeletedAt(t)
	return pnhu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pnhu *PhoneNumberHistoryUpdate) SetNillableDeletedAt(t *time.Time) *PhoneNumberHistoryUpdate {
	if t != nil {
		pnhu.SetDeletedAt(*t)
	}
	return pnhu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pnhu *PhoneNumberHistoryUpdate) ClearDeletedAt() *PhoneNumberHistoryUpdate {
	pnhu.mutation.ClearDeletedAt()
	return pnhu
}

// SetDeletedBy sets the "deleted_by" field.
func (pnhu *PhoneNumberHistoryUpdate) SetDeletedBy(s string) *PhoneNumberHistoryUpdate {
	pnhu.mutation.SetDeletedBy(s)
	return pnhu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pnhu *PhoneNumberHistoryUpdate) SetNillableDeletedBy(s *string) *PhoneNumberHistoryUpdate {
	if s != nil {
		pnhu.SetDeletedBy(*s)
	}
	return pnhu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (pnhu *PhoneNumberHistoryUpdate) ClearDeletedBy() *PhoneNumberHistoryUpdate {
	pnhu.mutation.ClearDeletedBy()
	return pnhu
}

// SetTags sets the "tags" field.
func (pnhu *PhoneNumberHistoryUpdate) SetTags(s []string) *PhoneNumberHistoryUpdate {
	pnhu.mutation.SetTags(s)
	return pnhu
}

// AppendTags appends s to the "tags" field.
func (pnhu *PhoneNumberHistoryUpdate) AppendTags(s []string) *PhoneNumberHistoryUpdate {
	pnhu.mutation.AppendTags(s)
	return pnhu
}

// ClearTags clears the value of the "tags" field.
func (pnhu *PhoneNumberHistoryUpdate) ClearTags() *PhoneNumberHistoryUpdate {
	pnhu.mutation.ClearTags()
	return pnhu
}

// SetOwnerID sets the "owner_id" field.
func (pnhu *PhoneNumberHistoryUpdate) SetOwnerID(s string) *PhoneNumberHistoryUpdate {
	pnhu.mutation.SetOwnerID(s)
	return pnhu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pnhu *PhoneNumberHistoryUpdate) SetNillableOwnerID(s *string) *PhoneNumberHistoryUpdate {
	if s != nil {
		pnhu.SetOwnerID(*s)
	}
	return pnhu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (pnhu *PhoneNumberHistoryUpdate) ClearOwnerID() *PhoneNumberHistoryUpdate {
	pnhu.mutation.ClearOwnerID()
	return pnhu
}

// SetKind sets the "kind" field.
func (pnhu *PhoneNumberHistoryUpdate) SetKind(ennuty enums.PhoneNumberType) *PhoneNumberHistoryUpdate {
	pnhu.mutation.SetKind(ennuty)
	return pnhu
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (pnhu *PhoneNumberHistoryUpdate) SetNillableKind(ennuty *enums.PhoneNumberType) *PhoneNumberHistoryUpdate {
	if ennuty != nil {
		pnhu.SetKind(*ennuty)
	}
	return pnhu
}

// SetRegionCode sets the "region_code" field.
func (pnhu *PhoneNumberHistoryUpdate) SetRegionCode(s string) *PhoneNumberHistoryUpdate {
	pnhu.mutation.SetRegionCode(s)
	return pnhu
}

// SetNillableRegionCode sets the "region_code" field if the given value is not nil.
func (pnhu *PhoneNumberHistoryUpdate) SetNillableRegionCode(s *string) *PhoneNumberHistoryUpdate {
	if s != nil {
		pnhu.SetRegionCode(*s)
	}
	return pnhu
}

// ClearRegionCode clears the value of the "region_code" field.
func (pnhu *PhoneNumberHistoryUpdate) ClearRegionCode() *PhoneNumberHistoryUpdate {
	pnhu.mutation.ClearRegionCode()
	return pnhu
}

// SetShortCode sets the "short_code" field.
func (pnhu *PhoneNumberHistoryUpdate) SetShortCode(s string) *PhoneNumberHistoryUpdate {
	pnhu.mutation.SetShortCode(s)
	return pnhu
}

// SetNillableShortCode sets the "short_code" field if the given value is not nil.
func (pnhu *PhoneNumberHistoryUpdate) SetNillableShortCode(s *string) *PhoneNumberHistoryUpdate {
	if s != nil {
		pnhu.SetShortCode(*s)
	}
	return pnhu
}

// ClearShortCode clears the value of the "short_code" field.
func (pnhu *PhoneNumberHistoryUpdate) ClearShortCode() *PhoneNumberHistoryUpdate {
	pnhu.mutation.ClearShortCode()
	return pnhu
}

// SetNumber sets the "number" field.
func (pnhu *PhoneNumberHistoryUpdate) SetNumber(s string) *PhoneNumberHistoryUpdate {
	pnhu.mutation.SetNumber(s)
	return pnhu
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (pnhu *PhoneNumberHistoryUpdate) SetNillableNumber(s *string) *PhoneNumberHistoryUpdate {
	if s != nil {
		pnhu.SetNumber(*s)
	}
	return pnhu
}

// ClearNumber clears the value of the "number" field.
func (pnhu *PhoneNumberHistoryUpdate) ClearNumber() *PhoneNumberHistoryUpdate {
	pnhu.mutation.ClearNumber()
	return pnhu
}

// SetExtension sets the "extension" field.
func (pnhu *PhoneNumberHistoryUpdate) SetExtension(s string) *PhoneNumberHistoryUpdate {
	pnhu.mutation.SetExtension(s)
	return pnhu
}

// SetNillableExtension sets the "extension" field if the given value is not nil.
func (pnhu *PhoneNumberHistoryUpdate) SetNillableExtension(s *string) *PhoneNumberHistoryUpdate {
	if s != nil {
		pnhu.SetExtension(*s)
	}
	return pnhu
}

// ClearExtension clears the value of the "extension" field.
func (pnhu *PhoneNumberHistoryUpdate) ClearExtension() *PhoneNumberHistoryUpdate {
	pnhu.mutation.ClearExtension()
	return pnhu
}

// Mutation returns the PhoneNumberHistoryMutation object of the builder.
func (pnhu *PhoneNumberHistoryUpdate) Mutation() *PhoneNumberHistoryMutation {
	return pnhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pnhu *PhoneNumberHistoryUpdate) Save(ctx context.Context) (int, error) {
	pnhu.defaults()
	return withHooks(ctx, pnhu.sqlSave, pnhu.mutation, pnhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pnhu *PhoneNumberHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := pnhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pnhu *PhoneNumberHistoryUpdate) Exec(ctx context.Context) error {
	_, err := pnhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pnhu *PhoneNumberHistoryUpdate) ExecX(ctx context.Context) {
	if err := pnhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pnhu *PhoneNumberHistoryUpdate) defaults() {
	if _, ok := pnhu.mutation.UpdatedAt(); !ok && !pnhu.mutation.UpdatedAtCleared() {
		v := phonenumberhistory.UpdateDefaultUpdatedAt()
		pnhu.mutation.SetUpdatedAt(v)
	}
}

func (pnhu *PhoneNumberHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(phonenumberhistory.Table, phonenumberhistory.Columns, sqlgraph.NewFieldSpec(phonenumberhistory.FieldID, field.TypeString))
	if ps := pnhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pnhu.mutation.RefCleared() {
		_spec.ClearField(phonenumberhistory.FieldRef, field.TypeString)
	}
	if pnhu.mutation.CreatedAtCleared() {
		_spec.ClearField(phonenumberhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pnhu.mutation.UpdatedAt(); ok {
		_spec.SetField(phonenumberhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if pnhu.mutation.UpdatedAtCleared() {
		_spec.ClearField(phonenumberhistory.FieldUpdatedAt, field.TypeTime)
	}
	if pnhu.mutation.CreatedByCleared() {
		_spec.ClearField(phonenumberhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pnhu.mutation.UpdatedBy(); ok {
		_spec.SetField(phonenumberhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if pnhu.mutation.UpdatedByCleared() {
		_spec.ClearField(phonenumberhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pnhu.mutation.DeletedAt(); ok {
		_spec.SetField(phonenumberhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if pnhu.mutation.DeletedAtCleared() {
		_spec.ClearField(phonenumberhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pnhu.mutation.DeletedBy(); ok {
		_spec.SetField(phonenumberhistory.FieldDeletedBy, field.TypeString, value)
	}
	if pnhu.mutation.DeletedByCleared() {
		_spec.ClearField(phonenumberhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := pnhu.mutation.Tags(); ok {
		_spec.SetField(phonenumberhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := pnhu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, phonenumberhistory.FieldTags, value)
		})
	}
	if pnhu.mutation.TagsCleared() {
		_spec.ClearField(phonenumberhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := pnhu.mutation.OwnerID(); ok {
		_spec.SetField(phonenumberhistory.FieldOwnerID, field.TypeString, value)
	}
	if pnhu.mutation.OwnerIDCleared() {
		_spec.ClearField(phonenumberhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := pnhu.mutation.Kind(); ok {
		_spec.SetField(phonenumberhistory.FieldKind, field.TypeString, value)
	}
	if value, ok := pnhu.mutation.RegionCode(); ok {
		_spec.SetField(phonenumberhistory.FieldRegionCode, field.TypeString, value)
	}
	if pnhu.mutation.RegionCodeCleared() {
		_spec.ClearField(phonenumberhistory.FieldRegionCode, field.TypeString)
	}
	if value, ok := pnhu.mutation.ShortCode(); ok {
		_spec.SetField(phonenumberhistory.FieldShortCode, field.TypeString, value)
	}
	if pnhu.mutation.ShortCodeCleared() {
		_spec.ClearField(phonenumberhistory.FieldShortCode, field.TypeString)
	}
	if value, ok := pnhu.mutation.Number(); ok {
		_spec.SetField(phonenumberhistory.FieldNumber, field.TypeString, value)
	}
	if pnhu.mutation.NumberCleared() {
		_spec.ClearField(phonenumberhistory.FieldNumber, field.TypeString)
	}
	if value, ok := pnhu.mutation.Extension(); ok {
		_spec.SetField(phonenumberhistory.FieldExtension, field.TypeString, value)
	}
	if pnhu.mutation.ExtensionCleared() {
		_spec.ClearField(phonenumberhistory.FieldExtension, field.TypeString)
	}
	_spec.Node.Schema = pnhu.schemaConfig.PhoneNumberHistory
	ctx = internal.NewSchemaConfigContext(ctx, pnhu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, pnhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{phonenumberhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pnhu.mutation.done = true
	return n, nil
}

// PhoneNumberHistoryUpdateOne is the builder for updating a single PhoneNumberHistory entity.
type PhoneNumberHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PhoneNumberHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) SetUpdatedAt(t time.Time) *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.SetUpdatedAt(t)
	return pnhuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) ClearUpdatedAt() *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.ClearUpdatedAt()
	return pnhuo
}

// SetUpdatedBy sets the "updated_by" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) SetUpdatedBy(s string) *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.SetUpdatedBy(s)
	return pnhuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pnhuo *PhoneNumberHistoryUpdateOne) SetNillableUpdatedBy(s *string) *PhoneNumberHistoryUpdateOne {
	if s != nil {
		pnhuo.SetUpdatedBy(*s)
	}
	return pnhuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) ClearUpdatedBy() *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.ClearUpdatedBy()
	return pnhuo
}

// SetDeletedAt sets the "deleted_at" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) SetDeletedAt(t time.Time) *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.SetDeletedAt(t)
	return pnhuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pnhuo *PhoneNumberHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *PhoneNumberHistoryUpdateOne {
	if t != nil {
		pnhuo.SetDeletedAt(*t)
	}
	return pnhuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) ClearDeletedAt() *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.ClearDeletedAt()
	return pnhuo
}

// SetDeletedBy sets the "deleted_by" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) SetDeletedBy(s string) *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.SetDeletedBy(s)
	return pnhuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pnhuo *PhoneNumberHistoryUpdateOne) SetNillableDeletedBy(s *string) *PhoneNumberHistoryUpdateOne {
	if s != nil {
		pnhuo.SetDeletedBy(*s)
	}
	return pnhuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) ClearDeletedBy() *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.ClearDeletedBy()
	return pnhuo
}

// SetTags sets the "tags" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) SetTags(s []string) *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.SetTags(s)
	return pnhuo
}

// AppendTags appends s to the "tags" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) AppendTags(s []string) *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.AppendTags(s)
	return pnhuo
}

// ClearTags clears the value of the "tags" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) ClearTags() *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.ClearTags()
	return pnhuo
}

// SetOwnerID sets the "owner_id" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) SetOwnerID(s string) *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.SetOwnerID(s)
	return pnhuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pnhuo *PhoneNumberHistoryUpdateOne) SetNillableOwnerID(s *string) *PhoneNumberHistoryUpdateOne {
	if s != nil {
		pnhuo.SetOwnerID(*s)
	}
	return pnhuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) ClearOwnerID() *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.ClearOwnerID()
	return pnhuo
}

// SetKind sets the "kind" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) SetKind(ennuty enums.PhoneNumberType) *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.SetKind(ennuty)
	return pnhuo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (pnhuo *PhoneNumberHistoryUpdateOne) SetNillableKind(ennuty *enums.PhoneNumberType) *PhoneNumberHistoryUpdateOne {
	if ennuty != nil {
		pnhuo.SetKind(*ennuty)
	}
	return pnhuo
}

// SetRegionCode sets the "region_code" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) SetRegionCode(s string) *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.SetRegionCode(s)
	return pnhuo
}

// SetNillableRegionCode sets the "region_code" field if the given value is not nil.
func (pnhuo *PhoneNumberHistoryUpdateOne) SetNillableRegionCode(s *string) *PhoneNumberHistoryUpdateOne {
	if s != nil {
		pnhuo.SetRegionCode(*s)
	}
	return pnhuo
}

// ClearRegionCode clears the value of the "region_code" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) ClearRegionCode() *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.ClearRegionCode()
	return pnhuo
}

// SetShortCode sets the "short_code" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) SetShortCode(s string) *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.SetShortCode(s)
	return pnhuo
}

// SetNillableShortCode sets the "short_code" field if the given value is not nil.
func (pnhuo *PhoneNumberHistoryUpdateOne) SetNillableShortCode(s *string) *PhoneNumberHistoryUpdateOne {
	if s != nil {
		pnhuo.SetShortCode(*s)
	}
	return pnhuo
}

// ClearShortCode clears the value of the "short_code" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) ClearShortCode() *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.ClearShortCode()
	return pnhuo
}

// SetNumber sets the "number" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) SetNumber(s string) *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.SetNumber(s)
	return pnhuo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (pnhuo *PhoneNumberHistoryUpdateOne) SetNillableNumber(s *string) *PhoneNumberHistoryUpdateOne {
	if s != nil {
		pnhuo.SetNumber(*s)
	}
	return pnhuo
}

// ClearNumber clears the value of the "number" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) ClearNumber() *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.ClearNumber()
	return pnhuo
}

// SetExtension sets the "extension" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) SetExtension(s string) *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.SetExtension(s)
	return pnhuo
}

// SetNillableExtension sets the "extension" field if the given value is not nil.
func (pnhuo *PhoneNumberHistoryUpdateOne) SetNillableExtension(s *string) *PhoneNumberHistoryUpdateOne {
	if s != nil {
		pnhuo.SetExtension(*s)
	}
	return pnhuo
}

// ClearExtension clears the value of the "extension" field.
func (pnhuo *PhoneNumberHistoryUpdateOne) ClearExtension() *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.ClearExtension()
	return pnhuo
}

// Mutation returns the PhoneNumberHistoryMutation object of the builder.
func (pnhuo *PhoneNumberHistoryUpdateOne) Mutation() *PhoneNumberHistoryMutation {
	return pnhuo.mutation
}

// Where appends a list predicates to the PhoneNumberHistoryUpdate builder.
func (pnhuo *PhoneNumberHistoryUpdateOne) Where(ps ...predicate.PhoneNumberHistory) *PhoneNumberHistoryUpdateOne {
	pnhuo.mutation.Where(ps...)
	return pnhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pnhuo *PhoneNumberHistoryUpdateOne) Select(field string, fields ...string) *PhoneNumberHistoryUpdateOne {
	pnhuo.fields = append([]string{field}, fields...)
	return pnhuo
}

// Save executes the query and returns the updated PhoneNumberHistory entity.
func (pnhuo *PhoneNumberHistoryUpdateOne) Save(ctx context.Context) (*PhoneNumberHistory, error) {
	pnhuo.defaults()
	return withHooks(ctx, pnhuo.sqlSave, pnhuo.mutation, pnhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pnhuo *PhoneNumberHistoryUpdateOne) SaveX(ctx context.Context) *PhoneNumberHistory {
	node, err := pnhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pnhuo *PhoneNumberHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := pnhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pnhuo *PhoneNumberHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := pnhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pnhuo *PhoneNumberHistoryUpdateOne) defaults() {
	if _, ok := pnhuo.mutation.UpdatedAt(); !ok && !pnhuo.mutation.UpdatedAtCleared() {
		v := phonenumberhistory.UpdateDefaultUpdatedAt()
		pnhuo.mutation.SetUpdatedAt(v)
	}
}

func (pnhuo *PhoneNumberHistoryUpdateOne) sqlSave(ctx context.Context) (_node *PhoneNumberHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(phonenumberhistory.Table, phonenumberhistory.Columns, sqlgraph.NewFieldSpec(phonenumberhistory.FieldID, field.TypeString))
	id, ok := pnhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "PhoneNumberHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pnhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, phonenumberhistory.FieldID)
		for _, f := range fields {
			if !phonenumberhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != phonenumberhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pnhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pnhuo.mutation.RefCleared() {
		_spec.ClearField(phonenumberhistory.FieldRef, field.TypeString)
	}
	if pnhuo.mutation.CreatedAtCleared() {
		_spec.ClearField(phonenumberhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pnhuo.mutation.UpdatedAt(); ok {
		_spec.SetField(phonenumberhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if pnhuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(phonenumberhistory.FieldUpdatedAt, field.TypeTime)
	}
	if pnhuo.mutation.CreatedByCleared() {
		_spec.ClearField(phonenumberhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pnhuo.mutation.UpdatedBy(); ok {
		_spec.SetField(phonenumberhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if pnhuo.mutation.UpdatedByCleared() {
		_spec.ClearField(phonenumberhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pnhuo.mutation.DeletedAt(); ok {
		_spec.SetField(phonenumberhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if pnhuo.mutation.DeletedAtCleared() {
		_spec.ClearField(phonenumberhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pnhuo.mutation.DeletedBy(); ok {
		_spec.SetField(phonenumberhistory.FieldDeletedBy, field.TypeString, value)
	}
	if pnhuo.mutation.DeletedByCleared() {
		_spec.ClearField(phonenumberhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := pnhuo.mutation.Tags(); ok {
		_spec.SetField(phonenumberhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := pnhuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, phonenumberhistory.FieldTags, value)
		})
	}
	if pnhuo.mutation.TagsCleared() {
		_spec.ClearField(phonenumberhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := pnhuo.mutation.OwnerID(); ok {
		_spec.SetField(phonenumberhistory.FieldOwnerID, field.TypeString, value)
	}
	if pnhuo.mutation.OwnerIDCleared() {
		_spec.ClearField(phonenumberhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := pnhuo.mutation.Kind(); ok {
		_spec.SetField(phonenumberhistory.FieldKind, field.TypeString, value)
	}
	if value, ok := pnhuo.mutation.RegionCode(); ok {
		_spec.SetField(phonenumberhistory.FieldRegionCode, field.TypeString, value)
	}
	if pnhuo.mutation.RegionCodeCleared() {
		_spec.ClearField(phonenumberhistory.FieldRegionCode, field.TypeString)
	}
	if value, ok := pnhuo.mutation.ShortCode(); ok {
		_spec.SetField(phonenumberhistory.FieldShortCode, field.TypeString, value)
	}
	if pnhuo.mutation.ShortCodeCleared() {
		_spec.ClearField(phonenumberhistory.FieldShortCode, field.TypeString)
	}
	if value, ok := pnhuo.mutation.Number(); ok {
		_spec.SetField(phonenumberhistory.FieldNumber, field.TypeString, value)
	}
	if pnhuo.mutation.NumberCleared() {
		_spec.ClearField(phonenumberhistory.FieldNumber, field.TypeString)
	}
	if value, ok := pnhuo.mutation.Extension(); ok {
		_spec.SetField(phonenumberhistory.FieldExtension, field.TypeString, value)
	}
	if pnhuo.mutation.ExtensionCleared() {
		_spec.ClearField(phonenumberhistory.FieldExtension, field.TypeString)
	}
	_spec.Node.Schema = pnhuo.schemaConfig.PhoneNumberHistory
	ctx = internal.NewSchemaConfigContext(ctx, pnhuo.schemaConfig)
	_node = &PhoneNumberHistory{config: pnhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pnhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{phonenumberhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pnhuo.mutation.done = true
	return _node, nil
}
