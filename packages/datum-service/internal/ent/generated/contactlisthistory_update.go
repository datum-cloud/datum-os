// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contactlisthistory"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// ContactListHistoryUpdate is the builder for updating ContactListHistory entities.
type ContactListHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *ContactListHistoryMutation
}

// Where appends a list predicates to the ContactListHistoryUpdate builder.
func (clhu *ContactListHistoryUpdate) Where(ps ...predicate.ContactListHistory) *ContactListHistoryUpdate {
	clhu.mutation.Where(ps...)
	return clhu
}

// SetUpdatedAt sets the "updated_at" field.
func (clhu *ContactListHistoryUpdate) SetUpdatedAt(t time.Time) *ContactListHistoryUpdate {
	clhu.mutation.SetUpdatedAt(t)
	return clhu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (clhu *ContactListHistoryUpdate) ClearUpdatedAt() *ContactListHistoryUpdate {
	clhu.mutation.ClearUpdatedAt()
	return clhu
}

// SetUpdatedBy sets the "updated_by" field.
func (clhu *ContactListHistoryUpdate) SetUpdatedBy(s string) *ContactListHistoryUpdate {
	clhu.mutation.SetUpdatedBy(s)
	return clhu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (clhu *ContactListHistoryUpdate) SetNillableUpdatedBy(s *string) *ContactListHistoryUpdate {
	if s != nil {
		clhu.SetUpdatedBy(*s)
	}
	return clhu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (clhu *ContactListHistoryUpdate) ClearUpdatedBy() *ContactListHistoryUpdate {
	clhu.mutation.ClearUpdatedBy()
	return clhu
}

// SetDeletedAt sets the "deleted_at" field.
func (clhu *ContactListHistoryUpdate) SetDeletedAt(t time.Time) *ContactListHistoryUpdate {
	clhu.mutation.SetDeletedAt(t)
	return clhu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (clhu *ContactListHistoryUpdate) SetNillableDeletedAt(t *time.Time) *ContactListHistoryUpdate {
	if t != nil {
		clhu.SetDeletedAt(*t)
	}
	return clhu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (clhu *ContactListHistoryUpdate) ClearDeletedAt() *ContactListHistoryUpdate {
	clhu.mutation.ClearDeletedAt()
	return clhu
}

// SetDeletedBy sets the "deleted_by" field.
func (clhu *ContactListHistoryUpdate) SetDeletedBy(s string) *ContactListHistoryUpdate {
	clhu.mutation.SetDeletedBy(s)
	return clhu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (clhu *ContactListHistoryUpdate) SetNillableDeletedBy(s *string) *ContactListHistoryUpdate {
	if s != nil {
		clhu.SetDeletedBy(*s)
	}
	return clhu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (clhu *ContactListHistoryUpdate) ClearDeletedBy() *ContactListHistoryUpdate {
	clhu.mutation.ClearDeletedBy()
	return clhu
}

// SetTags sets the "tags" field.
func (clhu *ContactListHistoryUpdate) SetTags(s []string) *ContactListHistoryUpdate {
	clhu.mutation.SetTags(s)
	return clhu
}

// AppendTags appends s to the "tags" field.
func (clhu *ContactListHistoryUpdate) AppendTags(s []string) *ContactListHistoryUpdate {
	clhu.mutation.AppendTags(s)
	return clhu
}

// ClearTags clears the value of the "tags" field.
func (clhu *ContactListHistoryUpdate) ClearTags() *ContactListHistoryUpdate {
	clhu.mutation.ClearTags()
	return clhu
}

// SetOwnerID sets the "owner_id" field.
func (clhu *ContactListHistoryUpdate) SetOwnerID(s string) *ContactListHistoryUpdate {
	clhu.mutation.SetOwnerID(s)
	return clhu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (clhu *ContactListHistoryUpdate) SetNillableOwnerID(s *string) *ContactListHistoryUpdate {
	if s != nil {
		clhu.SetOwnerID(*s)
	}
	return clhu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (clhu *ContactListHistoryUpdate) ClearOwnerID() *ContactListHistoryUpdate {
	clhu.mutation.ClearOwnerID()
	return clhu
}

// SetName sets the "name" field.
func (clhu *ContactListHistoryUpdate) SetName(s string) *ContactListHistoryUpdate {
	clhu.mutation.SetName(s)
	return clhu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (clhu *ContactListHistoryUpdate) SetNillableName(s *string) *ContactListHistoryUpdate {
	if s != nil {
		clhu.SetName(*s)
	}
	return clhu
}

// SetVisibility sets the "visibility" field.
func (clhu *ContactListHistoryUpdate) SetVisibility(s string) *ContactListHistoryUpdate {
	clhu.mutation.SetVisibility(s)
	return clhu
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (clhu *ContactListHistoryUpdate) SetNillableVisibility(s *string) *ContactListHistoryUpdate {
	if s != nil {
		clhu.SetVisibility(*s)
	}
	return clhu
}

// SetDisplayName sets the "display_name" field.
func (clhu *ContactListHistoryUpdate) SetDisplayName(s string) *ContactListHistoryUpdate {
	clhu.mutation.SetDisplayName(s)
	return clhu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (clhu *ContactListHistoryUpdate) SetNillableDisplayName(s *string) *ContactListHistoryUpdate {
	if s != nil {
		clhu.SetDisplayName(*s)
	}
	return clhu
}

// SetDescription sets the "description" field.
func (clhu *ContactListHistoryUpdate) SetDescription(s string) *ContactListHistoryUpdate {
	clhu.mutation.SetDescription(s)
	return clhu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (clhu *ContactListHistoryUpdate) SetNillableDescription(s *string) *ContactListHistoryUpdate {
	if s != nil {
		clhu.SetDescription(*s)
	}
	return clhu
}

// ClearDescription clears the value of the "description" field.
func (clhu *ContactListHistoryUpdate) ClearDescription() *ContactListHistoryUpdate {
	clhu.mutation.ClearDescription()
	return clhu
}

// Mutation returns the ContactListHistoryMutation object of the builder.
func (clhu *ContactListHistoryUpdate) Mutation() *ContactListHistoryMutation {
	return clhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clhu *ContactListHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := clhu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, clhu.sqlSave, clhu.mutation, clhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clhu *ContactListHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := clhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clhu *ContactListHistoryUpdate) Exec(ctx context.Context) error {
	_, err := clhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clhu *ContactListHistoryUpdate) ExecX(ctx context.Context) {
	if err := clhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clhu *ContactListHistoryUpdate) defaults() error {
	if _, ok := clhu.mutation.UpdatedAt(); !ok && !clhu.mutation.UpdatedAtCleared() {
		if contactlisthistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized contactlisthistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := contactlisthistory.UpdateDefaultUpdatedAt()
		clhu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (clhu *ContactListHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(contactlisthistory.Table, contactlisthistory.Columns, sqlgraph.NewFieldSpec(contactlisthistory.FieldID, field.TypeString))
	if ps := clhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if clhu.mutation.RefCleared() {
		_spec.ClearField(contactlisthistory.FieldRef, field.TypeString)
	}
	if clhu.mutation.CreatedAtCleared() {
		_spec.ClearField(contactlisthistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := clhu.mutation.UpdatedAt(); ok {
		_spec.SetField(contactlisthistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if clhu.mutation.UpdatedAtCleared() {
		_spec.ClearField(contactlisthistory.FieldUpdatedAt, field.TypeTime)
	}
	if clhu.mutation.CreatedByCleared() {
		_spec.ClearField(contactlisthistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := clhu.mutation.UpdatedBy(); ok {
		_spec.SetField(contactlisthistory.FieldUpdatedBy, field.TypeString, value)
	}
	if clhu.mutation.UpdatedByCleared() {
		_spec.ClearField(contactlisthistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := clhu.mutation.DeletedAt(); ok {
		_spec.SetField(contactlisthistory.FieldDeletedAt, field.TypeTime, value)
	}
	if clhu.mutation.DeletedAtCleared() {
		_spec.ClearField(contactlisthistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := clhu.mutation.DeletedBy(); ok {
		_spec.SetField(contactlisthistory.FieldDeletedBy, field.TypeString, value)
	}
	if clhu.mutation.DeletedByCleared() {
		_spec.ClearField(contactlisthistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := clhu.mutation.Tags(); ok {
		_spec.SetField(contactlisthistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := clhu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, contactlisthistory.FieldTags, value)
		})
	}
	if clhu.mutation.TagsCleared() {
		_spec.ClearField(contactlisthistory.FieldTags, field.TypeJSON)
	}
	if value, ok := clhu.mutation.OwnerID(); ok {
		_spec.SetField(contactlisthistory.FieldOwnerID, field.TypeString, value)
	}
	if clhu.mutation.OwnerIDCleared() {
		_spec.ClearField(contactlisthistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := clhu.mutation.Name(); ok {
		_spec.SetField(contactlisthistory.FieldName, field.TypeString, value)
	}
	if value, ok := clhu.mutation.Visibility(); ok {
		_spec.SetField(contactlisthistory.FieldVisibility, field.TypeString, value)
	}
	if value, ok := clhu.mutation.DisplayName(); ok {
		_spec.SetField(contactlisthistory.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := clhu.mutation.Description(); ok {
		_spec.SetField(contactlisthistory.FieldDescription, field.TypeString, value)
	}
	if clhu.mutation.DescriptionCleared() {
		_spec.ClearField(contactlisthistory.FieldDescription, field.TypeString)
	}
	_spec.Node.Schema = clhu.schemaConfig.ContactListHistory
	ctx = internal.NewSchemaConfigContext(ctx, clhu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, clhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactlisthistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	clhu.mutation.done = true
	return n, nil
}

// ContactListHistoryUpdateOne is the builder for updating a single ContactListHistory entity.
type ContactListHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContactListHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (clhuo *ContactListHistoryUpdateOne) SetUpdatedAt(t time.Time) *ContactListHistoryUpdateOne {
	clhuo.mutation.SetUpdatedAt(t)
	return clhuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (clhuo *ContactListHistoryUpdateOne) ClearUpdatedAt() *ContactListHistoryUpdateOne {
	clhuo.mutation.ClearUpdatedAt()
	return clhuo
}

// SetUpdatedBy sets the "updated_by" field.
func (clhuo *ContactListHistoryUpdateOne) SetUpdatedBy(s string) *ContactListHistoryUpdateOne {
	clhuo.mutation.SetUpdatedBy(s)
	return clhuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (clhuo *ContactListHistoryUpdateOne) SetNillableUpdatedBy(s *string) *ContactListHistoryUpdateOne {
	if s != nil {
		clhuo.SetUpdatedBy(*s)
	}
	return clhuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (clhuo *ContactListHistoryUpdateOne) ClearUpdatedBy() *ContactListHistoryUpdateOne {
	clhuo.mutation.ClearUpdatedBy()
	return clhuo
}

// SetDeletedAt sets the "deleted_at" field.
func (clhuo *ContactListHistoryUpdateOne) SetDeletedAt(t time.Time) *ContactListHistoryUpdateOne {
	clhuo.mutation.SetDeletedAt(t)
	return clhuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (clhuo *ContactListHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *ContactListHistoryUpdateOne {
	if t != nil {
		clhuo.SetDeletedAt(*t)
	}
	return clhuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (clhuo *ContactListHistoryUpdateOne) ClearDeletedAt() *ContactListHistoryUpdateOne {
	clhuo.mutation.ClearDeletedAt()
	return clhuo
}

// SetDeletedBy sets the "deleted_by" field.
func (clhuo *ContactListHistoryUpdateOne) SetDeletedBy(s string) *ContactListHistoryUpdateOne {
	clhuo.mutation.SetDeletedBy(s)
	return clhuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (clhuo *ContactListHistoryUpdateOne) SetNillableDeletedBy(s *string) *ContactListHistoryUpdateOne {
	if s != nil {
		clhuo.SetDeletedBy(*s)
	}
	return clhuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (clhuo *ContactListHistoryUpdateOne) ClearDeletedBy() *ContactListHistoryUpdateOne {
	clhuo.mutation.ClearDeletedBy()
	return clhuo
}

// SetTags sets the "tags" field.
func (clhuo *ContactListHistoryUpdateOne) SetTags(s []string) *ContactListHistoryUpdateOne {
	clhuo.mutation.SetTags(s)
	return clhuo
}

// AppendTags appends s to the "tags" field.
func (clhuo *ContactListHistoryUpdateOne) AppendTags(s []string) *ContactListHistoryUpdateOne {
	clhuo.mutation.AppendTags(s)
	return clhuo
}

// ClearTags clears the value of the "tags" field.
func (clhuo *ContactListHistoryUpdateOne) ClearTags() *ContactListHistoryUpdateOne {
	clhuo.mutation.ClearTags()
	return clhuo
}

// SetOwnerID sets the "owner_id" field.
func (clhuo *ContactListHistoryUpdateOne) SetOwnerID(s string) *ContactListHistoryUpdateOne {
	clhuo.mutation.SetOwnerID(s)
	return clhuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (clhuo *ContactListHistoryUpdateOne) SetNillableOwnerID(s *string) *ContactListHistoryUpdateOne {
	if s != nil {
		clhuo.SetOwnerID(*s)
	}
	return clhuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (clhuo *ContactListHistoryUpdateOne) ClearOwnerID() *ContactListHistoryUpdateOne {
	clhuo.mutation.ClearOwnerID()
	return clhuo
}

// SetName sets the "name" field.
func (clhuo *ContactListHistoryUpdateOne) SetName(s string) *ContactListHistoryUpdateOne {
	clhuo.mutation.SetName(s)
	return clhuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (clhuo *ContactListHistoryUpdateOne) SetNillableName(s *string) *ContactListHistoryUpdateOne {
	if s != nil {
		clhuo.SetName(*s)
	}
	return clhuo
}

// SetVisibility sets the "visibility" field.
func (clhuo *ContactListHistoryUpdateOne) SetVisibility(s string) *ContactListHistoryUpdateOne {
	clhuo.mutation.SetVisibility(s)
	return clhuo
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (clhuo *ContactListHistoryUpdateOne) SetNillableVisibility(s *string) *ContactListHistoryUpdateOne {
	if s != nil {
		clhuo.SetVisibility(*s)
	}
	return clhuo
}

// SetDisplayName sets the "display_name" field.
func (clhuo *ContactListHistoryUpdateOne) SetDisplayName(s string) *ContactListHistoryUpdateOne {
	clhuo.mutation.SetDisplayName(s)
	return clhuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (clhuo *ContactListHistoryUpdateOne) SetNillableDisplayName(s *string) *ContactListHistoryUpdateOne {
	if s != nil {
		clhuo.SetDisplayName(*s)
	}
	return clhuo
}

// SetDescription sets the "description" field.
func (clhuo *ContactListHistoryUpdateOne) SetDescription(s string) *ContactListHistoryUpdateOne {
	clhuo.mutation.SetDescription(s)
	return clhuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (clhuo *ContactListHistoryUpdateOne) SetNillableDescription(s *string) *ContactListHistoryUpdateOne {
	if s != nil {
		clhuo.SetDescription(*s)
	}
	return clhuo
}

// ClearDescription clears the value of the "description" field.
func (clhuo *ContactListHistoryUpdateOne) ClearDescription() *ContactListHistoryUpdateOne {
	clhuo.mutation.ClearDescription()
	return clhuo
}

// Mutation returns the ContactListHistoryMutation object of the builder.
func (clhuo *ContactListHistoryUpdateOne) Mutation() *ContactListHistoryMutation {
	return clhuo.mutation
}

// Where appends a list predicates to the ContactListHistoryUpdate builder.
func (clhuo *ContactListHistoryUpdateOne) Where(ps ...predicate.ContactListHistory) *ContactListHistoryUpdateOne {
	clhuo.mutation.Where(ps...)
	return clhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (clhuo *ContactListHistoryUpdateOne) Select(field string, fields ...string) *ContactListHistoryUpdateOne {
	clhuo.fields = append([]string{field}, fields...)
	return clhuo
}

// Save executes the query and returns the updated ContactListHistory entity.
func (clhuo *ContactListHistoryUpdateOne) Save(ctx context.Context) (*ContactListHistory, error) {
	if err := clhuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, clhuo.sqlSave, clhuo.mutation, clhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clhuo *ContactListHistoryUpdateOne) SaveX(ctx context.Context) *ContactListHistory {
	node, err := clhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (clhuo *ContactListHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := clhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clhuo *ContactListHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := clhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clhuo *ContactListHistoryUpdateOne) defaults() error {
	if _, ok := clhuo.mutation.UpdatedAt(); !ok && !clhuo.mutation.UpdatedAtCleared() {
		if contactlisthistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized contactlisthistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := contactlisthistory.UpdateDefaultUpdatedAt()
		clhuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (clhuo *ContactListHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ContactListHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(contactlisthistory.Table, contactlisthistory.Columns, sqlgraph.NewFieldSpec(contactlisthistory.FieldID, field.TypeString))
	id, ok := clhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ContactListHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := clhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contactlisthistory.FieldID)
		for _, f := range fields {
			if !contactlisthistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != contactlisthistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := clhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if clhuo.mutation.RefCleared() {
		_spec.ClearField(contactlisthistory.FieldRef, field.TypeString)
	}
	if clhuo.mutation.CreatedAtCleared() {
		_spec.ClearField(contactlisthistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := clhuo.mutation.UpdatedAt(); ok {
		_spec.SetField(contactlisthistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if clhuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(contactlisthistory.FieldUpdatedAt, field.TypeTime)
	}
	if clhuo.mutation.CreatedByCleared() {
		_spec.ClearField(contactlisthistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := clhuo.mutation.UpdatedBy(); ok {
		_spec.SetField(contactlisthistory.FieldUpdatedBy, field.TypeString, value)
	}
	if clhuo.mutation.UpdatedByCleared() {
		_spec.ClearField(contactlisthistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := clhuo.mutation.DeletedAt(); ok {
		_spec.SetField(contactlisthistory.FieldDeletedAt, field.TypeTime, value)
	}
	if clhuo.mutation.DeletedAtCleared() {
		_spec.ClearField(contactlisthistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := clhuo.mutation.DeletedBy(); ok {
		_spec.SetField(contactlisthistory.FieldDeletedBy, field.TypeString, value)
	}
	if clhuo.mutation.DeletedByCleared() {
		_spec.ClearField(contactlisthistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := clhuo.mutation.Tags(); ok {
		_spec.SetField(contactlisthistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := clhuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, contactlisthistory.FieldTags, value)
		})
	}
	if clhuo.mutation.TagsCleared() {
		_spec.ClearField(contactlisthistory.FieldTags, field.TypeJSON)
	}
	if value, ok := clhuo.mutation.OwnerID(); ok {
		_spec.SetField(contactlisthistory.FieldOwnerID, field.TypeString, value)
	}
	if clhuo.mutation.OwnerIDCleared() {
		_spec.ClearField(contactlisthistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := clhuo.mutation.Name(); ok {
		_spec.SetField(contactlisthistory.FieldName, field.TypeString, value)
	}
	if value, ok := clhuo.mutation.Visibility(); ok {
		_spec.SetField(contactlisthistory.FieldVisibility, field.TypeString, value)
	}
	if value, ok := clhuo.mutation.DisplayName(); ok {
		_spec.SetField(contactlisthistory.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := clhuo.mutation.Description(); ok {
		_spec.SetField(contactlisthistory.FieldDescription, field.TypeString, value)
	}
	if clhuo.mutation.DescriptionCleared() {
		_spec.ClearField(contactlisthistory.FieldDescription, field.TypeString)
	}
	_spec.Node.Schema = clhuo.schemaConfig.ContactListHistory
	ctx = internal.NewSchemaConfigContext(ctx, clhuo.schemaConfig)
	_node = &ContactListHistory{config: clhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, clhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactlisthistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	clhuo.mutation.done = true
	return _node, nil
}
