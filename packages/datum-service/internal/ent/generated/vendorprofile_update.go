// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/organization"
	"github.com/datum-cloud/datum-os/internal/ent/generated/phonenumber"
	"github.com/datum-cloud/datum-os/internal/ent/generated/postaladdress"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofile"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilepaymentpreference"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilephonenumber"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilepostaladdress"
	"github.com/datum-cloud/datum-os/pkg/enums"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// VendorProfileUpdate is the builder for updating VendorProfile entities.
type VendorProfileUpdate struct {
	config
	hooks    []Hook
	mutation *VendorProfileMutation
}

// Where appends a list predicates to the VendorProfileUpdate builder.
func (vpu *VendorProfileUpdate) Where(ps ...predicate.VendorProfile) *VendorProfileUpdate {
	vpu.mutation.Where(ps...)
	return vpu
}

// SetUpdatedAt sets the "updated_at" field.
func (vpu *VendorProfileUpdate) SetUpdatedAt(t time.Time) *VendorProfileUpdate {
	vpu.mutation.SetUpdatedAt(t)
	return vpu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vpu *VendorProfileUpdate) ClearUpdatedAt() *VendorProfileUpdate {
	vpu.mutation.ClearUpdatedAt()
	return vpu
}

// SetUpdatedBy sets the "updated_by" field.
func (vpu *VendorProfileUpdate) SetUpdatedBy(s string) *VendorProfileUpdate {
	vpu.mutation.SetUpdatedBy(s)
	return vpu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vpu *VendorProfileUpdate) SetNillableUpdatedBy(s *string) *VendorProfileUpdate {
	if s != nil {
		vpu.SetUpdatedBy(*s)
	}
	return vpu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vpu *VendorProfileUpdate) ClearUpdatedBy() *VendorProfileUpdate {
	vpu.mutation.ClearUpdatedBy()
	return vpu
}

// SetDeletedAt sets the "deleted_at" field.
func (vpu *VendorProfileUpdate) SetDeletedAt(t time.Time) *VendorProfileUpdate {
	vpu.mutation.SetDeletedAt(t)
	return vpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vpu *VendorProfileUpdate) SetNillableDeletedAt(t *time.Time) *VendorProfileUpdate {
	if t != nil {
		vpu.SetDeletedAt(*t)
	}
	return vpu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vpu *VendorProfileUpdate) ClearDeletedAt() *VendorProfileUpdate {
	vpu.mutation.ClearDeletedAt()
	return vpu
}

// SetDeletedBy sets the "deleted_by" field.
func (vpu *VendorProfileUpdate) SetDeletedBy(s string) *VendorProfileUpdate {
	vpu.mutation.SetDeletedBy(s)
	return vpu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vpu *VendorProfileUpdate) SetNillableDeletedBy(s *string) *VendorProfileUpdate {
	if s != nil {
		vpu.SetDeletedBy(*s)
	}
	return vpu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (vpu *VendorProfileUpdate) ClearDeletedBy() *VendorProfileUpdate {
	vpu.mutation.ClearDeletedBy()
	return vpu
}

// SetTags sets the "tags" field.
func (vpu *VendorProfileUpdate) SetTags(s []string) *VendorProfileUpdate {
	vpu.mutation.SetTags(s)
	return vpu
}

// AppendTags appends s to the "tags" field.
func (vpu *VendorProfileUpdate) AppendTags(s []string) *VendorProfileUpdate {
	vpu.mutation.AppendTags(s)
	return vpu
}

// ClearTags clears the value of the "tags" field.
func (vpu *VendorProfileUpdate) ClearTags() *VendorProfileUpdate {
	vpu.mutation.ClearTags()
	return vpu
}

// SetOwnerID sets the "owner_id" field.
func (vpu *VendorProfileUpdate) SetOwnerID(s string) *VendorProfileUpdate {
	vpu.mutation.SetOwnerID(s)
	return vpu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (vpu *VendorProfileUpdate) SetNillableOwnerID(s *string) *VendorProfileUpdate {
	if s != nil {
		vpu.SetOwnerID(*s)
	}
	return vpu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (vpu *VendorProfileUpdate) ClearOwnerID() *VendorProfileUpdate {
	vpu.mutation.ClearOwnerID()
	return vpu
}

// SetName sets the "name" field.
func (vpu *VendorProfileUpdate) SetName(s string) *VendorProfileUpdate {
	vpu.mutation.SetName(s)
	return vpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vpu *VendorProfileUpdate) SetNillableName(s *string) *VendorProfileUpdate {
	if s != nil {
		vpu.SetName(*s)
	}
	return vpu
}

// SetCorporationType sets the "corporation_type" field.
func (vpu *VendorProfileUpdate) SetCorporationType(s string) *VendorProfileUpdate {
	vpu.mutation.SetCorporationType(s)
	return vpu
}

// SetNillableCorporationType sets the "corporation_type" field if the given value is not nil.
func (vpu *VendorProfileUpdate) SetNillableCorporationType(s *string) *VendorProfileUpdate {
	if s != nil {
		vpu.SetCorporationType(*s)
	}
	return vpu
}

// ClearCorporationType clears the value of the "corporation_type" field.
func (vpu *VendorProfileUpdate) ClearCorporationType() *VendorProfileUpdate {
	vpu.mutation.ClearCorporationType()
	return vpu
}

// SetCorporationDba sets the "corporation_dba" field.
func (vpu *VendorProfileUpdate) SetCorporationDba(s string) *VendorProfileUpdate {
	vpu.mutation.SetCorporationDba(s)
	return vpu
}

// SetNillableCorporationDba sets the "corporation_dba" field if the given value is not nil.
func (vpu *VendorProfileUpdate) SetNillableCorporationDba(s *string) *VendorProfileUpdate {
	if s != nil {
		vpu.SetCorporationDba(*s)
	}
	return vpu
}

// ClearCorporationDba clears the value of the "corporation_dba" field.
func (vpu *VendorProfileUpdate) ClearCorporationDba() *VendorProfileUpdate {
	vpu.mutation.ClearCorporationDba()
	return vpu
}

// SetDescription sets the "description" field.
func (vpu *VendorProfileUpdate) SetDescription(s string) *VendorProfileUpdate {
	vpu.mutation.SetDescription(s)
	return vpu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vpu *VendorProfileUpdate) SetNillableDescription(s *string) *VendorProfileUpdate {
	if s != nil {
		vpu.SetDescription(*s)
	}
	return vpu
}

// ClearDescription clears the value of the "description" field.
func (vpu *VendorProfileUpdate) ClearDescription() *VendorProfileUpdate {
	vpu.mutation.ClearDescription()
	return vpu
}

// SetWebsiteURI sets the "website_uri" field.
func (vpu *VendorProfileUpdate) SetWebsiteURI(s string) *VendorProfileUpdate {
	vpu.mutation.SetWebsiteURI(s)
	return vpu
}

// SetNillableWebsiteURI sets the "website_uri" field if the given value is not nil.
func (vpu *VendorProfileUpdate) SetNillableWebsiteURI(s *string) *VendorProfileUpdate {
	if s != nil {
		vpu.SetWebsiteURI(*s)
	}
	return vpu
}

// ClearWebsiteURI clears the value of the "website_uri" field.
func (vpu *VendorProfileUpdate) ClearWebsiteURI() *VendorProfileUpdate {
	vpu.mutation.ClearWebsiteURI()
	return vpu
}

// SetTaxID sets the "tax_id" field.
func (vpu *VendorProfileUpdate) SetTaxID(s string) *VendorProfileUpdate {
	vpu.mutation.SetTaxID(s)
	return vpu
}

// SetNillableTaxID sets the "tax_id" field if the given value is not nil.
func (vpu *VendorProfileUpdate) SetNillableTaxID(s *string) *VendorProfileUpdate {
	if s != nil {
		vpu.SetTaxID(*s)
	}
	return vpu
}

// ClearTaxID clears the value of the "tax_id" field.
func (vpu *VendorProfileUpdate) ClearTaxID() *VendorProfileUpdate {
	vpu.mutation.ClearTaxID()
	return vpu
}

// SetTaxIDType sets the "tax_id_type" field.
func (vpu *VendorProfileUpdate) SetTaxIDType(eit enums.TaxIDType) *VendorProfileUpdate {
	vpu.mutation.SetTaxIDType(eit)
	return vpu
}

// SetNillableTaxIDType sets the "tax_id_type" field if the given value is not nil.
func (vpu *VendorProfileUpdate) SetNillableTaxIDType(eit *enums.TaxIDType) *VendorProfileUpdate {
	if eit != nil {
		vpu.SetTaxIDType(*eit)
	}
	return vpu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (vpu *VendorProfileUpdate) SetOwner(o *Organization) *VendorProfileUpdate {
	return vpu.SetOwnerID(o.ID)
}

// AddPostalAddressIDs adds the "postal_addresses" edge to the PostalAddress entity by IDs.
func (vpu *VendorProfileUpdate) AddPostalAddressIDs(ids ...string) *VendorProfileUpdate {
	vpu.mutation.AddPostalAddressIDs(ids...)
	return vpu
}

// AddPostalAddresses adds the "postal_addresses" edges to the PostalAddress entity.
func (vpu *VendorProfileUpdate) AddPostalAddresses(p ...*PostalAddress) *VendorProfileUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vpu.AddPostalAddressIDs(ids...)
}

// AddPhoneNumberIDs adds the "phone_numbers" edge to the PhoneNumber entity by IDs.
func (vpu *VendorProfileUpdate) AddPhoneNumberIDs(ids ...string) *VendorProfileUpdate {
	vpu.mutation.AddPhoneNumberIDs(ids...)
	return vpu
}

// AddPhoneNumbers adds the "phone_numbers" edges to the PhoneNumber entity.
func (vpu *VendorProfileUpdate) AddPhoneNumbers(p ...*PhoneNumber) *VendorProfileUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vpu.AddPhoneNumberIDs(ids...)
}

// AddPaymentPreferenceIDs adds the "payment_preferences" edge to the VendorProfilePaymentPreference entity by IDs.
func (vpu *VendorProfileUpdate) AddPaymentPreferenceIDs(ids ...string) *VendorProfileUpdate {
	vpu.mutation.AddPaymentPreferenceIDs(ids...)
	return vpu
}

// AddPaymentPreferences adds the "payment_preferences" edges to the VendorProfilePaymentPreference entity.
func (vpu *VendorProfileUpdate) AddPaymentPreferences(v ...*VendorProfilePaymentPreference) *VendorProfileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vpu.AddPaymentPreferenceIDs(ids...)
}

// AddVendorProfilePostalAddressIDs adds the "vendor_profile_postal_addresses" edge to the VendorProfilePostalAddress entity by IDs.
func (vpu *VendorProfileUpdate) AddVendorProfilePostalAddressIDs(ids ...string) *VendorProfileUpdate {
	vpu.mutation.AddVendorProfilePostalAddressIDs(ids...)
	return vpu
}

// AddVendorProfilePostalAddresses adds the "vendor_profile_postal_addresses" edges to the VendorProfilePostalAddress entity.
func (vpu *VendorProfileUpdate) AddVendorProfilePostalAddresses(v ...*VendorProfilePostalAddress) *VendorProfileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vpu.AddVendorProfilePostalAddressIDs(ids...)
}

// AddVendorProfilePhoneNumberIDs adds the "vendor_profile_phone_numbers" edge to the VendorProfilePhoneNumber entity by IDs.
func (vpu *VendorProfileUpdate) AddVendorProfilePhoneNumberIDs(ids ...string) *VendorProfileUpdate {
	vpu.mutation.AddVendorProfilePhoneNumberIDs(ids...)
	return vpu
}

// AddVendorProfilePhoneNumbers adds the "vendor_profile_phone_numbers" edges to the VendorProfilePhoneNumber entity.
func (vpu *VendorProfileUpdate) AddVendorProfilePhoneNumbers(v ...*VendorProfilePhoneNumber) *VendorProfileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vpu.AddVendorProfilePhoneNumberIDs(ids...)
}

// Mutation returns the VendorProfileMutation object of the builder.
func (vpu *VendorProfileUpdate) Mutation() *VendorProfileMutation {
	return vpu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (vpu *VendorProfileUpdate) ClearOwner() *VendorProfileUpdate {
	vpu.mutation.ClearOwner()
	return vpu
}

// ClearPostalAddresses clears all "postal_addresses" edges to the PostalAddress entity.
func (vpu *VendorProfileUpdate) ClearPostalAddresses() *VendorProfileUpdate {
	vpu.mutation.ClearPostalAddresses()
	return vpu
}

// RemovePostalAddressIDs removes the "postal_addresses" edge to PostalAddress entities by IDs.
func (vpu *VendorProfileUpdate) RemovePostalAddressIDs(ids ...string) *VendorProfileUpdate {
	vpu.mutation.RemovePostalAddressIDs(ids...)
	return vpu
}

// RemovePostalAddresses removes "postal_addresses" edges to PostalAddress entities.
func (vpu *VendorProfileUpdate) RemovePostalAddresses(p ...*PostalAddress) *VendorProfileUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vpu.RemovePostalAddressIDs(ids...)
}

// ClearPhoneNumbers clears all "phone_numbers" edges to the PhoneNumber entity.
func (vpu *VendorProfileUpdate) ClearPhoneNumbers() *VendorProfileUpdate {
	vpu.mutation.ClearPhoneNumbers()
	return vpu
}

// RemovePhoneNumberIDs removes the "phone_numbers" edge to PhoneNumber entities by IDs.
func (vpu *VendorProfileUpdate) RemovePhoneNumberIDs(ids ...string) *VendorProfileUpdate {
	vpu.mutation.RemovePhoneNumberIDs(ids...)
	return vpu
}

// RemovePhoneNumbers removes "phone_numbers" edges to PhoneNumber entities.
func (vpu *VendorProfileUpdate) RemovePhoneNumbers(p ...*PhoneNumber) *VendorProfileUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vpu.RemovePhoneNumberIDs(ids...)
}

// ClearPaymentPreferences clears all "payment_preferences" edges to the VendorProfilePaymentPreference entity.
func (vpu *VendorProfileUpdate) ClearPaymentPreferences() *VendorProfileUpdate {
	vpu.mutation.ClearPaymentPreferences()
	return vpu
}

// RemovePaymentPreferenceIDs removes the "payment_preferences" edge to VendorProfilePaymentPreference entities by IDs.
func (vpu *VendorProfileUpdate) RemovePaymentPreferenceIDs(ids ...string) *VendorProfileUpdate {
	vpu.mutation.RemovePaymentPreferenceIDs(ids...)
	return vpu
}

// RemovePaymentPreferences removes "payment_preferences" edges to VendorProfilePaymentPreference entities.
func (vpu *VendorProfileUpdate) RemovePaymentPreferences(v ...*VendorProfilePaymentPreference) *VendorProfileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vpu.RemovePaymentPreferenceIDs(ids...)
}

// ClearVendorProfilePostalAddresses clears all "vendor_profile_postal_addresses" edges to the VendorProfilePostalAddress entity.
func (vpu *VendorProfileUpdate) ClearVendorProfilePostalAddresses() *VendorProfileUpdate {
	vpu.mutation.ClearVendorProfilePostalAddresses()
	return vpu
}

// RemoveVendorProfilePostalAddressIDs removes the "vendor_profile_postal_addresses" edge to VendorProfilePostalAddress entities by IDs.
func (vpu *VendorProfileUpdate) RemoveVendorProfilePostalAddressIDs(ids ...string) *VendorProfileUpdate {
	vpu.mutation.RemoveVendorProfilePostalAddressIDs(ids...)
	return vpu
}

// RemoveVendorProfilePostalAddresses removes "vendor_profile_postal_addresses" edges to VendorProfilePostalAddress entities.
func (vpu *VendorProfileUpdate) RemoveVendorProfilePostalAddresses(v ...*VendorProfilePostalAddress) *VendorProfileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vpu.RemoveVendorProfilePostalAddressIDs(ids...)
}

// ClearVendorProfilePhoneNumbers clears all "vendor_profile_phone_numbers" edges to the VendorProfilePhoneNumber entity.
func (vpu *VendorProfileUpdate) ClearVendorProfilePhoneNumbers() *VendorProfileUpdate {
	vpu.mutation.ClearVendorProfilePhoneNumbers()
	return vpu
}

// RemoveVendorProfilePhoneNumberIDs removes the "vendor_profile_phone_numbers" edge to VendorProfilePhoneNumber entities by IDs.
func (vpu *VendorProfileUpdate) RemoveVendorProfilePhoneNumberIDs(ids ...string) *VendorProfileUpdate {
	vpu.mutation.RemoveVendorProfilePhoneNumberIDs(ids...)
	return vpu
}

// RemoveVendorProfilePhoneNumbers removes "vendor_profile_phone_numbers" edges to VendorProfilePhoneNumber entities.
func (vpu *VendorProfileUpdate) RemoveVendorProfilePhoneNumbers(v ...*VendorProfilePhoneNumber) *VendorProfileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vpu.RemoveVendorProfilePhoneNumberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vpu *VendorProfileUpdate) Save(ctx context.Context) (int, error) {
	if err := vpu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, vpu.sqlSave, vpu.mutation, vpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vpu *VendorProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := vpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vpu *VendorProfileUpdate) Exec(ctx context.Context) error {
	_, err := vpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpu *VendorProfileUpdate) ExecX(ctx context.Context) {
	if err := vpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vpu *VendorProfileUpdate) defaults() error {
	if _, ok := vpu.mutation.UpdatedAt(); !ok && !vpu.mutation.UpdatedAtCleared() {
		if vendorprofile.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized vendorprofile.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := vendorprofile.UpdateDefaultUpdatedAt()
		vpu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vpu *VendorProfileUpdate) check() error {
	if v, ok := vpu.mutation.OwnerID(); ok {
		if err := vendorprofile.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "VendorProfile.owner_id": %w`, err)}
		}
	}
	if v, ok := vpu.mutation.Name(); ok {
		if err := vendorprofile.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "VendorProfile.name": %w`, err)}
		}
	}
	if v, ok := vpu.mutation.CorporationType(); ok {
		if err := vendorprofile.CorporationTypeValidator(v); err != nil {
			return &ValidationError{Name: "corporation_type", err: fmt.Errorf(`generated: validator failed for field "VendorProfile.corporation_type": %w`, err)}
		}
	}
	if v, ok := vpu.mutation.CorporationDba(); ok {
		if err := vendorprofile.CorporationDbaValidator(v); err != nil {
			return &ValidationError{Name: "corporation_dba", err: fmt.Errorf(`generated: validator failed for field "VendorProfile.corporation_dba": %w`, err)}
		}
	}
	if v, ok := vpu.mutation.WebsiteURI(); ok {
		if err := vendorprofile.WebsiteURIValidator(v); err != nil {
			return &ValidationError{Name: "website_uri", err: fmt.Errorf(`generated: validator failed for field "VendorProfile.website_uri": %w`, err)}
		}
	}
	if v, ok := vpu.mutation.TaxID(); ok {
		if err := vendorprofile.TaxIDValidator(v); err != nil {
			return &ValidationError{Name: "tax_id", err: fmt.Errorf(`generated: validator failed for field "VendorProfile.tax_id": %w`, err)}
		}
	}
	if v, ok := vpu.mutation.TaxIDType(); ok {
		if err := vendorprofile.TaxIDTypeValidator(v); err != nil {
			return &ValidationError{Name: "tax_id_type", err: fmt.Errorf(`generated: validator failed for field "VendorProfile.tax_id_type": %w`, err)}
		}
	}
	return nil
}

func (vpu *VendorProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendorprofile.Table, vendorprofile.Columns, sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString))
	if ps := vpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vpu.mutation.CreatedAtCleared() {
		_spec.ClearField(vendorprofile.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vpu.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if vpu.mutation.UpdatedAtCleared() {
		_spec.ClearField(vendorprofile.FieldUpdatedAt, field.TypeTime)
	}
	if vpu.mutation.CreatedByCleared() {
		_spec.ClearField(vendorprofile.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vpu.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofile.FieldUpdatedBy, field.TypeString, value)
	}
	if vpu.mutation.UpdatedByCleared() {
		_spec.ClearField(vendorprofile.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vpu.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofile.FieldDeletedAt, field.TypeTime, value)
	}
	if vpu.mutation.DeletedAtCleared() {
		_spec.ClearField(vendorprofile.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vpu.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofile.FieldDeletedBy, field.TypeString, value)
	}
	if vpu.mutation.DeletedByCleared() {
		_spec.ClearField(vendorprofile.FieldDeletedBy, field.TypeString)
	}
	if value, ok := vpu.mutation.Tags(); ok {
		_spec.SetField(vendorprofile.FieldTags, field.TypeJSON, value)
	}
	if value, ok := vpu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vendorprofile.FieldTags, value)
		})
	}
	if vpu.mutation.TagsCleared() {
		_spec.ClearField(vendorprofile.FieldTags, field.TypeJSON)
	}
	if value, ok := vpu.mutation.Name(); ok {
		_spec.SetField(vendorprofile.FieldName, field.TypeString, value)
	}
	if value, ok := vpu.mutation.CorporationType(); ok {
		_spec.SetField(vendorprofile.FieldCorporationType, field.TypeString, value)
	}
	if vpu.mutation.CorporationTypeCleared() {
		_spec.ClearField(vendorprofile.FieldCorporationType, field.TypeString)
	}
	if value, ok := vpu.mutation.CorporationDba(); ok {
		_spec.SetField(vendorprofile.FieldCorporationDba, field.TypeString, value)
	}
	if vpu.mutation.CorporationDbaCleared() {
		_spec.ClearField(vendorprofile.FieldCorporationDba, field.TypeString)
	}
	if value, ok := vpu.mutation.Description(); ok {
		_spec.SetField(vendorprofile.FieldDescription, field.TypeString, value)
	}
	if vpu.mutation.DescriptionCleared() {
		_spec.ClearField(vendorprofile.FieldDescription, field.TypeString)
	}
	if value, ok := vpu.mutation.WebsiteURI(); ok {
		_spec.SetField(vendorprofile.FieldWebsiteURI, field.TypeString, value)
	}
	if vpu.mutation.WebsiteURICleared() {
		_spec.ClearField(vendorprofile.FieldWebsiteURI, field.TypeString)
	}
	if value, ok := vpu.mutation.TaxID(); ok {
		_spec.SetField(vendorprofile.FieldTaxID, field.TypeString, value)
	}
	if vpu.mutation.TaxIDCleared() {
		_spec.ClearField(vendorprofile.FieldTaxID, field.TypeString)
	}
	if value, ok := vpu.mutation.TaxIDType(); ok {
		_spec.SetField(vendorprofile.FieldTaxIDType, field.TypeEnum, value)
	}
	if vpu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorprofile.OwnerTable,
			Columns: []string{vendorprofile.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpu.schemaConfig.VendorProfile
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorprofile.OwnerTable,
			Columns: []string{vendorprofile.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpu.schemaConfig.VendorProfile
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vpu.mutation.PostalAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vendorprofile.PostalAddressesTable,
			Columns: vendorprofile.PostalAddressesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpu.schemaConfig.VendorProfilePostalAddress
		createE := &VendorProfilePostalAddressCreate{config: vpu.config, mutation: newVendorProfilePostalAddressMutation(vpu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpu.mutation.RemovedPostalAddressesIDs(); len(nodes) > 0 && !vpu.mutation.PostalAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vendorprofile.PostalAddressesTable,
			Columns: vendorprofile.PostalAddressesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpu.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VendorProfilePostalAddressCreate{config: vpu.config, mutation: newVendorProfilePostalAddressMutation(vpu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpu.mutation.PostalAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vendorprofile.PostalAddressesTable,
			Columns: vendorprofile.PostalAddressesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpu.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VendorProfilePostalAddressCreate{config: vpu.config, mutation: newVendorProfilePostalAddressMutation(vpu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vpu.mutation.PhoneNumbersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vendorprofile.PhoneNumbersTable,
			Columns: vendorprofile.PhoneNumbersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phonenumber.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpu.schemaConfig.VendorProfilePhoneNumber
		createE := &VendorProfilePhoneNumberCreate{config: vpu.config, mutation: newVendorProfilePhoneNumberMutation(vpu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpu.mutation.RemovedPhoneNumbersIDs(); len(nodes) > 0 && !vpu.mutation.PhoneNumbersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vendorprofile.PhoneNumbersTable,
			Columns: vendorprofile.PhoneNumbersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phonenumber.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpu.schemaConfig.VendorProfilePhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VendorProfilePhoneNumberCreate{config: vpu.config, mutation: newVendorProfilePhoneNumberMutation(vpu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpu.mutation.PhoneNumbersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vendorprofile.PhoneNumbersTable,
			Columns: vendorprofile.PhoneNumbersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phonenumber.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpu.schemaConfig.VendorProfilePhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VendorProfilePhoneNumberCreate{config: vpu.config, mutation: newVendorProfilePhoneNumberMutation(vpu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vpu.mutation.PaymentPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendorprofile.PaymentPreferencesTable,
			Columns: []string{vendorprofile.PaymentPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilepaymentpreference.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpu.schemaConfig.VendorProfilePaymentPreference
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpu.mutation.RemovedPaymentPreferencesIDs(); len(nodes) > 0 && !vpu.mutation.PaymentPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendorprofile.PaymentPreferencesTable,
			Columns: []string{vendorprofile.PaymentPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilepaymentpreference.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpu.schemaConfig.VendorProfilePaymentPreference
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpu.mutation.PaymentPreferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendorprofile.PaymentPreferencesTable,
			Columns: []string{vendorprofile.PaymentPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilepaymentpreference.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpu.schemaConfig.VendorProfilePaymentPreference
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vpu.mutation.VendorProfilePostalAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vendorprofile.VendorProfilePostalAddressesTable,
			Columns: []string{vendorprofile.VendorProfilePostalAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilepostaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpu.schemaConfig.VendorProfilePostalAddress
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpu.mutation.RemovedVendorProfilePostalAddressesIDs(); len(nodes) > 0 && !vpu.mutation.VendorProfilePostalAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vendorprofile.VendorProfilePostalAddressesTable,
			Columns: []string{vendorprofile.VendorProfilePostalAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilepostaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpu.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpu.mutation.VendorProfilePostalAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vendorprofile.VendorProfilePostalAddressesTable,
			Columns: []string{vendorprofile.VendorProfilePostalAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilepostaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpu.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vpu.mutation.VendorProfilePhoneNumbersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vendorprofile.VendorProfilePhoneNumbersTable,
			Columns: []string{vendorprofile.VendorProfilePhoneNumbersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilephonenumber.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpu.schemaConfig.VendorProfilePhoneNumber
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpu.mutation.RemovedVendorProfilePhoneNumbersIDs(); len(nodes) > 0 && !vpu.mutation.VendorProfilePhoneNumbersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vendorprofile.VendorProfilePhoneNumbersTable,
			Columns: []string{vendorprofile.VendorProfilePhoneNumbersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilephonenumber.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpu.schemaConfig.VendorProfilePhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpu.mutation.VendorProfilePhoneNumbersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vendorprofile.VendorProfilePhoneNumbersTable,
			Columns: []string{vendorprofile.VendorProfilePhoneNumbersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilephonenumber.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpu.schemaConfig.VendorProfilePhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = vpu.schemaConfig.VendorProfile
	ctx = internal.NewSchemaConfigContext(ctx, vpu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, vpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vpu.mutation.done = true
	return n, nil
}

// VendorProfileUpdateOne is the builder for updating a single VendorProfile entity.
type VendorProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VendorProfileMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vpuo *VendorProfileUpdateOne) SetUpdatedAt(t time.Time) *VendorProfileUpdateOne {
	vpuo.mutation.SetUpdatedAt(t)
	return vpuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vpuo *VendorProfileUpdateOne) ClearUpdatedAt() *VendorProfileUpdateOne {
	vpuo.mutation.ClearUpdatedAt()
	return vpuo
}

// SetUpdatedBy sets the "updated_by" field.
func (vpuo *VendorProfileUpdateOne) SetUpdatedBy(s string) *VendorProfileUpdateOne {
	vpuo.mutation.SetUpdatedBy(s)
	return vpuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vpuo *VendorProfileUpdateOne) SetNillableUpdatedBy(s *string) *VendorProfileUpdateOne {
	if s != nil {
		vpuo.SetUpdatedBy(*s)
	}
	return vpuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vpuo *VendorProfileUpdateOne) ClearUpdatedBy() *VendorProfileUpdateOne {
	vpuo.mutation.ClearUpdatedBy()
	return vpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vpuo *VendorProfileUpdateOne) SetDeletedAt(t time.Time) *VendorProfileUpdateOne {
	vpuo.mutation.SetDeletedAt(t)
	return vpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vpuo *VendorProfileUpdateOne) SetNillableDeletedAt(t *time.Time) *VendorProfileUpdateOne {
	if t != nil {
		vpuo.SetDeletedAt(*t)
	}
	return vpuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vpuo *VendorProfileUpdateOne) ClearDeletedAt() *VendorProfileUpdateOne {
	vpuo.mutation.ClearDeletedAt()
	return vpuo
}

// SetDeletedBy sets the "deleted_by" field.
func (vpuo *VendorProfileUpdateOne) SetDeletedBy(s string) *VendorProfileUpdateOne {
	vpuo.mutation.SetDeletedBy(s)
	return vpuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vpuo *VendorProfileUpdateOne) SetNillableDeletedBy(s *string) *VendorProfileUpdateOne {
	if s != nil {
		vpuo.SetDeletedBy(*s)
	}
	return vpuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (vpuo *VendorProfileUpdateOne) ClearDeletedBy() *VendorProfileUpdateOne {
	vpuo.mutation.ClearDeletedBy()
	return vpuo
}

// SetTags sets the "tags" field.
func (vpuo *VendorProfileUpdateOne) SetTags(s []string) *VendorProfileUpdateOne {
	vpuo.mutation.SetTags(s)
	return vpuo
}

// AppendTags appends s to the "tags" field.
func (vpuo *VendorProfileUpdateOne) AppendTags(s []string) *VendorProfileUpdateOne {
	vpuo.mutation.AppendTags(s)
	return vpuo
}

// ClearTags clears the value of the "tags" field.
func (vpuo *VendorProfileUpdateOne) ClearTags() *VendorProfileUpdateOne {
	vpuo.mutation.ClearTags()
	return vpuo
}

// SetOwnerID sets the "owner_id" field.
func (vpuo *VendorProfileUpdateOne) SetOwnerID(s string) *VendorProfileUpdateOne {
	vpuo.mutation.SetOwnerID(s)
	return vpuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (vpuo *VendorProfileUpdateOne) SetNillableOwnerID(s *string) *VendorProfileUpdateOne {
	if s != nil {
		vpuo.SetOwnerID(*s)
	}
	return vpuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (vpuo *VendorProfileUpdateOne) ClearOwnerID() *VendorProfileUpdateOne {
	vpuo.mutation.ClearOwnerID()
	return vpuo
}

// SetName sets the "name" field.
func (vpuo *VendorProfileUpdateOne) SetName(s string) *VendorProfileUpdateOne {
	vpuo.mutation.SetName(s)
	return vpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vpuo *VendorProfileUpdateOne) SetNillableName(s *string) *VendorProfileUpdateOne {
	if s != nil {
		vpuo.SetName(*s)
	}
	return vpuo
}

// SetCorporationType sets the "corporation_type" field.
func (vpuo *VendorProfileUpdateOne) SetCorporationType(s string) *VendorProfileUpdateOne {
	vpuo.mutation.SetCorporationType(s)
	return vpuo
}

// SetNillableCorporationType sets the "corporation_type" field if the given value is not nil.
func (vpuo *VendorProfileUpdateOne) SetNillableCorporationType(s *string) *VendorProfileUpdateOne {
	if s != nil {
		vpuo.SetCorporationType(*s)
	}
	return vpuo
}

// ClearCorporationType clears the value of the "corporation_type" field.
func (vpuo *VendorProfileUpdateOne) ClearCorporationType() *VendorProfileUpdateOne {
	vpuo.mutation.ClearCorporationType()
	return vpuo
}

// SetCorporationDba sets the "corporation_dba" field.
func (vpuo *VendorProfileUpdateOne) SetCorporationDba(s string) *VendorProfileUpdateOne {
	vpuo.mutation.SetCorporationDba(s)
	return vpuo
}

// SetNillableCorporationDba sets the "corporation_dba" field if the given value is not nil.
func (vpuo *VendorProfileUpdateOne) SetNillableCorporationDba(s *string) *VendorProfileUpdateOne {
	if s != nil {
		vpuo.SetCorporationDba(*s)
	}
	return vpuo
}

// ClearCorporationDba clears the value of the "corporation_dba" field.
func (vpuo *VendorProfileUpdateOne) ClearCorporationDba() *VendorProfileUpdateOne {
	vpuo.mutation.ClearCorporationDba()
	return vpuo
}

// SetDescription sets the "description" field.
func (vpuo *VendorProfileUpdateOne) SetDescription(s string) *VendorProfileUpdateOne {
	vpuo.mutation.SetDescription(s)
	return vpuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vpuo *VendorProfileUpdateOne) SetNillableDescription(s *string) *VendorProfileUpdateOne {
	if s != nil {
		vpuo.SetDescription(*s)
	}
	return vpuo
}

// ClearDescription clears the value of the "description" field.
func (vpuo *VendorProfileUpdateOne) ClearDescription() *VendorProfileUpdateOne {
	vpuo.mutation.ClearDescription()
	return vpuo
}

// SetWebsiteURI sets the "website_uri" field.
func (vpuo *VendorProfileUpdateOne) SetWebsiteURI(s string) *VendorProfileUpdateOne {
	vpuo.mutation.SetWebsiteURI(s)
	return vpuo
}

// SetNillableWebsiteURI sets the "website_uri" field if the given value is not nil.
func (vpuo *VendorProfileUpdateOne) SetNillableWebsiteURI(s *string) *VendorProfileUpdateOne {
	if s != nil {
		vpuo.SetWebsiteURI(*s)
	}
	return vpuo
}

// ClearWebsiteURI clears the value of the "website_uri" field.
func (vpuo *VendorProfileUpdateOne) ClearWebsiteURI() *VendorProfileUpdateOne {
	vpuo.mutation.ClearWebsiteURI()
	return vpuo
}

// SetTaxID sets the "tax_id" field.
func (vpuo *VendorProfileUpdateOne) SetTaxID(s string) *VendorProfileUpdateOne {
	vpuo.mutation.SetTaxID(s)
	return vpuo
}

// SetNillableTaxID sets the "tax_id" field if the given value is not nil.
func (vpuo *VendorProfileUpdateOne) SetNillableTaxID(s *string) *VendorProfileUpdateOne {
	if s != nil {
		vpuo.SetTaxID(*s)
	}
	return vpuo
}

// ClearTaxID clears the value of the "tax_id" field.
func (vpuo *VendorProfileUpdateOne) ClearTaxID() *VendorProfileUpdateOne {
	vpuo.mutation.ClearTaxID()
	return vpuo
}

// SetTaxIDType sets the "tax_id_type" field.
func (vpuo *VendorProfileUpdateOne) SetTaxIDType(eit enums.TaxIDType) *VendorProfileUpdateOne {
	vpuo.mutation.SetTaxIDType(eit)
	return vpuo
}

// SetNillableTaxIDType sets the "tax_id_type" field if the given value is not nil.
func (vpuo *VendorProfileUpdateOne) SetNillableTaxIDType(eit *enums.TaxIDType) *VendorProfileUpdateOne {
	if eit != nil {
		vpuo.SetTaxIDType(*eit)
	}
	return vpuo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (vpuo *VendorProfileUpdateOne) SetOwner(o *Organization) *VendorProfileUpdateOne {
	return vpuo.SetOwnerID(o.ID)
}

// AddPostalAddressIDs adds the "postal_addresses" edge to the PostalAddress entity by IDs.
func (vpuo *VendorProfileUpdateOne) AddPostalAddressIDs(ids ...string) *VendorProfileUpdateOne {
	vpuo.mutation.AddPostalAddressIDs(ids...)
	return vpuo
}

// AddPostalAddresses adds the "postal_addresses" edges to the PostalAddress entity.
func (vpuo *VendorProfileUpdateOne) AddPostalAddresses(p ...*PostalAddress) *VendorProfileUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vpuo.AddPostalAddressIDs(ids...)
}

// AddPhoneNumberIDs adds the "phone_numbers" edge to the PhoneNumber entity by IDs.
func (vpuo *VendorProfileUpdateOne) AddPhoneNumberIDs(ids ...string) *VendorProfileUpdateOne {
	vpuo.mutation.AddPhoneNumberIDs(ids...)
	return vpuo
}

// AddPhoneNumbers adds the "phone_numbers" edges to the PhoneNumber entity.
func (vpuo *VendorProfileUpdateOne) AddPhoneNumbers(p ...*PhoneNumber) *VendorProfileUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vpuo.AddPhoneNumberIDs(ids...)
}

// AddPaymentPreferenceIDs adds the "payment_preferences" edge to the VendorProfilePaymentPreference entity by IDs.
func (vpuo *VendorProfileUpdateOne) AddPaymentPreferenceIDs(ids ...string) *VendorProfileUpdateOne {
	vpuo.mutation.AddPaymentPreferenceIDs(ids...)
	return vpuo
}

// AddPaymentPreferences adds the "payment_preferences" edges to the VendorProfilePaymentPreference entity.
func (vpuo *VendorProfileUpdateOne) AddPaymentPreferences(v ...*VendorProfilePaymentPreference) *VendorProfileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vpuo.AddPaymentPreferenceIDs(ids...)
}

// AddVendorProfilePostalAddressIDs adds the "vendor_profile_postal_addresses" edge to the VendorProfilePostalAddress entity by IDs.
func (vpuo *VendorProfileUpdateOne) AddVendorProfilePostalAddressIDs(ids ...string) *VendorProfileUpdateOne {
	vpuo.mutation.AddVendorProfilePostalAddressIDs(ids...)
	return vpuo
}

// AddVendorProfilePostalAddresses adds the "vendor_profile_postal_addresses" edges to the VendorProfilePostalAddress entity.
func (vpuo *VendorProfileUpdateOne) AddVendorProfilePostalAddresses(v ...*VendorProfilePostalAddress) *VendorProfileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vpuo.AddVendorProfilePostalAddressIDs(ids...)
}

// AddVendorProfilePhoneNumberIDs adds the "vendor_profile_phone_numbers" edge to the VendorProfilePhoneNumber entity by IDs.
func (vpuo *VendorProfileUpdateOne) AddVendorProfilePhoneNumberIDs(ids ...string) *VendorProfileUpdateOne {
	vpuo.mutation.AddVendorProfilePhoneNumberIDs(ids...)
	return vpuo
}

// AddVendorProfilePhoneNumbers adds the "vendor_profile_phone_numbers" edges to the VendorProfilePhoneNumber entity.
func (vpuo *VendorProfileUpdateOne) AddVendorProfilePhoneNumbers(v ...*VendorProfilePhoneNumber) *VendorProfileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vpuo.AddVendorProfilePhoneNumberIDs(ids...)
}

// Mutation returns the VendorProfileMutation object of the builder.
func (vpuo *VendorProfileUpdateOne) Mutation() *VendorProfileMutation {
	return vpuo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (vpuo *VendorProfileUpdateOne) ClearOwner() *VendorProfileUpdateOne {
	vpuo.mutation.ClearOwner()
	return vpuo
}

// ClearPostalAddresses clears all "postal_addresses" edges to the PostalAddress entity.
func (vpuo *VendorProfileUpdateOne) ClearPostalAddresses() *VendorProfileUpdateOne {
	vpuo.mutation.ClearPostalAddresses()
	return vpuo
}

// RemovePostalAddressIDs removes the "postal_addresses" edge to PostalAddress entities by IDs.
func (vpuo *VendorProfileUpdateOne) RemovePostalAddressIDs(ids ...string) *VendorProfileUpdateOne {
	vpuo.mutation.RemovePostalAddressIDs(ids...)
	return vpuo
}

// RemovePostalAddresses removes "postal_addresses" edges to PostalAddress entities.
func (vpuo *VendorProfileUpdateOne) RemovePostalAddresses(p ...*PostalAddress) *VendorProfileUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vpuo.RemovePostalAddressIDs(ids...)
}

// ClearPhoneNumbers clears all "phone_numbers" edges to the PhoneNumber entity.
func (vpuo *VendorProfileUpdateOne) ClearPhoneNumbers() *VendorProfileUpdateOne {
	vpuo.mutation.ClearPhoneNumbers()
	return vpuo
}

// RemovePhoneNumberIDs removes the "phone_numbers" edge to PhoneNumber entities by IDs.
func (vpuo *VendorProfileUpdateOne) RemovePhoneNumberIDs(ids ...string) *VendorProfileUpdateOne {
	vpuo.mutation.RemovePhoneNumberIDs(ids...)
	return vpuo
}

// RemovePhoneNumbers removes "phone_numbers" edges to PhoneNumber entities.
func (vpuo *VendorProfileUpdateOne) RemovePhoneNumbers(p ...*PhoneNumber) *VendorProfileUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vpuo.RemovePhoneNumberIDs(ids...)
}

// ClearPaymentPreferences clears all "payment_preferences" edges to the VendorProfilePaymentPreference entity.
func (vpuo *VendorProfileUpdateOne) ClearPaymentPreferences() *VendorProfileUpdateOne {
	vpuo.mutation.ClearPaymentPreferences()
	return vpuo
}

// RemovePaymentPreferenceIDs removes the "payment_preferences" edge to VendorProfilePaymentPreference entities by IDs.
func (vpuo *VendorProfileUpdateOne) RemovePaymentPreferenceIDs(ids ...string) *VendorProfileUpdateOne {
	vpuo.mutation.RemovePaymentPreferenceIDs(ids...)
	return vpuo
}

// RemovePaymentPreferences removes "payment_preferences" edges to VendorProfilePaymentPreference entities.
func (vpuo *VendorProfileUpdateOne) RemovePaymentPreferences(v ...*VendorProfilePaymentPreference) *VendorProfileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vpuo.RemovePaymentPreferenceIDs(ids...)
}

// ClearVendorProfilePostalAddresses clears all "vendor_profile_postal_addresses" edges to the VendorProfilePostalAddress entity.
func (vpuo *VendorProfileUpdateOne) ClearVendorProfilePostalAddresses() *VendorProfileUpdateOne {
	vpuo.mutation.ClearVendorProfilePostalAddresses()
	return vpuo
}

// RemoveVendorProfilePostalAddressIDs removes the "vendor_profile_postal_addresses" edge to VendorProfilePostalAddress entities by IDs.
func (vpuo *VendorProfileUpdateOne) RemoveVendorProfilePostalAddressIDs(ids ...string) *VendorProfileUpdateOne {
	vpuo.mutation.RemoveVendorProfilePostalAddressIDs(ids...)
	return vpuo
}

// RemoveVendorProfilePostalAddresses removes "vendor_profile_postal_addresses" edges to VendorProfilePostalAddress entities.
func (vpuo *VendorProfileUpdateOne) RemoveVendorProfilePostalAddresses(v ...*VendorProfilePostalAddress) *VendorProfileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vpuo.RemoveVendorProfilePostalAddressIDs(ids...)
}

// ClearVendorProfilePhoneNumbers clears all "vendor_profile_phone_numbers" edges to the VendorProfilePhoneNumber entity.
func (vpuo *VendorProfileUpdateOne) ClearVendorProfilePhoneNumbers() *VendorProfileUpdateOne {
	vpuo.mutation.ClearVendorProfilePhoneNumbers()
	return vpuo
}

// RemoveVendorProfilePhoneNumberIDs removes the "vendor_profile_phone_numbers" edge to VendorProfilePhoneNumber entities by IDs.
func (vpuo *VendorProfileUpdateOne) RemoveVendorProfilePhoneNumberIDs(ids ...string) *VendorProfileUpdateOne {
	vpuo.mutation.RemoveVendorProfilePhoneNumberIDs(ids...)
	return vpuo
}

// RemoveVendorProfilePhoneNumbers removes "vendor_profile_phone_numbers" edges to VendorProfilePhoneNumber entities.
func (vpuo *VendorProfileUpdateOne) RemoveVendorProfilePhoneNumbers(v ...*VendorProfilePhoneNumber) *VendorProfileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vpuo.RemoveVendorProfilePhoneNumberIDs(ids...)
}

// Where appends a list predicates to the VendorProfileUpdate builder.
func (vpuo *VendorProfileUpdateOne) Where(ps ...predicate.VendorProfile) *VendorProfileUpdateOne {
	vpuo.mutation.Where(ps...)
	return vpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vpuo *VendorProfileUpdateOne) Select(field string, fields ...string) *VendorProfileUpdateOne {
	vpuo.fields = append([]string{field}, fields...)
	return vpuo
}

// Save executes the query and returns the updated VendorProfile entity.
func (vpuo *VendorProfileUpdateOne) Save(ctx context.Context) (*VendorProfile, error) {
	if err := vpuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, vpuo.sqlSave, vpuo.mutation, vpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vpuo *VendorProfileUpdateOne) SaveX(ctx context.Context) *VendorProfile {
	node, err := vpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vpuo *VendorProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := vpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpuo *VendorProfileUpdateOne) ExecX(ctx context.Context) {
	if err := vpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vpuo *VendorProfileUpdateOne) defaults() error {
	if _, ok := vpuo.mutation.UpdatedAt(); !ok && !vpuo.mutation.UpdatedAtCleared() {
		if vendorprofile.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized vendorprofile.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := vendorprofile.UpdateDefaultUpdatedAt()
		vpuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vpuo *VendorProfileUpdateOne) check() error {
	if v, ok := vpuo.mutation.OwnerID(); ok {
		if err := vendorprofile.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "VendorProfile.owner_id": %w`, err)}
		}
	}
	if v, ok := vpuo.mutation.Name(); ok {
		if err := vendorprofile.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "VendorProfile.name": %w`, err)}
		}
	}
	if v, ok := vpuo.mutation.CorporationType(); ok {
		if err := vendorprofile.CorporationTypeValidator(v); err != nil {
			return &ValidationError{Name: "corporation_type", err: fmt.Errorf(`generated: validator failed for field "VendorProfile.corporation_type": %w`, err)}
		}
	}
	if v, ok := vpuo.mutation.CorporationDba(); ok {
		if err := vendorprofile.CorporationDbaValidator(v); err != nil {
			return &ValidationError{Name: "corporation_dba", err: fmt.Errorf(`generated: validator failed for field "VendorProfile.corporation_dba": %w`, err)}
		}
	}
	if v, ok := vpuo.mutation.WebsiteURI(); ok {
		if err := vendorprofile.WebsiteURIValidator(v); err != nil {
			return &ValidationError{Name: "website_uri", err: fmt.Errorf(`generated: validator failed for field "VendorProfile.website_uri": %w`, err)}
		}
	}
	if v, ok := vpuo.mutation.TaxID(); ok {
		if err := vendorprofile.TaxIDValidator(v); err != nil {
			return &ValidationError{Name: "tax_id", err: fmt.Errorf(`generated: validator failed for field "VendorProfile.tax_id": %w`, err)}
		}
	}
	if v, ok := vpuo.mutation.TaxIDType(); ok {
		if err := vendorprofile.TaxIDTypeValidator(v); err != nil {
			return &ValidationError{Name: "tax_id_type", err: fmt.Errorf(`generated: validator failed for field "VendorProfile.tax_id_type": %w`, err)}
		}
	}
	return nil
}

func (vpuo *VendorProfileUpdateOne) sqlSave(ctx context.Context) (_node *VendorProfile, err error) {
	if err := vpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendorprofile.Table, vendorprofile.Columns, sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString))
	id, ok := vpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "VendorProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vendorprofile.FieldID)
		for _, f := range fields {
			if !vendorprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != vendorprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vpuo.mutation.CreatedAtCleared() {
		_spec.ClearField(vendorprofile.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofile.FieldUpdatedAt, field.TypeTime, value)
	}
	if vpuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(vendorprofile.FieldUpdatedAt, field.TypeTime)
	}
	if vpuo.mutation.CreatedByCleared() {
		_spec.ClearField(vendorprofile.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vpuo.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofile.FieldUpdatedBy, field.TypeString, value)
	}
	if vpuo.mutation.UpdatedByCleared() {
		_spec.ClearField(vendorprofile.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vpuo.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofile.FieldDeletedAt, field.TypeTime, value)
	}
	if vpuo.mutation.DeletedAtCleared() {
		_spec.ClearField(vendorprofile.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vpuo.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofile.FieldDeletedBy, field.TypeString, value)
	}
	if vpuo.mutation.DeletedByCleared() {
		_spec.ClearField(vendorprofile.FieldDeletedBy, field.TypeString)
	}
	if value, ok := vpuo.mutation.Tags(); ok {
		_spec.SetField(vendorprofile.FieldTags, field.TypeJSON, value)
	}
	if value, ok := vpuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vendorprofile.FieldTags, value)
		})
	}
	if vpuo.mutation.TagsCleared() {
		_spec.ClearField(vendorprofile.FieldTags, field.TypeJSON)
	}
	if value, ok := vpuo.mutation.Name(); ok {
		_spec.SetField(vendorprofile.FieldName, field.TypeString, value)
	}
	if value, ok := vpuo.mutation.CorporationType(); ok {
		_spec.SetField(vendorprofile.FieldCorporationType, field.TypeString, value)
	}
	if vpuo.mutation.CorporationTypeCleared() {
		_spec.ClearField(vendorprofile.FieldCorporationType, field.TypeString)
	}
	if value, ok := vpuo.mutation.CorporationDba(); ok {
		_spec.SetField(vendorprofile.FieldCorporationDba, field.TypeString, value)
	}
	if vpuo.mutation.CorporationDbaCleared() {
		_spec.ClearField(vendorprofile.FieldCorporationDba, field.TypeString)
	}
	if value, ok := vpuo.mutation.Description(); ok {
		_spec.SetField(vendorprofile.FieldDescription, field.TypeString, value)
	}
	if vpuo.mutation.DescriptionCleared() {
		_spec.ClearField(vendorprofile.FieldDescription, field.TypeString)
	}
	if value, ok := vpuo.mutation.WebsiteURI(); ok {
		_spec.SetField(vendorprofile.FieldWebsiteURI, field.TypeString, value)
	}
	if vpuo.mutation.WebsiteURICleared() {
		_spec.ClearField(vendorprofile.FieldWebsiteURI, field.TypeString)
	}
	if value, ok := vpuo.mutation.TaxID(); ok {
		_spec.SetField(vendorprofile.FieldTaxID, field.TypeString, value)
	}
	if vpuo.mutation.TaxIDCleared() {
		_spec.ClearField(vendorprofile.FieldTaxID, field.TypeString)
	}
	if value, ok := vpuo.mutation.TaxIDType(); ok {
		_spec.SetField(vendorprofile.FieldTaxIDType, field.TypeEnum, value)
	}
	if vpuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorprofile.OwnerTable,
			Columns: []string{vendorprofile.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpuo.schemaConfig.VendorProfile
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorprofile.OwnerTable,
			Columns: []string{vendorprofile.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpuo.schemaConfig.VendorProfile
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vpuo.mutation.PostalAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vendorprofile.PostalAddressesTable,
			Columns: vendorprofile.PostalAddressesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpuo.schemaConfig.VendorProfilePostalAddress
		createE := &VendorProfilePostalAddressCreate{config: vpuo.config, mutation: newVendorProfilePostalAddressMutation(vpuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpuo.mutation.RemovedPostalAddressesIDs(); len(nodes) > 0 && !vpuo.mutation.PostalAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vendorprofile.PostalAddressesTable,
			Columns: vendorprofile.PostalAddressesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpuo.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VendorProfilePostalAddressCreate{config: vpuo.config, mutation: newVendorProfilePostalAddressMutation(vpuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpuo.mutation.PostalAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vendorprofile.PostalAddressesTable,
			Columns: vendorprofile.PostalAddressesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpuo.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VendorProfilePostalAddressCreate{config: vpuo.config, mutation: newVendorProfilePostalAddressMutation(vpuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vpuo.mutation.PhoneNumbersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vendorprofile.PhoneNumbersTable,
			Columns: vendorprofile.PhoneNumbersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phonenumber.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpuo.schemaConfig.VendorProfilePhoneNumber
		createE := &VendorProfilePhoneNumberCreate{config: vpuo.config, mutation: newVendorProfilePhoneNumberMutation(vpuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpuo.mutation.RemovedPhoneNumbersIDs(); len(nodes) > 0 && !vpuo.mutation.PhoneNumbersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vendorprofile.PhoneNumbersTable,
			Columns: vendorprofile.PhoneNumbersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phonenumber.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpuo.schemaConfig.VendorProfilePhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VendorProfilePhoneNumberCreate{config: vpuo.config, mutation: newVendorProfilePhoneNumberMutation(vpuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpuo.mutation.PhoneNumbersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vendorprofile.PhoneNumbersTable,
			Columns: vendorprofile.PhoneNumbersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phonenumber.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpuo.schemaConfig.VendorProfilePhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VendorProfilePhoneNumberCreate{config: vpuo.config, mutation: newVendorProfilePhoneNumberMutation(vpuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vpuo.mutation.PaymentPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendorprofile.PaymentPreferencesTable,
			Columns: []string{vendorprofile.PaymentPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilepaymentpreference.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpuo.schemaConfig.VendorProfilePaymentPreference
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpuo.mutation.RemovedPaymentPreferencesIDs(); len(nodes) > 0 && !vpuo.mutation.PaymentPreferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendorprofile.PaymentPreferencesTable,
			Columns: []string{vendorprofile.PaymentPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilepaymentpreference.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpuo.schemaConfig.VendorProfilePaymentPreference
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpuo.mutation.PaymentPreferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendorprofile.PaymentPreferencesTable,
			Columns: []string{vendorprofile.PaymentPreferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilepaymentpreference.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpuo.schemaConfig.VendorProfilePaymentPreference
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vpuo.mutation.VendorProfilePostalAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vendorprofile.VendorProfilePostalAddressesTable,
			Columns: []string{vendorprofile.VendorProfilePostalAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilepostaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpuo.schemaConfig.VendorProfilePostalAddress
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpuo.mutation.RemovedVendorProfilePostalAddressesIDs(); len(nodes) > 0 && !vpuo.mutation.VendorProfilePostalAddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vendorprofile.VendorProfilePostalAddressesTable,
			Columns: []string{vendorprofile.VendorProfilePostalAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilepostaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpuo.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpuo.mutation.VendorProfilePostalAddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vendorprofile.VendorProfilePostalAddressesTable,
			Columns: []string{vendorprofile.VendorProfilePostalAddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilepostaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpuo.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vpuo.mutation.VendorProfilePhoneNumbersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vendorprofile.VendorProfilePhoneNumbersTable,
			Columns: []string{vendorprofile.VendorProfilePhoneNumbersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilephonenumber.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpuo.schemaConfig.VendorProfilePhoneNumber
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpuo.mutation.RemovedVendorProfilePhoneNumbersIDs(); len(nodes) > 0 && !vpuo.mutation.VendorProfilePhoneNumbersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vendorprofile.VendorProfilePhoneNumbersTable,
			Columns: []string{vendorprofile.VendorProfilePhoneNumbersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilephonenumber.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpuo.schemaConfig.VendorProfilePhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpuo.mutation.VendorProfilePhoneNumbersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vendorprofile.VendorProfilePhoneNumbersTable,
			Columns: []string{vendorprofile.VendorProfilePhoneNumbersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilephonenumber.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpuo.schemaConfig.VendorProfilePhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = vpuo.schemaConfig.VendorProfile
	ctx = internal.NewSchemaConfigContext(ctx, vpuo.schemaConfig)
	_node = &VendorProfile{config: vpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vpuo.mutation.done = true
	return _node, nil
}
