// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/postaladdresshistory"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// PostalAddressHistoryUpdate is the builder for updating PostalAddressHistory entities.
type PostalAddressHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *PostalAddressHistoryMutation
}

// Where appends a list predicates to the PostalAddressHistoryUpdate builder.
func (pahu *PostalAddressHistoryUpdate) Where(ps ...predicate.PostalAddressHistory) *PostalAddressHistoryUpdate {
	pahu.mutation.Where(ps...)
	return pahu
}

// SetUpdatedAt sets the "updated_at" field.
func (pahu *PostalAddressHistoryUpdate) SetUpdatedAt(t time.Time) *PostalAddressHistoryUpdate {
	pahu.mutation.SetUpdatedAt(t)
	return pahu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pahu *PostalAddressHistoryUpdate) ClearUpdatedAt() *PostalAddressHistoryUpdate {
	pahu.mutation.ClearUpdatedAt()
	return pahu
}

// SetUpdatedBy sets the "updated_by" field.
func (pahu *PostalAddressHistoryUpdate) SetUpdatedBy(s string) *PostalAddressHistoryUpdate {
	pahu.mutation.SetUpdatedBy(s)
	return pahu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pahu *PostalAddressHistoryUpdate) SetNillableUpdatedBy(s *string) *PostalAddressHistoryUpdate {
	if s != nil {
		pahu.SetUpdatedBy(*s)
	}
	return pahu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pahu *PostalAddressHistoryUpdate) ClearUpdatedBy() *PostalAddressHistoryUpdate {
	pahu.mutation.ClearUpdatedBy()
	return pahu
}

// SetDeletedAt sets the "deleted_at" field.
func (pahu *PostalAddressHistoryUpdate) SetDeletedAt(t time.Time) *PostalAddressHistoryUpdate {
	pahu.mutation.SetDeletedAt(t)
	return pahu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pahu *PostalAddressHistoryUpdate) SetNillableDeletedAt(t *time.Time) *PostalAddressHistoryUpdate {
	if t != nil {
		pahu.SetDeletedAt(*t)
	}
	return pahu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pahu *PostalAddressHistoryUpdate) ClearDeletedAt() *PostalAddressHistoryUpdate {
	pahu.mutation.ClearDeletedAt()
	return pahu
}

// SetDeletedBy sets the "deleted_by" field.
func (pahu *PostalAddressHistoryUpdate) SetDeletedBy(s string) *PostalAddressHistoryUpdate {
	pahu.mutation.SetDeletedBy(s)
	return pahu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pahu *PostalAddressHistoryUpdate) SetNillableDeletedBy(s *string) *PostalAddressHistoryUpdate {
	if s != nil {
		pahu.SetDeletedBy(*s)
	}
	return pahu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (pahu *PostalAddressHistoryUpdate) ClearDeletedBy() *PostalAddressHistoryUpdate {
	pahu.mutation.ClearDeletedBy()
	return pahu
}

// SetTags sets the "tags" field.
func (pahu *PostalAddressHistoryUpdate) SetTags(s []string) *PostalAddressHistoryUpdate {
	pahu.mutation.SetTags(s)
	return pahu
}

// AppendTags appends s to the "tags" field.
func (pahu *PostalAddressHistoryUpdate) AppendTags(s []string) *PostalAddressHistoryUpdate {
	pahu.mutation.AppendTags(s)
	return pahu
}

// ClearTags clears the value of the "tags" field.
func (pahu *PostalAddressHistoryUpdate) ClearTags() *PostalAddressHistoryUpdate {
	pahu.mutation.ClearTags()
	return pahu
}

// SetOwnerID sets the "owner_id" field.
func (pahu *PostalAddressHistoryUpdate) SetOwnerID(s string) *PostalAddressHistoryUpdate {
	pahu.mutation.SetOwnerID(s)
	return pahu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pahu *PostalAddressHistoryUpdate) SetNillableOwnerID(s *string) *PostalAddressHistoryUpdate {
	if s != nil {
		pahu.SetOwnerID(*s)
	}
	return pahu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (pahu *PostalAddressHistoryUpdate) ClearOwnerID() *PostalAddressHistoryUpdate {
	pahu.mutation.ClearOwnerID()
	return pahu
}

// SetRegionCode sets the "region_code" field.
func (pahu *PostalAddressHistoryUpdate) SetRegionCode(s string) *PostalAddressHistoryUpdate {
	pahu.mutation.SetRegionCode(s)
	return pahu
}

// SetNillableRegionCode sets the "region_code" field if the given value is not nil.
func (pahu *PostalAddressHistoryUpdate) SetNillableRegionCode(s *string) *PostalAddressHistoryUpdate {
	if s != nil {
		pahu.SetRegionCode(*s)
	}
	return pahu
}

// SetLanguageCode sets the "language_code" field.
func (pahu *PostalAddressHistoryUpdate) SetLanguageCode(s string) *PostalAddressHistoryUpdate {
	pahu.mutation.SetLanguageCode(s)
	return pahu
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (pahu *PostalAddressHistoryUpdate) SetNillableLanguageCode(s *string) *PostalAddressHistoryUpdate {
	if s != nil {
		pahu.SetLanguageCode(*s)
	}
	return pahu
}

// ClearLanguageCode clears the value of the "language_code" field.
func (pahu *PostalAddressHistoryUpdate) ClearLanguageCode() *PostalAddressHistoryUpdate {
	pahu.mutation.ClearLanguageCode()
	return pahu
}

// SetPostalCode sets the "postal_code" field.
func (pahu *PostalAddressHistoryUpdate) SetPostalCode(s string) *PostalAddressHistoryUpdate {
	pahu.mutation.SetPostalCode(s)
	return pahu
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (pahu *PostalAddressHistoryUpdate) SetNillablePostalCode(s *string) *PostalAddressHistoryUpdate {
	if s != nil {
		pahu.SetPostalCode(*s)
	}
	return pahu
}

// ClearPostalCode clears the value of the "postal_code" field.
func (pahu *PostalAddressHistoryUpdate) ClearPostalCode() *PostalAddressHistoryUpdate {
	pahu.mutation.ClearPostalCode()
	return pahu
}

// SetSortingCode sets the "sorting_code" field.
func (pahu *PostalAddressHistoryUpdate) SetSortingCode(s string) *PostalAddressHistoryUpdate {
	pahu.mutation.SetSortingCode(s)
	return pahu
}

// SetNillableSortingCode sets the "sorting_code" field if the given value is not nil.
func (pahu *PostalAddressHistoryUpdate) SetNillableSortingCode(s *string) *PostalAddressHistoryUpdate {
	if s != nil {
		pahu.SetSortingCode(*s)
	}
	return pahu
}

// ClearSortingCode clears the value of the "sorting_code" field.
func (pahu *PostalAddressHistoryUpdate) ClearSortingCode() *PostalAddressHistoryUpdate {
	pahu.mutation.ClearSortingCode()
	return pahu
}

// SetAdministrativeArea sets the "administrative_area" field.
func (pahu *PostalAddressHistoryUpdate) SetAdministrativeArea(s string) *PostalAddressHistoryUpdate {
	pahu.mutation.SetAdministrativeArea(s)
	return pahu
}

// SetNillableAdministrativeArea sets the "administrative_area" field if the given value is not nil.
func (pahu *PostalAddressHistoryUpdate) SetNillableAdministrativeArea(s *string) *PostalAddressHistoryUpdate {
	if s != nil {
		pahu.SetAdministrativeArea(*s)
	}
	return pahu
}

// ClearAdministrativeArea clears the value of the "administrative_area" field.
func (pahu *PostalAddressHistoryUpdate) ClearAdministrativeArea() *PostalAddressHistoryUpdate {
	pahu.mutation.ClearAdministrativeArea()
	return pahu
}

// SetLocality sets the "locality" field.
func (pahu *PostalAddressHistoryUpdate) SetLocality(s string) *PostalAddressHistoryUpdate {
	pahu.mutation.SetLocality(s)
	return pahu
}

// SetNillableLocality sets the "locality" field if the given value is not nil.
func (pahu *PostalAddressHistoryUpdate) SetNillableLocality(s *string) *PostalAddressHistoryUpdate {
	if s != nil {
		pahu.SetLocality(*s)
	}
	return pahu
}

// ClearLocality clears the value of the "locality" field.
func (pahu *PostalAddressHistoryUpdate) ClearLocality() *PostalAddressHistoryUpdate {
	pahu.mutation.ClearLocality()
	return pahu
}

// SetSublocality sets the "sublocality" field.
func (pahu *PostalAddressHistoryUpdate) SetSublocality(s string) *PostalAddressHistoryUpdate {
	pahu.mutation.SetSublocality(s)
	return pahu
}

// SetNillableSublocality sets the "sublocality" field if the given value is not nil.
func (pahu *PostalAddressHistoryUpdate) SetNillableSublocality(s *string) *PostalAddressHistoryUpdate {
	if s != nil {
		pahu.SetSublocality(*s)
	}
	return pahu
}

// ClearSublocality clears the value of the "sublocality" field.
func (pahu *PostalAddressHistoryUpdate) ClearSublocality() *PostalAddressHistoryUpdate {
	pahu.mutation.ClearSublocality()
	return pahu
}

// SetAddressLines sets the "address_lines" field.
func (pahu *PostalAddressHistoryUpdate) SetAddressLines(s []string) *PostalAddressHistoryUpdate {
	pahu.mutation.SetAddressLines(s)
	return pahu
}

// AppendAddressLines appends s to the "address_lines" field.
func (pahu *PostalAddressHistoryUpdate) AppendAddressLines(s []string) *PostalAddressHistoryUpdate {
	pahu.mutation.AppendAddressLines(s)
	return pahu
}

// SetRecipients sets the "recipients" field.
func (pahu *PostalAddressHistoryUpdate) SetRecipients(s []string) *PostalAddressHistoryUpdate {
	pahu.mutation.SetRecipients(s)
	return pahu
}

// AppendRecipients appends s to the "recipients" field.
func (pahu *PostalAddressHistoryUpdate) AppendRecipients(s []string) *PostalAddressHistoryUpdate {
	pahu.mutation.AppendRecipients(s)
	return pahu
}

// SetOrganization sets the "organization" field.
func (pahu *PostalAddressHistoryUpdate) SetOrganization(s string) *PostalAddressHistoryUpdate {
	pahu.mutation.SetOrganization(s)
	return pahu
}

// SetNillableOrganization sets the "organization" field if the given value is not nil.
func (pahu *PostalAddressHistoryUpdate) SetNillableOrganization(s *string) *PostalAddressHistoryUpdate {
	if s != nil {
		pahu.SetOrganization(*s)
	}
	return pahu
}

// ClearOrganization clears the value of the "organization" field.
func (pahu *PostalAddressHistoryUpdate) ClearOrganization() *PostalAddressHistoryUpdate {
	pahu.mutation.ClearOrganization()
	return pahu
}

// Mutation returns the PostalAddressHistoryMutation object of the builder.
func (pahu *PostalAddressHistoryUpdate) Mutation() *PostalAddressHistoryMutation {
	return pahu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pahu *PostalAddressHistoryUpdate) Save(ctx context.Context) (int, error) {
	pahu.defaults()
	return withHooks(ctx, pahu.sqlSave, pahu.mutation, pahu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pahu *PostalAddressHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := pahu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pahu *PostalAddressHistoryUpdate) Exec(ctx context.Context) error {
	_, err := pahu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pahu *PostalAddressHistoryUpdate) ExecX(ctx context.Context) {
	if err := pahu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pahu *PostalAddressHistoryUpdate) defaults() {
	if _, ok := pahu.mutation.UpdatedAt(); !ok && !pahu.mutation.UpdatedAtCleared() {
		v := postaladdresshistory.UpdateDefaultUpdatedAt()
		pahu.mutation.SetUpdatedAt(v)
	}
}

func (pahu *PostalAddressHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(postaladdresshistory.Table, postaladdresshistory.Columns, sqlgraph.NewFieldSpec(postaladdresshistory.FieldID, field.TypeString))
	if ps := pahu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pahu.mutation.RefCleared() {
		_spec.ClearField(postaladdresshistory.FieldRef, field.TypeString)
	}
	if pahu.mutation.CreatedAtCleared() {
		_spec.ClearField(postaladdresshistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pahu.mutation.UpdatedAt(); ok {
		_spec.SetField(postaladdresshistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if pahu.mutation.UpdatedAtCleared() {
		_spec.ClearField(postaladdresshistory.FieldUpdatedAt, field.TypeTime)
	}
	if pahu.mutation.CreatedByCleared() {
		_spec.ClearField(postaladdresshistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pahu.mutation.UpdatedBy(); ok {
		_spec.SetField(postaladdresshistory.FieldUpdatedBy, field.TypeString, value)
	}
	if pahu.mutation.UpdatedByCleared() {
		_spec.ClearField(postaladdresshistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pahu.mutation.DeletedAt(); ok {
		_spec.SetField(postaladdresshistory.FieldDeletedAt, field.TypeTime, value)
	}
	if pahu.mutation.DeletedAtCleared() {
		_spec.ClearField(postaladdresshistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pahu.mutation.DeletedBy(); ok {
		_spec.SetField(postaladdresshistory.FieldDeletedBy, field.TypeString, value)
	}
	if pahu.mutation.DeletedByCleared() {
		_spec.ClearField(postaladdresshistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := pahu.mutation.Tags(); ok {
		_spec.SetField(postaladdresshistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := pahu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, postaladdresshistory.FieldTags, value)
		})
	}
	if pahu.mutation.TagsCleared() {
		_spec.ClearField(postaladdresshistory.FieldTags, field.TypeJSON)
	}
	if value, ok := pahu.mutation.OwnerID(); ok {
		_spec.SetField(postaladdresshistory.FieldOwnerID, field.TypeString, value)
	}
	if pahu.mutation.OwnerIDCleared() {
		_spec.ClearField(postaladdresshistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := pahu.mutation.RegionCode(); ok {
		_spec.SetField(postaladdresshistory.FieldRegionCode, field.TypeString, value)
	}
	if value, ok := pahu.mutation.LanguageCode(); ok {
		_spec.SetField(postaladdresshistory.FieldLanguageCode, field.TypeString, value)
	}
	if pahu.mutation.LanguageCodeCleared() {
		_spec.ClearField(postaladdresshistory.FieldLanguageCode, field.TypeString)
	}
	if value, ok := pahu.mutation.PostalCode(); ok {
		_spec.SetField(postaladdresshistory.FieldPostalCode, field.TypeString, value)
	}
	if pahu.mutation.PostalCodeCleared() {
		_spec.ClearField(postaladdresshistory.FieldPostalCode, field.TypeString)
	}
	if value, ok := pahu.mutation.SortingCode(); ok {
		_spec.SetField(postaladdresshistory.FieldSortingCode, field.TypeString, value)
	}
	if pahu.mutation.SortingCodeCleared() {
		_spec.ClearField(postaladdresshistory.FieldSortingCode, field.TypeString)
	}
	if value, ok := pahu.mutation.AdministrativeArea(); ok {
		_spec.SetField(postaladdresshistory.FieldAdministrativeArea, field.TypeString, value)
	}
	if pahu.mutation.AdministrativeAreaCleared() {
		_spec.ClearField(postaladdresshistory.FieldAdministrativeArea, field.TypeString)
	}
	if value, ok := pahu.mutation.Locality(); ok {
		_spec.SetField(postaladdresshistory.FieldLocality, field.TypeString, value)
	}
	if pahu.mutation.LocalityCleared() {
		_spec.ClearField(postaladdresshistory.FieldLocality, field.TypeString)
	}
	if value, ok := pahu.mutation.Sublocality(); ok {
		_spec.SetField(postaladdresshistory.FieldSublocality, field.TypeString, value)
	}
	if pahu.mutation.SublocalityCleared() {
		_spec.ClearField(postaladdresshistory.FieldSublocality, field.TypeString)
	}
	if value, ok := pahu.mutation.AddressLines(); ok {
		_spec.SetField(postaladdresshistory.FieldAddressLines, field.TypeJSON, value)
	}
	if value, ok := pahu.mutation.AppendedAddressLines(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, postaladdresshistory.FieldAddressLines, value)
		})
	}
	if value, ok := pahu.mutation.Recipients(); ok {
		_spec.SetField(postaladdresshistory.FieldRecipients, field.TypeJSON, value)
	}
	if value, ok := pahu.mutation.AppendedRecipients(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, postaladdresshistory.FieldRecipients, value)
		})
	}
	if value, ok := pahu.mutation.Organization(); ok {
		_spec.SetField(postaladdresshistory.FieldOrganization, field.TypeString, value)
	}
	if pahu.mutation.OrganizationCleared() {
		_spec.ClearField(postaladdresshistory.FieldOrganization, field.TypeString)
	}
	_spec.Node.Schema = pahu.schemaConfig.PostalAddressHistory
	ctx = internal.NewSchemaConfigContext(ctx, pahu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, pahu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postaladdresshistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pahu.mutation.done = true
	return n, nil
}

// PostalAddressHistoryUpdateOne is the builder for updating a single PostalAddressHistory entity.
type PostalAddressHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostalAddressHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (pahuo *PostalAddressHistoryUpdateOne) SetUpdatedAt(t time.Time) *PostalAddressHistoryUpdateOne {
	pahuo.mutation.SetUpdatedAt(t)
	return pahuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pahuo *PostalAddressHistoryUpdateOne) ClearUpdatedAt() *PostalAddressHistoryUpdateOne {
	pahuo.mutation.ClearUpdatedAt()
	return pahuo
}

// SetUpdatedBy sets the "updated_by" field.
func (pahuo *PostalAddressHistoryUpdateOne) SetUpdatedBy(s string) *PostalAddressHistoryUpdateOne {
	pahuo.mutation.SetUpdatedBy(s)
	return pahuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pahuo *PostalAddressHistoryUpdateOne) SetNillableUpdatedBy(s *string) *PostalAddressHistoryUpdateOne {
	if s != nil {
		pahuo.SetUpdatedBy(*s)
	}
	return pahuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pahuo *PostalAddressHistoryUpdateOne) ClearUpdatedBy() *PostalAddressHistoryUpdateOne {
	pahuo.mutation.ClearUpdatedBy()
	return pahuo
}

// SetDeletedAt sets the "deleted_at" field.
func (pahuo *PostalAddressHistoryUpdateOne) SetDeletedAt(t time.Time) *PostalAddressHistoryUpdateOne {
	pahuo.mutation.SetDeletedAt(t)
	return pahuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pahuo *PostalAddressHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *PostalAddressHistoryUpdateOne {
	if t != nil {
		pahuo.SetDeletedAt(*t)
	}
	return pahuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pahuo *PostalAddressHistoryUpdateOne) ClearDeletedAt() *PostalAddressHistoryUpdateOne {
	pahuo.mutation.ClearDeletedAt()
	return pahuo
}

// SetDeletedBy sets the "deleted_by" field.
func (pahuo *PostalAddressHistoryUpdateOne) SetDeletedBy(s string) *PostalAddressHistoryUpdateOne {
	pahuo.mutation.SetDeletedBy(s)
	return pahuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pahuo *PostalAddressHistoryUpdateOne) SetNillableDeletedBy(s *string) *PostalAddressHistoryUpdateOne {
	if s != nil {
		pahuo.SetDeletedBy(*s)
	}
	return pahuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (pahuo *PostalAddressHistoryUpdateOne) ClearDeletedBy() *PostalAddressHistoryUpdateOne {
	pahuo.mutation.ClearDeletedBy()
	return pahuo
}

// SetTags sets the "tags" field.
func (pahuo *PostalAddressHistoryUpdateOne) SetTags(s []string) *PostalAddressHistoryUpdateOne {
	pahuo.mutation.SetTags(s)
	return pahuo
}

// AppendTags appends s to the "tags" field.
func (pahuo *PostalAddressHistoryUpdateOne) AppendTags(s []string) *PostalAddressHistoryUpdateOne {
	pahuo.mutation.AppendTags(s)
	return pahuo
}

// ClearTags clears the value of the "tags" field.
func (pahuo *PostalAddressHistoryUpdateOne) ClearTags() *PostalAddressHistoryUpdateOne {
	pahuo.mutation.ClearTags()
	return pahuo
}

// SetOwnerID sets the "owner_id" field.
func (pahuo *PostalAddressHistoryUpdateOne) SetOwnerID(s string) *PostalAddressHistoryUpdateOne {
	pahuo.mutation.SetOwnerID(s)
	return pahuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pahuo *PostalAddressHistoryUpdateOne) SetNillableOwnerID(s *string) *PostalAddressHistoryUpdateOne {
	if s != nil {
		pahuo.SetOwnerID(*s)
	}
	return pahuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (pahuo *PostalAddressHistoryUpdateOne) ClearOwnerID() *PostalAddressHistoryUpdateOne {
	pahuo.mutation.ClearOwnerID()
	return pahuo
}

// SetRegionCode sets the "region_code" field.
func (pahuo *PostalAddressHistoryUpdateOne) SetRegionCode(s string) *PostalAddressHistoryUpdateOne {
	pahuo.mutation.SetRegionCode(s)
	return pahuo
}

// SetNillableRegionCode sets the "region_code" field if the given value is not nil.
func (pahuo *PostalAddressHistoryUpdateOne) SetNillableRegionCode(s *string) *PostalAddressHistoryUpdateOne {
	if s != nil {
		pahuo.SetRegionCode(*s)
	}
	return pahuo
}

// SetLanguageCode sets the "language_code" field.
func (pahuo *PostalAddressHistoryUpdateOne) SetLanguageCode(s string) *PostalAddressHistoryUpdateOne {
	pahuo.mutation.SetLanguageCode(s)
	return pahuo
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (pahuo *PostalAddressHistoryUpdateOne) SetNillableLanguageCode(s *string) *PostalAddressHistoryUpdateOne {
	if s != nil {
		pahuo.SetLanguageCode(*s)
	}
	return pahuo
}

// ClearLanguageCode clears the value of the "language_code" field.
func (pahuo *PostalAddressHistoryUpdateOne) ClearLanguageCode() *PostalAddressHistoryUpdateOne {
	pahuo.mutation.ClearLanguageCode()
	return pahuo
}

// SetPostalCode sets the "postal_code" field.
func (pahuo *PostalAddressHistoryUpdateOne) SetPostalCode(s string) *PostalAddressHistoryUpdateOne {
	pahuo.mutation.SetPostalCode(s)
	return pahuo
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (pahuo *PostalAddressHistoryUpdateOne) SetNillablePostalCode(s *string) *PostalAddressHistoryUpdateOne {
	if s != nil {
		pahuo.SetPostalCode(*s)
	}
	return pahuo
}

// ClearPostalCode clears the value of the "postal_code" field.
func (pahuo *PostalAddressHistoryUpdateOne) ClearPostalCode() *PostalAddressHistoryUpdateOne {
	pahuo.mutation.ClearPostalCode()
	return pahuo
}

// SetSortingCode sets the "sorting_code" field.
func (pahuo *PostalAddressHistoryUpdateOne) SetSortingCode(s string) *PostalAddressHistoryUpdateOne {
	pahuo.mutation.SetSortingCode(s)
	return pahuo
}

// SetNillableSortingCode sets the "sorting_code" field if the given value is not nil.
func (pahuo *PostalAddressHistoryUpdateOne) SetNillableSortingCode(s *string) *PostalAddressHistoryUpdateOne {
	if s != nil {
		pahuo.SetSortingCode(*s)
	}
	return pahuo
}

// ClearSortingCode clears the value of the "sorting_code" field.
func (pahuo *PostalAddressHistoryUpdateOne) ClearSortingCode() *PostalAddressHistoryUpdateOne {
	pahuo.mutation.ClearSortingCode()
	return pahuo
}

// SetAdministrativeArea sets the "administrative_area" field.
func (pahuo *PostalAddressHistoryUpdateOne) SetAdministrativeArea(s string) *PostalAddressHistoryUpdateOne {
	pahuo.mutation.SetAdministrativeArea(s)
	return pahuo
}

// SetNillableAdministrativeArea sets the "administrative_area" field if the given value is not nil.
func (pahuo *PostalAddressHistoryUpdateOne) SetNillableAdministrativeArea(s *string) *PostalAddressHistoryUpdateOne {
	if s != nil {
		pahuo.SetAdministrativeArea(*s)
	}
	return pahuo
}

// ClearAdministrativeArea clears the value of the "administrative_area" field.
func (pahuo *PostalAddressHistoryUpdateOne) ClearAdministrativeArea() *PostalAddressHistoryUpdateOne {
	pahuo.mutation.ClearAdministrativeArea()
	return pahuo
}

// SetLocality sets the "locality" field.
func (pahuo *PostalAddressHistoryUpdateOne) SetLocality(s string) *PostalAddressHistoryUpdateOne {
	pahuo.mutation.SetLocality(s)
	return pahuo
}

// SetNillableLocality sets the "locality" field if the given value is not nil.
func (pahuo *PostalAddressHistoryUpdateOne) SetNillableLocality(s *string) *PostalAddressHistoryUpdateOne {
	if s != nil {
		pahuo.SetLocality(*s)
	}
	return pahuo
}

// ClearLocality clears the value of the "locality" field.
func (pahuo *PostalAddressHistoryUpdateOne) ClearLocality() *PostalAddressHistoryUpdateOne {
	pahuo.mutation.ClearLocality()
	return pahuo
}

// SetSublocality sets the "sublocality" field.
func (pahuo *PostalAddressHistoryUpdateOne) SetSublocality(s string) *PostalAddressHistoryUpdateOne {
	pahuo.mutation.SetSublocality(s)
	return pahuo
}

// SetNillableSublocality sets the "sublocality" field if the given value is not nil.
func (pahuo *PostalAddressHistoryUpdateOne) SetNillableSublocality(s *string) *PostalAddressHistoryUpdateOne {
	if s != nil {
		pahuo.SetSublocality(*s)
	}
	return pahuo
}

// ClearSublocality clears the value of the "sublocality" field.
func (pahuo *PostalAddressHistoryUpdateOne) ClearSublocality() *PostalAddressHistoryUpdateOne {
	pahuo.mutation.ClearSublocality()
	return pahuo
}

// SetAddressLines sets the "address_lines" field.
func (pahuo *PostalAddressHistoryUpdateOne) SetAddressLines(s []string) *PostalAddressHistoryUpdateOne {
	pahuo.mutation.SetAddressLines(s)
	return pahuo
}

// AppendAddressLines appends s to the "address_lines" field.
func (pahuo *PostalAddressHistoryUpdateOne) AppendAddressLines(s []string) *PostalAddressHistoryUpdateOne {
	pahuo.mutation.AppendAddressLines(s)
	return pahuo
}

// SetRecipients sets the "recipients" field.
func (pahuo *PostalAddressHistoryUpdateOne) SetRecipients(s []string) *PostalAddressHistoryUpdateOne {
	pahuo.mutation.SetRecipients(s)
	return pahuo
}

// AppendRecipients appends s to the "recipients" field.
func (pahuo *PostalAddressHistoryUpdateOne) AppendRecipients(s []string) *PostalAddressHistoryUpdateOne {
	pahuo.mutation.AppendRecipients(s)
	return pahuo
}

// SetOrganization sets the "organization" field.
func (pahuo *PostalAddressHistoryUpdateOne) SetOrganization(s string) *PostalAddressHistoryUpdateOne {
	pahuo.mutation.SetOrganization(s)
	return pahuo
}

// SetNillableOrganization sets the "organization" field if the given value is not nil.
func (pahuo *PostalAddressHistoryUpdateOne) SetNillableOrganization(s *string) *PostalAddressHistoryUpdateOne {
	if s != nil {
		pahuo.SetOrganization(*s)
	}
	return pahuo
}

// ClearOrganization clears the value of the "organization" field.
func (pahuo *PostalAddressHistoryUpdateOne) ClearOrganization() *PostalAddressHistoryUpdateOne {
	pahuo.mutation.ClearOrganization()
	return pahuo
}

// Mutation returns the PostalAddressHistoryMutation object of the builder.
func (pahuo *PostalAddressHistoryUpdateOne) Mutation() *PostalAddressHistoryMutation {
	return pahuo.mutation
}

// Where appends a list predicates to the PostalAddressHistoryUpdate builder.
func (pahuo *PostalAddressHistoryUpdateOne) Where(ps ...predicate.PostalAddressHistory) *PostalAddressHistoryUpdateOne {
	pahuo.mutation.Where(ps...)
	return pahuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pahuo *PostalAddressHistoryUpdateOne) Select(field string, fields ...string) *PostalAddressHistoryUpdateOne {
	pahuo.fields = append([]string{field}, fields...)
	return pahuo
}

// Save executes the query and returns the updated PostalAddressHistory entity.
func (pahuo *PostalAddressHistoryUpdateOne) Save(ctx context.Context) (*PostalAddressHistory, error) {
	pahuo.defaults()
	return withHooks(ctx, pahuo.sqlSave, pahuo.mutation, pahuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pahuo *PostalAddressHistoryUpdateOne) SaveX(ctx context.Context) *PostalAddressHistory {
	node, err := pahuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pahuo *PostalAddressHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := pahuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pahuo *PostalAddressHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := pahuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pahuo *PostalAddressHistoryUpdateOne) defaults() {
	if _, ok := pahuo.mutation.UpdatedAt(); !ok && !pahuo.mutation.UpdatedAtCleared() {
		v := postaladdresshistory.UpdateDefaultUpdatedAt()
		pahuo.mutation.SetUpdatedAt(v)
	}
}

func (pahuo *PostalAddressHistoryUpdateOne) sqlSave(ctx context.Context) (_node *PostalAddressHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(postaladdresshistory.Table, postaladdresshistory.Columns, sqlgraph.NewFieldSpec(postaladdresshistory.FieldID, field.TypeString))
	id, ok := pahuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "PostalAddressHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pahuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, postaladdresshistory.FieldID)
		for _, f := range fields {
			if !postaladdresshistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != postaladdresshistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pahuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pahuo.mutation.RefCleared() {
		_spec.ClearField(postaladdresshistory.FieldRef, field.TypeString)
	}
	if pahuo.mutation.CreatedAtCleared() {
		_spec.ClearField(postaladdresshistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pahuo.mutation.UpdatedAt(); ok {
		_spec.SetField(postaladdresshistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if pahuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(postaladdresshistory.FieldUpdatedAt, field.TypeTime)
	}
	if pahuo.mutation.CreatedByCleared() {
		_spec.ClearField(postaladdresshistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pahuo.mutation.UpdatedBy(); ok {
		_spec.SetField(postaladdresshistory.FieldUpdatedBy, field.TypeString, value)
	}
	if pahuo.mutation.UpdatedByCleared() {
		_spec.ClearField(postaladdresshistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pahuo.mutation.DeletedAt(); ok {
		_spec.SetField(postaladdresshistory.FieldDeletedAt, field.TypeTime, value)
	}
	if pahuo.mutation.DeletedAtCleared() {
		_spec.ClearField(postaladdresshistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pahuo.mutation.DeletedBy(); ok {
		_spec.SetField(postaladdresshistory.FieldDeletedBy, field.TypeString, value)
	}
	if pahuo.mutation.DeletedByCleared() {
		_spec.ClearField(postaladdresshistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := pahuo.mutation.Tags(); ok {
		_spec.SetField(postaladdresshistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := pahuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, postaladdresshistory.FieldTags, value)
		})
	}
	if pahuo.mutation.TagsCleared() {
		_spec.ClearField(postaladdresshistory.FieldTags, field.TypeJSON)
	}
	if value, ok := pahuo.mutation.OwnerID(); ok {
		_spec.SetField(postaladdresshistory.FieldOwnerID, field.TypeString, value)
	}
	if pahuo.mutation.OwnerIDCleared() {
		_spec.ClearField(postaladdresshistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := pahuo.mutation.RegionCode(); ok {
		_spec.SetField(postaladdresshistory.FieldRegionCode, field.TypeString, value)
	}
	if value, ok := pahuo.mutation.LanguageCode(); ok {
		_spec.SetField(postaladdresshistory.FieldLanguageCode, field.TypeString, value)
	}
	if pahuo.mutation.LanguageCodeCleared() {
		_spec.ClearField(postaladdresshistory.FieldLanguageCode, field.TypeString)
	}
	if value, ok := pahuo.mutation.PostalCode(); ok {
		_spec.SetField(postaladdresshistory.FieldPostalCode, field.TypeString, value)
	}
	if pahuo.mutation.PostalCodeCleared() {
		_spec.ClearField(postaladdresshistory.FieldPostalCode, field.TypeString)
	}
	if value, ok := pahuo.mutation.SortingCode(); ok {
		_spec.SetField(postaladdresshistory.FieldSortingCode, field.TypeString, value)
	}
	if pahuo.mutation.SortingCodeCleared() {
		_spec.ClearField(postaladdresshistory.FieldSortingCode, field.TypeString)
	}
	if value, ok := pahuo.mutation.AdministrativeArea(); ok {
		_spec.SetField(postaladdresshistory.FieldAdministrativeArea, field.TypeString, value)
	}
	if pahuo.mutation.AdministrativeAreaCleared() {
		_spec.ClearField(postaladdresshistory.FieldAdministrativeArea, field.TypeString)
	}
	if value, ok := pahuo.mutation.Locality(); ok {
		_spec.SetField(postaladdresshistory.FieldLocality, field.TypeString, value)
	}
	if pahuo.mutation.LocalityCleared() {
		_spec.ClearField(postaladdresshistory.FieldLocality, field.TypeString)
	}
	if value, ok := pahuo.mutation.Sublocality(); ok {
		_spec.SetField(postaladdresshistory.FieldSublocality, field.TypeString, value)
	}
	if pahuo.mutation.SublocalityCleared() {
		_spec.ClearField(postaladdresshistory.FieldSublocality, field.TypeString)
	}
	if value, ok := pahuo.mutation.AddressLines(); ok {
		_spec.SetField(postaladdresshistory.FieldAddressLines, field.TypeJSON, value)
	}
	if value, ok := pahuo.mutation.AppendedAddressLines(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, postaladdresshistory.FieldAddressLines, value)
		})
	}
	if value, ok := pahuo.mutation.Recipients(); ok {
		_spec.SetField(postaladdresshistory.FieldRecipients, field.TypeJSON, value)
	}
	if value, ok := pahuo.mutation.AppendedRecipients(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, postaladdresshistory.FieldRecipients, value)
		})
	}
	if value, ok := pahuo.mutation.Organization(); ok {
		_spec.SetField(postaladdresshistory.FieldOrganization, field.TypeString, value)
	}
	if pahuo.mutation.OrganizationCleared() {
		_spec.ClearField(postaladdresshistory.FieldOrganization, field.TypeString)
	}
	_spec.Node.Schema = pahuo.schemaConfig.PostalAddressHistory
	ctx = internal.NewSchemaConfigContext(ctx, pahuo.schemaConfig)
	_node = &PostalAddressHistory{config: pahuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pahuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postaladdresshistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pahuo.mutation.done = true
	return _node, nil
}
