// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/event"
	"github.com/datum-cloud/datum-os/internal/ent/generated/organization"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendor"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofile"
	"github.com/datum-cloud/datum-os/pkg/enums"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// VendorUpdate is the builder for updating Vendor entities.
type VendorUpdate struct {
	config
	hooks    []Hook
	mutation *VendorMutation
}

// Where appends a list predicates to the VendorUpdate builder.
func (vu *VendorUpdate) Where(ps ...predicate.Vendor) *VendorUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VendorUpdate) SetUpdatedAt(t time.Time) *VendorUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vu *VendorUpdate) ClearUpdatedAt() *VendorUpdate {
	vu.mutation.ClearUpdatedAt()
	return vu
}

// SetUpdatedBy sets the "updated_by" field.
func (vu *VendorUpdate) SetUpdatedBy(s string) *VendorUpdate {
	vu.mutation.SetUpdatedBy(s)
	return vu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableUpdatedBy(s *string) *VendorUpdate {
	if s != nil {
		vu.SetUpdatedBy(*s)
	}
	return vu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vu *VendorUpdate) ClearUpdatedBy() *VendorUpdate {
	vu.mutation.ClearUpdatedBy()
	return vu
}

// SetDeletedAt sets the "deleted_at" field.
func (vu *VendorUpdate) SetDeletedAt(t time.Time) *VendorUpdate {
	vu.mutation.SetDeletedAt(t)
	return vu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableDeletedAt(t *time.Time) *VendorUpdate {
	if t != nil {
		vu.SetDeletedAt(*t)
	}
	return vu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vu *VendorUpdate) ClearDeletedAt() *VendorUpdate {
	vu.mutation.ClearDeletedAt()
	return vu
}

// SetDeletedBy sets the "deleted_by" field.
func (vu *VendorUpdate) SetDeletedBy(s string) *VendorUpdate {
	vu.mutation.SetDeletedBy(s)
	return vu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableDeletedBy(s *string) *VendorUpdate {
	if s != nil {
		vu.SetDeletedBy(*s)
	}
	return vu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (vu *VendorUpdate) ClearDeletedBy() *VendorUpdate {
	vu.mutation.ClearDeletedBy()
	return vu
}

// SetTags sets the "tags" field.
func (vu *VendorUpdate) SetTags(s []string) *VendorUpdate {
	vu.mutation.SetTags(s)
	return vu
}

// AppendTags appends s to the "tags" field.
func (vu *VendorUpdate) AppendTags(s []string) *VendorUpdate {
	vu.mutation.AppendTags(s)
	return vu
}

// ClearTags clears the value of the "tags" field.
func (vu *VendorUpdate) ClearTags() *VendorUpdate {
	vu.mutation.ClearTags()
	return vu
}

// SetOwnerID sets the "owner_id" field.
func (vu *VendorUpdate) SetOwnerID(s string) *VendorUpdate {
	vu.mutation.SetOwnerID(s)
	return vu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableOwnerID(s *string) *VendorUpdate {
	if s != nil {
		vu.SetOwnerID(*s)
	}
	return vu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (vu *VendorUpdate) ClearOwnerID() *VendorUpdate {
	vu.mutation.ClearOwnerID()
	return vu
}

// SetDisplayName sets the "display_name" field.
func (vu *VendorUpdate) SetDisplayName(s string) *VendorUpdate {
	vu.mutation.SetDisplayName(s)
	return vu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableDisplayName(s *string) *VendorUpdate {
	if s != nil {
		vu.SetDisplayName(*s)
	}
	return vu
}

// SetVendorType sets the "vendor_type" field.
func (vu *VendorUpdate) SetVendorType(et enums.VendorType) *VendorUpdate {
	vu.mutation.SetVendorType(et)
	return vu
}

// SetNillableVendorType sets the "vendor_type" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableVendorType(et *enums.VendorType) *VendorUpdate {
	if et != nil {
		vu.SetVendorType(*et)
	}
	return vu
}

// SetOnboardingState sets the "onboarding_state" field.
func (vu *VendorUpdate) SetOnboardingState(es enums.OnboardingState) *VendorUpdate {
	vu.mutation.SetOnboardingState(es)
	return vu
}

// SetNillableOnboardingState sets the "onboarding_state" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableOnboardingState(es *enums.OnboardingState) *VendorUpdate {
	if es != nil {
		vu.SetOnboardingState(*es)
	}
	return vu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (vu *VendorUpdate) SetOwner(o *Organization) *VendorUpdate {
	return vu.SetOwnerID(o.ID)
}

// SetProfileID sets the "profile" edge to the VendorProfile entity by ID.
func (vu *VendorUpdate) SetProfileID(id string) *VendorUpdate {
	vu.mutation.SetProfileID(id)
	return vu
}

// SetProfile sets the "profile" edge to the VendorProfile entity.
func (vu *VendorUpdate) SetProfile(v *VendorProfile) *VendorUpdate {
	return vu.SetProfileID(v.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (vu *VendorUpdate) AddEventIDs(ids ...string) *VendorUpdate {
	vu.mutation.AddEventIDs(ids...)
	return vu
}

// AddEvents adds the "events" edges to the Event entity.
func (vu *VendorUpdate) AddEvents(e ...*Event) *VendorUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vu.AddEventIDs(ids...)
}

// Mutation returns the VendorMutation object of the builder.
func (vu *VendorUpdate) Mutation() *VendorMutation {
	return vu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (vu *VendorUpdate) ClearOwner() *VendorUpdate {
	vu.mutation.ClearOwner()
	return vu
}

// ClearProfile clears the "profile" edge to the VendorProfile entity.
func (vu *VendorUpdate) ClearProfile() *VendorUpdate {
	vu.mutation.ClearProfile()
	return vu
}

// ClearEvents clears all "events" edges to the Event entity.
func (vu *VendorUpdate) ClearEvents() *VendorUpdate {
	vu.mutation.ClearEvents()
	return vu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (vu *VendorUpdate) RemoveEventIDs(ids ...string) *VendorUpdate {
	vu.mutation.RemoveEventIDs(ids...)
	return vu
}

// RemoveEvents removes "events" edges to Event entities.
func (vu *VendorUpdate) RemoveEvents(e ...*Event) *VendorUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VendorUpdate) Save(ctx context.Context) (int, error) {
	if err := vu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VendorUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VendorUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VendorUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VendorUpdate) defaults() error {
	if _, ok := vu.mutation.UpdatedAt(); !ok && !vu.mutation.UpdatedAtCleared() {
		if vendor.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized vendor.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := vendor.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vu *VendorUpdate) check() error {
	if v, ok := vu.mutation.OwnerID(); ok {
		if err := vendor.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Vendor.owner_id": %w`, err)}
		}
	}
	if v, ok := vu.mutation.DisplayName(); ok {
		if err := vendor.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "Vendor.display_name": %w`, err)}
		}
	}
	if v, ok := vu.mutation.VendorType(); ok {
		if err := vendor.VendorTypeValidator(v); err != nil {
			return &ValidationError{Name: "vendor_type", err: fmt.Errorf(`generated: validator failed for field "Vendor.vendor_type": %w`, err)}
		}
	}
	if v, ok := vu.mutation.OnboardingState(); ok {
		if err := vendor.OnboardingStateValidator(v); err != nil {
			return &ValidationError{Name: "onboarding_state", err: fmt.Errorf(`generated: validator failed for field "Vendor.onboarding_state": %w`, err)}
		}
	}
	if vu.mutation.ProfileCleared() && len(vu.mutation.ProfileIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Vendor.profile"`)
	}
	return nil
}

func (vu *VendorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendor.Table, vendor.Columns, sqlgraph.NewFieldSpec(vendor.FieldID, field.TypeString))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vu.mutation.CreatedAtCleared() {
		_spec.ClearField(vendor.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(vendor.FieldUpdatedAt, field.TypeTime, value)
	}
	if vu.mutation.UpdatedAtCleared() {
		_spec.ClearField(vendor.FieldUpdatedAt, field.TypeTime)
	}
	if vu.mutation.CreatedByCleared() {
		_spec.ClearField(vendor.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vu.mutation.UpdatedBy(); ok {
		_spec.SetField(vendor.FieldUpdatedBy, field.TypeString, value)
	}
	if vu.mutation.UpdatedByCleared() {
		_spec.ClearField(vendor.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vu.mutation.DeletedAt(); ok {
		_spec.SetField(vendor.FieldDeletedAt, field.TypeTime, value)
	}
	if vu.mutation.DeletedAtCleared() {
		_spec.ClearField(vendor.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vu.mutation.DeletedBy(); ok {
		_spec.SetField(vendor.FieldDeletedBy, field.TypeString, value)
	}
	if vu.mutation.DeletedByCleared() {
		_spec.ClearField(vendor.FieldDeletedBy, field.TypeString)
	}
	if value, ok := vu.mutation.Tags(); ok {
		_spec.SetField(vendor.FieldTags, field.TypeJSON, value)
	}
	if value, ok := vu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vendor.FieldTags, value)
		})
	}
	if vu.mutation.TagsCleared() {
		_spec.ClearField(vendor.FieldTags, field.TypeJSON)
	}
	if value, ok := vu.mutation.DisplayName(); ok {
		_spec.SetField(vendor.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := vu.mutation.VendorType(); ok {
		_spec.SetField(vendor.FieldVendorType, field.TypeEnum, value)
	}
	if value, ok := vu.mutation.OnboardingState(); ok {
		_spec.SetField(vendor.FieldOnboardingState, field.TypeEnum, value)
	}
	if vu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendor.OwnerTable,
			Columns: []string{vendor.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = vu.schemaConfig.Vendor
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendor.OwnerTable,
			Columns: []string{vendor.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = vu.schemaConfig.Vendor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   vendor.ProfileTable,
			Columns: []string{vendor.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = vu.schemaConfig.VendorProfile
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   vendor.ProfileTable,
			Columns: []string{vendor.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = vu.schemaConfig.VendorProfile
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.EventsTable,
			Columns: []string{vendor.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = vu.schemaConfig.Event
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !vu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.EventsTable,
			Columns: []string{vendor.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = vu.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.EventsTable,
			Columns: []string{vendor.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = vu.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = vu.schemaConfig.Vendor
	ctx = internal.NewSchemaConfigContext(ctx, vu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VendorUpdateOne is the builder for updating a single Vendor entity.
type VendorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VendorMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VendorUpdateOne) SetUpdatedAt(t time.Time) *VendorUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vuo *VendorUpdateOne) ClearUpdatedAt() *VendorUpdateOne {
	vuo.mutation.ClearUpdatedAt()
	return vuo
}

// SetUpdatedBy sets the "updated_by" field.
func (vuo *VendorUpdateOne) SetUpdatedBy(s string) *VendorUpdateOne {
	vuo.mutation.SetUpdatedBy(s)
	return vuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableUpdatedBy(s *string) *VendorUpdateOne {
	if s != nil {
		vuo.SetUpdatedBy(*s)
	}
	return vuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vuo *VendorUpdateOne) ClearUpdatedBy() *VendorUpdateOne {
	vuo.mutation.ClearUpdatedBy()
	return vuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vuo *VendorUpdateOne) SetDeletedAt(t time.Time) *VendorUpdateOne {
	vuo.mutation.SetDeletedAt(t)
	return vuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableDeletedAt(t *time.Time) *VendorUpdateOne {
	if t != nil {
		vuo.SetDeletedAt(*t)
	}
	return vuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vuo *VendorUpdateOne) ClearDeletedAt() *VendorUpdateOne {
	vuo.mutation.ClearDeletedAt()
	return vuo
}

// SetDeletedBy sets the "deleted_by" field.
func (vuo *VendorUpdateOne) SetDeletedBy(s string) *VendorUpdateOne {
	vuo.mutation.SetDeletedBy(s)
	return vuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableDeletedBy(s *string) *VendorUpdateOne {
	if s != nil {
		vuo.SetDeletedBy(*s)
	}
	return vuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (vuo *VendorUpdateOne) ClearDeletedBy() *VendorUpdateOne {
	vuo.mutation.ClearDeletedBy()
	return vuo
}

// SetTags sets the "tags" field.
func (vuo *VendorUpdateOne) SetTags(s []string) *VendorUpdateOne {
	vuo.mutation.SetTags(s)
	return vuo
}

// AppendTags appends s to the "tags" field.
func (vuo *VendorUpdateOne) AppendTags(s []string) *VendorUpdateOne {
	vuo.mutation.AppendTags(s)
	return vuo
}

// ClearTags clears the value of the "tags" field.
func (vuo *VendorUpdateOne) ClearTags() *VendorUpdateOne {
	vuo.mutation.ClearTags()
	return vuo
}

// SetOwnerID sets the "owner_id" field.
func (vuo *VendorUpdateOne) SetOwnerID(s string) *VendorUpdateOne {
	vuo.mutation.SetOwnerID(s)
	return vuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableOwnerID(s *string) *VendorUpdateOne {
	if s != nil {
		vuo.SetOwnerID(*s)
	}
	return vuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (vuo *VendorUpdateOne) ClearOwnerID() *VendorUpdateOne {
	vuo.mutation.ClearOwnerID()
	return vuo
}

// SetDisplayName sets the "display_name" field.
func (vuo *VendorUpdateOne) SetDisplayName(s string) *VendorUpdateOne {
	vuo.mutation.SetDisplayName(s)
	return vuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableDisplayName(s *string) *VendorUpdateOne {
	if s != nil {
		vuo.SetDisplayName(*s)
	}
	return vuo
}

// SetVendorType sets the "vendor_type" field.
func (vuo *VendorUpdateOne) SetVendorType(et enums.VendorType) *VendorUpdateOne {
	vuo.mutation.SetVendorType(et)
	return vuo
}

// SetNillableVendorType sets the "vendor_type" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableVendorType(et *enums.VendorType) *VendorUpdateOne {
	if et != nil {
		vuo.SetVendorType(*et)
	}
	return vuo
}

// SetOnboardingState sets the "onboarding_state" field.
func (vuo *VendorUpdateOne) SetOnboardingState(es enums.OnboardingState) *VendorUpdateOne {
	vuo.mutation.SetOnboardingState(es)
	return vuo
}

// SetNillableOnboardingState sets the "onboarding_state" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableOnboardingState(es *enums.OnboardingState) *VendorUpdateOne {
	if es != nil {
		vuo.SetOnboardingState(*es)
	}
	return vuo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (vuo *VendorUpdateOne) SetOwner(o *Organization) *VendorUpdateOne {
	return vuo.SetOwnerID(o.ID)
}

// SetProfileID sets the "profile" edge to the VendorProfile entity by ID.
func (vuo *VendorUpdateOne) SetProfileID(id string) *VendorUpdateOne {
	vuo.mutation.SetProfileID(id)
	return vuo
}

// SetProfile sets the "profile" edge to the VendorProfile entity.
func (vuo *VendorUpdateOne) SetProfile(v *VendorProfile) *VendorUpdateOne {
	return vuo.SetProfileID(v.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (vuo *VendorUpdateOne) AddEventIDs(ids ...string) *VendorUpdateOne {
	vuo.mutation.AddEventIDs(ids...)
	return vuo
}

// AddEvents adds the "events" edges to the Event entity.
func (vuo *VendorUpdateOne) AddEvents(e ...*Event) *VendorUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vuo.AddEventIDs(ids...)
}

// Mutation returns the VendorMutation object of the builder.
func (vuo *VendorUpdateOne) Mutation() *VendorMutation {
	return vuo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (vuo *VendorUpdateOne) ClearOwner() *VendorUpdateOne {
	vuo.mutation.ClearOwner()
	return vuo
}

// ClearProfile clears the "profile" edge to the VendorProfile entity.
func (vuo *VendorUpdateOne) ClearProfile() *VendorUpdateOne {
	vuo.mutation.ClearProfile()
	return vuo
}

// ClearEvents clears all "events" edges to the Event entity.
func (vuo *VendorUpdateOne) ClearEvents() *VendorUpdateOne {
	vuo.mutation.ClearEvents()
	return vuo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (vuo *VendorUpdateOne) RemoveEventIDs(ids ...string) *VendorUpdateOne {
	vuo.mutation.RemoveEventIDs(ids...)
	return vuo
}

// RemoveEvents removes "events" edges to Event entities.
func (vuo *VendorUpdateOne) RemoveEvents(e ...*Event) *VendorUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vuo.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the VendorUpdate builder.
func (vuo *VendorUpdateOne) Where(ps ...predicate.Vendor) *VendorUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VendorUpdateOne) Select(field string, fields ...string) *VendorUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vendor entity.
func (vuo *VendorUpdateOne) Save(ctx context.Context) (*Vendor, error) {
	if err := vuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VendorUpdateOne) SaveX(ctx context.Context) *Vendor {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VendorUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VendorUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VendorUpdateOne) defaults() error {
	if _, ok := vuo.mutation.UpdatedAt(); !ok && !vuo.mutation.UpdatedAtCleared() {
		if vendor.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized vendor.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := vendor.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VendorUpdateOne) check() error {
	if v, ok := vuo.mutation.OwnerID(); ok {
		if err := vendor.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Vendor.owner_id": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.DisplayName(); ok {
		if err := vendor.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "Vendor.display_name": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.VendorType(); ok {
		if err := vendor.VendorTypeValidator(v); err != nil {
			return &ValidationError{Name: "vendor_type", err: fmt.Errorf(`generated: validator failed for field "Vendor.vendor_type": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.OnboardingState(); ok {
		if err := vendor.OnboardingStateValidator(v); err != nil {
			return &ValidationError{Name: "onboarding_state", err: fmt.Errorf(`generated: validator failed for field "Vendor.onboarding_state": %w`, err)}
		}
	}
	if vuo.mutation.ProfileCleared() && len(vuo.mutation.ProfileIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Vendor.profile"`)
	}
	return nil
}

func (vuo *VendorUpdateOne) sqlSave(ctx context.Context) (_node *Vendor, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendor.Table, vendor.Columns, sqlgraph.NewFieldSpec(vendor.FieldID, field.TypeString))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Vendor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vendor.FieldID)
		for _, f := range fields {
			if !vendor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != vendor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vuo.mutation.CreatedAtCleared() {
		_spec.ClearField(vendor.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(vendor.FieldUpdatedAt, field.TypeTime, value)
	}
	if vuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(vendor.FieldUpdatedAt, field.TypeTime)
	}
	if vuo.mutation.CreatedByCleared() {
		_spec.ClearField(vendor.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vuo.mutation.UpdatedBy(); ok {
		_spec.SetField(vendor.FieldUpdatedBy, field.TypeString, value)
	}
	if vuo.mutation.UpdatedByCleared() {
		_spec.ClearField(vendor.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vuo.mutation.DeletedAt(); ok {
		_spec.SetField(vendor.FieldDeletedAt, field.TypeTime, value)
	}
	if vuo.mutation.DeletedAtCleared() {
		_spec.ClearField(vendor.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vuo.mutation.DeletedBy(); ok {
		_spec.SetField(vendor.FieldDeletedBy, field.TypeString, value)
	}
	if vuo.mutation.DeletedByCleared() {
		_spec.ClearField(vendor.FieldDeletedBy, field.TypeString)
	}
	if value, ok := vuo.mutation.Tags(); ok {
		_spec.SetField(vendor.FieldTags, field.TypeJSON, value)
	}
	if value, ok := vuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vendor.FieldTags, value)
		})
	}
	if vuo.mutation.TagsCleared() {
		_spec.ClearField(vendor.FieldTags, field.TypeJSON)
	}
	if value, ok := vuo.mutation.DisplayName(); ok {
		_spec.SetField(vendor.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := vuo.mutation.VendorType(); ok {
		_spec.SetField(vendor.FieldVendorType, field.TypeEnum, value)
	}
	if value, ok := vuo.mutation.OnboardingState(); ok {
		_spec.SetField(vendor.FieldOnboardingState, field.TypeEnum, value)
	}
	if vuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendor.OwnerTable,
			Columns: []string{vendor.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = vuo.schemaConfig.Vendor
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendor.OwnerTable,
			Columns: []string{vendor.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = vuo.schemaConfig.Vendor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   vendor.ProfileTable,
			Columns: []string{vendor.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = vuo.schemaConfig.VendorProfile
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   vendor.ProfileTable,
			Columns: []string{vendor.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = vuo.schemaConfig.VendorProfile
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.EventsTable,
			Columns: []string{vendor.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = vuo.schemaConfig.Event
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !vuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.EventsTable,
			Columns: []string{vendor.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = vuo.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.EventsTable,
			Columns: []string{vendor.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = vuo.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = vuo.schemaConfig.Vendor
	ctx = internal.NewSchemaConfigContext(ctx, vuo.schemaConfig)
	_node = &Vendor{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
