// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilepaymentpreferencehistory"
	"github.com/datum-cloud/datum-os/pkg/enums"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// VendorProfilePaymentPreferenceHistoryUpdate is the builder for updating VendorProfilePaymentPreferenceHistory entities.
type VendorProfilePaymentPreferenceHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *VendorProfilePaymentPreferenceHistoryMutation
}

// Where appends a list predicates to the VendorProfilePaymentPreferenceHistoryUpdate builder.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) Where(ps ...predicate.VendorProfilePaymentPreferenceHistory) *VendorProfilePaymentPreferenceHistoryUpdate {
	vppphu.mutation.Where(ps...)
	return vppphu
}

// SetUpdatedAt sets the "updated_at" field.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) SetUpdatedAt(t time.Time) *VendorProfilePaymentPreferenceHistoryUpdate {
	vppphu.mutation.SetUpdatedAt(t)
	return vppphu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) ClearUpdatedAt() *VendorProfilePaymentPreferenceHistoryUpdate {
	vppphu.mutation.ClearUpdatedAt()
	return vppphu
}

// SetUpdatedBy sets the "updated_by" field.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) SetUpdatedBy(s string) *VendorProfilePaymentPreferenceHistoryUpdate {
	vppphu.mutation.SetUpdatedBy(s)
	return vppphu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) SetNillableUpdatedBy(s *string) *VendorProfilePaymentPreferenceHistoryUpdate {
	if s != nil {
		vppphu.SetUpdatedBy(*s)
	}
	return vppphu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) ClearUpdatedBy() *VendorProfilePaymentPreferenceHistoryUpdate {
	vppphu.mutation.ClearUpdatedBy()
	return vppphu
}

// SetDeletedAt sets the "deleted_at" field.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) SetDeletedAt(t time.Time) *VendorProfilePaymentPreferenceHistoryUpdate {
	vppphu.mutation.SetDeletedAt(t)
	return vppphu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) SetNillableDeletedAt(t *time.Time) *VendorProfilePaymentPreferenceHistoryUpdate {
	if t != nil {
		vppphu.SetDeletedAt(*t)
	}
	return vppphu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) ClearDeletedAt() *VendorProfilePaymentPreferenceHistoryUpdate {
	vppphu.mutation.ClearDeletedAt()
	return vppphu
}

// SetDeletedBy sets the "deleted_by" field.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) SetDeletedBy(s string) *VendorProfilePaymentPreferenceHistoryUpdate {
	vppphu.mutation.SetDeletedBy(s)
	return vppphu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) SetNillableDeletedBy(s *string) *VendorProfilePaymentPreferenceHistoryUpdate {
	if s != nil {
		vppphu.SetDeletedBy(*s)
	}
	return vppphu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) ClearDeletedBy() *VendorProfilePaymentPreferenceHistoryUpdate {
	vppphu.mutation.ClearDeletedBy()
	return vppphu
}

// SetTags sets the "tags" field.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) SetTags(s []string) *VendorProfilePaymentPreferenceHistoryUpdate {
	vppphu.mutation.SetTags(s)
	return vppphu
}

// AppendTags appends s to the "tags" field.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) AppendTags(s []string) *VendorProfilePaymentPreferenceHistoryUpdate {
	vppphu.mutation.AppendTags(s)
	return vppphu
}

// ClearTags clears the value of the "tags" field.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) ClearTags() *VendorProfilePaymentPreferenceHistoryUpdate {
	vppphu.mutation.ClearTags()
	return vppphu
}

// SetOwnerID sets the "owner_id" field.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) SetOwnerID(s string) *VendorProfilePaymentPreferenceHistoryUpdate {
	vppphu.mutation.SetOwnerID(s)
	return vppphu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) SetNillableOwnerID(s *string) *VendorProfilePaymentPreferenceHistoryUpdate {
	if s != nil {
		vppphu.SetOwnerID(*s)
	}
	return vppphu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) ClearOwnerID() *VendorProfilePaymentPreferenceHistoryUpdate {
	vppphu.mutation.ClearOwnerID()
	return vppphu
}

// SetVendorProfileID sets the "vendor_profile_id" field.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) SetVendorProfileID(s string) *VendorProfilePaymentPreferenceHistoryUpdate {
	vppphu.mutation.SetVendorProfileID(s)
	return vppphu
}

// SetNillableVendorProfileID sets the "vendor_profile_id" field if the given value is not nil.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) SetNillableVendorProfileID(s *string) *VendorProfilePaymentPreferenceHistoryUpdate {
	if s != nil {
		vppphu.SetVendorProfileID(*s)
	}
	return vppphu
}

// ClearVendorProfileID clears the value of the "vendor_profile_id" field.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) ClearVendorProfileID() *VendorProfilePaymentPreferenceHistoryUpdate {
	vppphu.mutation.ClearVendorProfileID()
	return vppphu
}

// SetPreferred sets the "preferred" field.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) SetPreferred(b bool) *VendorProfilePaymentPreferenceHistoryUpdate {
	vppphu.mutation.SetPreferred(b)
	return vppphu
}

// SetNillablePreferred sets the "preferred" field if the given value is not nil.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) SetNillablePreferred(b *bool) *VendorProfilePaymentPreferenceHistoryUpdate {
	if b != nil {
		vppphu.SetPreferred(*b)
	}
	return vppphu
}

// SetMethod sets the "method" field.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) SetMethod(em enums.PaymentMethod) *VendorProfilePaymentPreferenceHistoryUpdate {
	vppphu.mutation.SetMethod(em)
	return vppphu
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) SetNillableMethod(em *enums.PaymentMethod) *VendorProfilePaymentPreferenceHistoryUpdate {
	if em != nil {
		vppphu.SetMethod(*em)
	}
	return vppphu
}

// Mutation returns the VendorProfilePaymentPreferenceHistoryMutation object of the builder.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) Mutation() *VendorProfilePaymentPreferenceHistoryMutation {
	return vppphu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) Save(ctx context.Context) (int, error) {
	vppphu.defaults()
	return withHooks(ctx, vppphu.sqlSave, vppphu.mutation, vppphu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := vppphu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) Exec(ctx context.Context) error {
	_, err := vppphu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) ExecX(ctx context.Context) {
	if err := vppphu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) defaults() {
	if _, ok := vppphu.mutation.UpdatedAt(); !ok && !vppphu.mutation.UpdatedAtCleared() {
		v := vendorprofilepaymentpreferencehistory.UpdateDefaultUpdatedAt()
		vppphu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) check() error {
	if v, ok := vppphu.mutation.Method(); ok {
		if err := vendorprofilepaymentpreferencehistory.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`generated: validator failed for field "VendorProfilePaymentPreferenceHistory.method": %w`, err)}
		}
	}
	return nil
}

func (vppphu *VendorProfilePaymentPreferenceHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vppphu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendorprofilepaymentpreferencehistory.Table, vendorprofilepaymentpreferencehistory.Columns, sqlgraph.NewFieldSpec(vendorprofilepaymentpreferencehistory.FieldID, field.TypeString))
	if ps := vppphu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vppphu.mutation.RefCleared() {
		_spec.ClearField(vendorprofilepaymentpreferencehistory.FieldRef, field.TypeString)
	}
	if vppphu.mutation.CreatedAtCleared() {
		_spec.ClearField(vendorprofilepaymentpreferencehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vppphu.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if vppphu.mutation.UpdatedAtCleared() {
		_spec.ClearField(vendorprofilepaymentpreferencehistory.FieldUpdatedAt, field.TypeTime)
	}
	if vppphu.mutation.CreatedByCleared() {
		_spec.ClearField(vendorprofilepaymentpreferencehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vppphu.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if vppphu.mutation.UpdatedByCleared() {
		_spec.ClearField(vendorprofilepaymentpreferencehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vppphu.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if vppphu.mutation.DeletedAtCleared() {
		_spec.ClearField(vendorprofilepaymentpreferencehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vppphu.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldDeletedBy, field.TypeString, value)
	}
	if vppphu.mutation.DeletedByCleared() {
		_spec.ClearField(vendorprofilepaymentpreferencehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := vppphu.mutation.Tags(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := vppphu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vendorprofilepaymentpreferencehistory.FieldTags, value)
		})
	}
	if vppphu.mutation.TagsCleared() {
		_spec.ClearField(vendorprofilepaymentpreferencehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := vppphu.mutation.OwnerID(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldOwnerID, field.TypeString, value)
	}
	if vppphu.mutation.OwnerIDCleared() {
		_spec.ClearField(vendorprofilepaymentpreferencehistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := vppphu.mutation.VendorProfileID(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldVendorProfileID, field.TypeString, value)
	}
	if vppphu.mutation.VendorProfileIDCleared() {
		_spec.ClearField(vendorprofilepaymentpreferencehistory.FieldVendorProfileID, field.TypeString)
	}
	if value, ok := vppphu.mutation.Preferred(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldPreferred, field.TypeBool, value)
	}
	if value, ok := vppphu.mutation.Method(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldMethod, field.TypeEnum, value)
	}
	_spec.Node.Schema = vppphu.schemaConfig.VendorProfilePaymentPreferenceHistory
	ctx = internal.NewSchemaConfigContext(ctx, vppphu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, vppphu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorprofilepaymentpreferencehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vppphu.mutation.done = true
	return n, nil
}

// VendorProfilePaymentPreferenceHistoryUpdateOne is the builder for updating a single VendorProfilePaymentPreferenceHistory entity.
type VendorProfilePaymentPreferenceHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VendorProfilePaymentPreferenceHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) SetUpdatedAt(t time.Time) *VendorProfilePaymentPreferenceHistoryUpdateOne {
	vppphuo.mutation.SetUpdatedAt(t)
	return vppphuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) ClearUpdatedAt() *VendorProfilePaymentPreferenceHistoryUpdateOne {
	vppphuo.mutation.ClearUpdatedAt()
	return vppphuo
}

// SetUpdatedBy sets the "updated_by" field.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) SetUpdatedBy(s string) *VendorProfilePaymentPreferenceHistoryUpdateOne {
	vppphuo.mutation.SetUpdatedBy(s)
	return vppphuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) SetNillableUpdatedBy(s *string) *VendorProfilePaymentPreferenceHistoryUpdateOne {
	if s != nil {
		vppphuo.SetUpdatedBy(*s)
	}
	return vppphuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) ClearUpdatedBy() *VendorProfilePaymentPreferenceHistoryUpdateOne {
	vppphuo.mutation.ClearUpdatedBy()
	return vppphuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) SetDeletedAt(t time.Time) *VendorProfilePaymentPreferenceHistoryUpdateOne {
	vppphuo.mutation.SetDeletedAt(t)
	return vppphuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *VendorProfilePaymentPreferenceHistoryUpdateOne {
	if t != nil {
		vppphuo.SetDeletedAt(*t)
	}
	return vppphuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) ClearDeletedAt() *VendorProfilePaymentPreferenceHistoryUpdateOne {
	vppphuo.mutation.ClearDeletedAt()
	return vppphuo
}

// SetDeletedBy sets the "deleted_by" field.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) SetDeletedBy(s string) *VendorProfilePaymentPreferenceHistoryUpdateOne {
	vppphuo.mutation.SetDeletedBy(s)
	return vppphuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) SetNillableDeletedBy(s *string) *VendorProfilePaymentPreferenceHistoryUpdateOne {
	if s != nil {
		vppphuo.SetDeletedBy(*s)
	}
	return vppphuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) ClearDeletedBy() *VendorProfilePaymentPreferenceHistoryUpdateOne {
	vppphuo.mutation.ClearDeletedBy()
	return vppphuo
}

// SetTags sets the "tags" field.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) SetTags(s []string) *VendorProfilePaymentPreferenceHistoryUpdateOne {
	vppphuo.mutation.SetTags(s)
	return vppphuo
}

// AppendTags appends s to the "tags" field.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) AppendTags(s []string) *VendorProfilePaymentPreferenceHistoryUpdateOne {
	vppphuo.mutation.AppendTags(s)
	return vppphuo
}

// ClearTags clears the value of the "tags" field.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) ClearTags() *VendorProfilePaymentPreferenceHistoryUpdateOne {
	vppphuo.mutation.ClearTags()
	return vppphuo
}

// SetOwnerID sets the "owner_id" field.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) SetOwnerID(s string) *VendorProfilePaymentPreferenceHistoryUpdateOne {
	vppphuo.mutation.SetOwnerID(s)
	return vppphuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) SetNillableOwnerID(s *string) *VendorProfilePaymentPreferenceHistoryUpdateOne {
	if s != nil {
		vppphuo.SetOwnerID(*s)
	}
	return vppphuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) ClearOwnerID() *VendorProfilePaymentPreferenceHistoryUpdateOne {
	vppphuo.mutation.ClearOwnerID()
	return vppphuo
}

// SetVendorProfileID sets the "vendor_profile_id" field.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) SetVendorProfileID(s string) *VendorProfilePaymentPreferenceHistoryUpdateOne {
	vppphuo.mutation.SetVendorProfileID(s)
	return vppphuo
}

// SetNillableVendorProfileID sets the "vendor_profile_id" field if the given value is not nil.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) SetNillableVendorProfileID(s *string) *VendorProfilePaymentPreferenceHistoryUpdateOne {
	if s != nil {
		vppphuo.SetVendorProfileID(*s)
	}
	return vppphuo
}

// ClearVendorProfileID clears the value of the "vendor_profile_id" field.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) ClearVendorProfileID() *VendorProfilePaymentPreferenceHistoryUpdateOne {
	vppphuo.mutation.ClearVendorProfileID()
	return vppphuo
}

// SetPreferred sets the "preferred" field.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) SetPreferred(b bool) *VendorProfilePaymentPreferenceHistoryUpdateOne {
	vppphuo.mutation.SetPreferred(b)
	return vppphuo
}

// SetNillablePreferred sets the "preferred" field if the given value is not nil.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) SetNillablePreferred(b *bool) *VendorProfilePaymentPreferenceHistoryUpdateOne {
	if b != nil {
		vppphuo.SetPreferred(*b)
	}
	return vppphuo
}

// SetMethod sets the "method" field.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) SetMethod(em enums.PaymentMethod) *VendorProfilePaymentPreferenceHistoryUpdateOne {
	vppphuo.mutation.SetMethod(em)
	return vppphuo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) SetNillableMethod(em *enums.PaymentMethod) *VendorProfilePaymentPreferenceHistoryUpdateOne {
	if em != nil {
		vppphuo.SetMethod(*em)
	}
	return vppphuo
}

// Mutation returns the VendorProfilePaymentPreferenceHistoryMutation object of the builder.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) Mutation() *VendorProfilePaymentPreferenceHistoryMutation {
	return vppphuo.mutation
}

// Where appends a list predicates to the VendorProfilePaymentPreferenceHistoryUpdate builder.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) Where(ps ...predicate.VendorProfilePaymentPreferenceHistory) *VendorProfilePaymentPreferenceHistoryUpdateOne {
	vppphuo.mutation.Where(ps...)
	return vppphuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) Select(field string, fields ...string) *VendorProfilePaymentPreferenceHistoryUpdateOne {
	vppphuo.fields = append([]string{field}, fields...)
	return vppphuo
}

// Save executes the query and returns the updated VendorProfilePaymentPreferenceHistory entity.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) Save(ctx context.Context) (*VendorProfilePaymentPreferenceHistory, error) {
	vppphuo.defaults()
	return withHooks(ctx, vppphuo.sqlSave, vppphuo.mutation, vppphuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) SaveX(ctx context.Context) *VendorProfilePaymentPreferenceHistory {
	node, err := vppphuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := vppphuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := vppphuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) defaults() {
	if _, ok := vppphuo.mutation.UpdatedAt(); !ok && !vppphuo.mutation.UpdatedAtCleared() {
		v := vendorprofilepaymentpreferencehistory.UpdateDefaultUpdatedAt()
		vppphuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) check() error {
	if v, ok := vppphuo.mutation.Method(); ok {
		if err := vendorprofilepaymentpreferencehistory.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`generated: validator failed for field "VendorProfilePaymentPreferenceHistory.method": %w`, err)}
		}
	}
	return nil
}

func (vppphuo *VendorProfilePaymentPreferenceHistoryUpdateOne) sqlSave(ctx context.Context) (_node *VendorProfilePaymentPreferenceHistory, err error) {
	if err := vppphuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendorprofilepaymentpreferencehistory.Table, vendorprofilepaymentpreferencehistory.Columns, sqlgraph.NewFieldSpec(vendorprofilepaymentpreferencehistory.FieldID, field.TypeString))
	id, ok := vppphuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "VendorProfilePaymentPreferenceHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vppphuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vendorprofilepaymentpreferencehistory.FieldID)
		for _, f := range fields {
			if !vendorprofilepaymentpreferencehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != vendorprofilepaymentpreferencehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vppphuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vppphuo.mutation.RefCleared() {
		_spec.ClearField(vendorprofilepaymentpreferencehistory.FieldRef, field.TypeString)
	}
	if vppphuo.mutation.CreatedAtCleared() {
		_spec.ClearField(vendorprofilepaymentpreferencehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vppphuo.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if vppphuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(vendorprofilepaymentpreferencehistory.FieldUpdatedAt, field.TypeTime)
	}
	if vppphuo.mutation.CreatedByCleared() {
		_spec.ClearField(vendorprofilepaymentpreferencehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vppphuo.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if vppphuo.mutation.UpdatedByCleared() {
		_spec.ClearField(vendorprofilepaymentpreferencehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vppphuo.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if vppphuo.mutation.DeletedAtCleared() {
		_spec.ClearField(vendorprofilepaymentpreferencehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vppphuo.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldDeletedBy, field.TypeString, value)
	}
	if vppphuo.mutation.DeletedByCleared() {
		_spec.ClearField(vendorprofilepaymentpreferencehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := vppphuo.mutation.Tags(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := vppphuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vendorprofilepaymentpreferencehistory.FieldTags, value)
		})
	}
	if vppphuo.mutation.TagsCleared() {
		_spec.ClearField(vendorprofilepaymentpreferencehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := vppphuo.mutation.OwnerID(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldOwnerID, field.TypeString, value)
	}
	if vppphuo.mutation.OwnerIDCleared() {
		_spec.ClearField(vendorprofilepaymentpreferencehistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := vppphuo.mutation.VendorProfileID(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldVendorProfileID, field.TypeString, value)
	}
	if vppphuo.mutation.VendorProfileIDCleared() {
		_spec.ClearField(vendorprofilepaymentpreferencehistory.FieldVendorProfileID, field.TypeString)
	}
	if value, ok := vppphuo.mutation.Preferred(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldPreferred, field.TypeBool, value)
	}
	if value, ok := vppphuo.mutation.Method(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldMethod, field.TypeEnum, value)
	}
	_spec.Node.Schema = vppphuo.schemaConfig.VendorProfilePaymentPreferenceHistory
	ctx = internal.NewSchemaConfigContext(ctx, vppphuo.schemaConfig)
	_node = &VendorProfilePaymentPreferenceHistory{config: vppphuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vppphuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorprofilepaymentpreferencehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vppphuo.mutation.done = true
	return _node, nil
}
