// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/organization"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofile"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilepaymentpreference"
	"github.com/datum-cloud/datum-os/pkg/enums"
)

// VendorProfilePaymentPreferenceCreate is the builder for creating a VendorProfilePaymentPreference entity.
type VendorProfilePaymentPreferenceCreate struct {
	config
	mutation *VendorProfilePaymentPreferenceMutation
	hooks    []Hook
}

// SetMappingID sets the "mapping_id" field.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetMappingID(s string) *VendorProfilePaymentPreferenceCreate {
	vpppc.mutation.SetMappingID(s)
	return vpppc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetNillableMappingID(s *string) *VendorProfilePaymentPreferenceCreate {
	if s != nil {
		vpppc.SetMappingID(*s)
	}
	return vpppc
}

// SetCreatedAt sets the "created_at" field.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetCreatedAt(t time.Time) *VendorProfilePaymentPreferenceCreate {
	vpppc.mutation.SetCreatedAt(t)
	return vpppc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetNillableCreatedAt(t *time.Time) *VendorProfilePaymentPreferenceCreate {
	if t != nil {
		vpppc.SetCreatedAt(*t)
	}
	return vpppc
}

// SetUpdatedAt sets the "updated_at" field.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetUpdatedAt(t time.Time) *VendorProfilePaymentPreferenceCreate {
	vpppc.mutation.SetUpdatedAt(t)
	return vpppc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetNillableUpdatedAt(t *time.Time) *VendorProfilePaymentPreferenceCreate {
	if t != nil {
		vpppc.SetUpdatedAt(*t)
	}
	return vpppc
}

// SetCreatedBy sets the "created_by" field.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetCreatedBy(s string) *VendorProfilePaymentPreferenceCreate {
	vpppc.mutation.SetCreatedBy(s)
	return vpppc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetNillableCreatedBy(s *string) *VendorProfilePaymentPreferenceCreate {
	if s != nil {
		vpppc.SetCreatedBy(*s)
	}
	return vpppc
}

// SetUpdatedBy sets the "updated_by" field.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetUpdatedBy(s string) *VendorProfilePaymentPreferenceCreate {
	vpppc.mutation.SetUpdatedBy(s)
	return vpppc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetNillableUpdatedBy(s *string) *VendorProfilePaymentPreferenceCreate {
	if s != nil {
		vpppc.SetUpdatedBy(*s)
	}
	return vpppc
}

// SetDeletedAt sets the "deleted_at" field.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetDeletedAt(t time.Time) *VendorProfilePaymentPreferenceCreate {
	vpppc.mutation.SetDeletedAt(t)
	return vpppc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetNillableDeletedAt(t *time.Time) *VendorProfilePaymentPreferenceCreate {
	if t != nil {
		vpppc.SetDeletedAt(*t)
	}
	return vpppc
}

// SetDeletedBy sets the "deleted_by" field.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetDeletedBy(s string) *VendorProfilePaymentPreferenceCreate {
	vpppc.mutation.SetDeletedBy(s)
	return vpppc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetNillableDeletedBy(s *string) *VendorProfilePaymentPreferenceCreate {
	if s != nil {
		vpppc.SetDeletedBy(*s)
	}
	return vpppc
}

// SetTags sets the "tags" field.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetTags(s []string) *VendorProfilePaymentPreferenceCreate {
	vpppc.mutation.SetTags(s)
	return vpppc
}

// SetOwnerID sets the "owner_id" field.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetOwnerID(s string) *VendorProfilePaymentPreferenceCreate {
	vpppc.mutation.SetOwnerID(s)
	return vpppc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetNillableOwnerID(s *string) *VendorProfilePaymentPreferenceCreate {
	if s != nil {
		vpppc.SetOwnerID(*s)
	}
	return vpppc
}

// SetVendorProfileID sets the "vendor_profile_id" field.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetVendorProfileID(s string) *VendorProfilePaymentPreferenceCreate {
	vpppc.mutation.SetVendorProfileID(s)
	return vpppc
}

// SetNillableVendorProfileID sets the "vendor_profile_id" field if the given value is not nil.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetNillableVendorProfileID(s *string) *VendorProfilePaymentPreferenceCreate {
	if s != nil {
		vpppc.SetVendorProfileID(*s)
	}
	return vpppc
}

// SetPreferred sets the "preferred" field.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetPreferred(b bool) *VendorProfilePaymentPreferenceCreate {
	vpppc.mutation.SetPreferred(b)
	return vpppc
}

// SetNillablePreferred sets the "preferred" field if the given value is not nil.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetNillablePreferred(b *bool) *VendorProfilePaymentPreferenceCreate {
	if b != nil {
		vpppc.SetPreferred(*b)
	}
	return vpppc
}

// SetMethod sets the "method" field.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetMethod(em enums.PaymentMethod) *VendorProfilePaymentPreferenceCreate {
	vpppc.mutation.SetMethod(em)
	return vpppc
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetNillableMethod(em *enums.PaymentMethod) *VendorProfilePaymentPreferenceCreate {
	if em != nil {
		vpppc.SetMethod(*em)
	}
	return vpppc
}

// SetID sets the "id" field.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetID(s string) *VendorProfilePaymentPreferenceCreate {
	vpppc.mutation.SetID(s)
	return vpppc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetNillableID(s *string) *VendorProfilePaymentPreferenceCreate {
	if s != nil {
		vpppc.SetID(*s)
	}
	return vpppc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetOwner(o *Organization) *VendorProfilePaymentPreferenceCreate {
	return vpppc.SetOwnerID(o.ID)
}

// SetVendorProfile sets the "vendor_profile" edge to the VendorProfile entity.
func (vpppc *VendorProfilePaymentPreferenceCreate) SetVendorProfile(v *VendorProfile) *VendorProfilePaymentPreferenceCreate {
	return vpppc.SetVendorProfileID(v.ID)
}

// Mutation returns the VendorProfilePaymentPreferenceMutation object of the builder.
func (vpppc *VendorProfilePaymentPreferenceCreate) Mutation() *VendorProfilePaymentPreferenceMutation {
	return vpppc.mutation
}

// Save creates the VendorProfilePaymentPreference in the database.
func (vpppc *VendorProfilePaymentPreferenceCreate) Save(ctx context.Context) (*VendorProfilePaymentPreference, error) {
	if err := vpppc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, vpppc.sqlSave, vpppc.mutation, vpppc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vpppc *VendorProfilePaymentPreferenceCreate) SaveX(ctx context.Context) *VendorProfilePaymentPreference {
	v, err := vpppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vpppc *VendorProfilePaymentPreferenceCreate) Exec(ctx context.Context) error {
	_, err := vpppc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpppc *VendorProfilePaymentPreferenceCreate) ExecX(ctx context.Context) {
	if err := vpppc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vpppc *VendorProfilePaymentPreferenceCreate) defaults() error {
	if _, ok := vpppc.mutation.MappingID(); !ok {
		if vendorprofilepaymentpreference.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized vendorprofilepaymentpreference.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := vendorprofilepaymentpreference.DefaultMappingID()
		vpppc.mutation.SetMappingID(v)
	}
	if _, ok := vpppc.mutation.CreatedAt(); !ok {
		if vendorprofilepaymentpreference.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized vendorprofilepaymentpreference.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := vendorprofilepaymentpreference.DefaultCreatedAt()
		vpppc.mutation.SetCreatedAt(v)
	}
	if _, ok := vpppc.mutation.UpdatedAt(); !ok {
		if vendorprofilepaymentpreference.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized vendorprofilepaymentpreference.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := vendorprofilepaymentpreference.DefaultUpdatedAt()
		vpppc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vpppc.mutation.Tags(); !ok {
		v := vendorprofilepaymentpreference.DefaultTags
		vpppc.mutation.SetTags(v)
	}
	if _, ok := vpppc.mutation.Preferred(); !ok {
		v := vendorprofilepaymentpreference.DefaultPreferred
		vpppc.mutation.SetPreferred(v)
	}
	if _, ok := vpppc.mutation.Method(); !ok {
		v := vendorprofilepaymentpreference.DefaultMethod
		vpppc.mutation.SetMethod(v)
	}
	if _, ok := vpppc.mutation.ID(); !ok {
		if vendorprofilepaymentpreference.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized vendorprofilepaymentpreference.DefaultID (forgotten import generated/runtime?)")
		}
		v := vendorprofilepaymentpreference.DefaultID()
		vpppc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vpppc *VendorProfilePaymentPreferenceCreate) check() error {
	if _, ok := vpppc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "VendorProfilePaymentPreference.mapping_id"`)}
	}
	if v, ok := vpppc.mutation.OwnerID(); ok {
		if err := vendorprofilepaymentpreference.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "VendorProfilePaymentPreference.owner_id": %w`, err)}
		}
	}
	if _, ok := vpppc.mutation.Preferred(); !ok {
		return &ValidationError{Name: "preferred", err: errors.New(`generated: missing required field "VendorProfilePaymentPreference.preferred"`)}
	}
	if _, ok := vpppc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`generated: missing required field "VendorProfilePaymentPreference.method"`)}
	}
	if v, ok := vpppc.mutation.Method(); ok {
		if err := vendorprofilepaymentpreference.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`generated: validator failed for field "VendorProfilePaymentPreference.method": %w`, err)}
		}
	}
	return nil
}

func (vpppc *VendorProfilePaymentPreferenceCreate) sqlSave(ctx context.Context) (*VendorProfilePaymentPreference, error) {
	if err := vpppc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vpppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vpppc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected VendorProfilePaymentPreference.ID type: %T", _spec.ID.Value)
		}
	}
	vpppc.mutation.id = &_node.ID
	vpppc.mutation.done = true
	return _node, nil
}

func (vpppc *VendorProfilePaymentPreferenceCreate) createSpec() (*VendorProfilePaymentPreference, *sqlgraph.CreateSpec) {
	var (
		_node = &VendorProfilePaymentPreference{config: vpppc.config}
		_spec = sqlgraph.NewCreateSpec(vendorprofilepaymentpreference.Table, sqlgraph.NewFieldSpec(vendorprofilepaymentpreference.FieldID, field.TypeString))
	)
	_spec.Schema = vpppc.schemaConfig.VendorProfilePaymentPreference
	if id, ok := vpppc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vpppc.mutation.MappingID(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := vpppc.mutation.CreatedAt(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vpppc.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vpppc.mutation.CreatedBy(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := vpppc.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := vpppc.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := vpppc.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := vpppc.mutation.Tags(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := vpppc.mutation.Preferred(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldPreferred, field.TypeBool, value)
		_node.Preferred = value
	}
	if value, ok := vpppc.mutation.Method(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldMethod, field.TypeEnum, value)
		_node.Method = value
	}
	if nodes := vpppc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorprofilepaymentpreference.OwnerTable,
			Columns: []string{vendorprofilepaymentpreference.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpppc.schemaConfig.VendorProfilePaymentPreference
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vpppc.mutation.VendorProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorprofilepaymentpreference.VendorProfileTable,
			Columns: []string{vendorprofilepaymentpreference.VendorProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpppc.schemaConfig.VendorProfilePaymentPreference
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VendorProfileID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VendorProfilePaymentPreferenceCreateBulk is the builder for creating many VendorProfilePaymentPreference entities in bulk.
type VendorProfilePaymentPreferenceCreateBulk struct {
	config
	err      error
	builders []*VendorProfilePaymentPreferenceCreate
}

// Save creates the VendorProfilePaymentPreference entities in the database.
func (vpppcb *VendorProfilePaymentPreferenceCreateBulk) Save(ctx context.Context) ([]*VendorProfilePaymentPreference, error) {
	if vpppcb.err != nil {
		return nil, vpppcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vpppcb.builders))
	nodes := make([]*VendorProfilePaymentPreference, len(vpppcb.builders))
	mutators := make([]Mutator, len(vpppcb.builders))
	for i := range vpppcb.builders {
		func(i int, root context.Context) {
			builder := vpppcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VendorProfilePaymentPreferenceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vpppcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vpppcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vpppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vpppcb *VendorProfilePaymentPreferenceCreateBulk) SaveX(ctx context.Context) []*VendorProfilePaymentPreference {
	v, err := vpppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vpppcb *VendorProfilePaymentPreferenceCreateBulk) Exec(ctx context.Context) error {
	_, err := vpppcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpppcb *VendorProfilePaymentPreferenceCreateBulk) ExecX(ctx context.Context) {
	if err := vpppcb.Exec(ctx); err != nil {
		panic(err)
	}
}
