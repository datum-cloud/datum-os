// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contact"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contactlist"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contactlistmembership"
	"github.com/datum-cloud/datum-os/internal/ent/generated/event"
	"github.com/datum-cloud/datum-os/internal/ent/generated/integration"
	"github.com/datum-cloud/datum-os/internal/ent/generated/organization"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// ContactListQuery is the builder for querying ContactList entities.
type ContactListQuery struct {
	config
	ctx                         *QueryContext
	order                       []contactlist.OrderOption
	inters                      []Interceptor
	predicates                  []predicate.ContactList
	withOwner                   *OrganizationQuery
	withContacts                *ContactQuery
	withEvents                  *EventQuery
	withIntegrations            *IntegrationQuery
	withContactListMembers      *ContactListMembershipQuery
	modifiers                   []func(*sql.Selector)
	loadTotal                   []func(context.Context, []*ContactList) error
	withNamedContacts           map[string]*ContactQuery
	withNamedEvents             map[string]*EventQuery
	withNamedIntegrations       map[string]*IntegrationQuery
	withNamedContactListMembers map[string]*ContactListMembershipQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ContactListQuery builder.
func (clq *ContactListQuery) Where(ps ...predicate.ContactList) *ContactListQuery {
	clq.predicates = append(clq.predicates, ps...)
	return clq
}

// Limit the number of records to be returned by this query.
func (clq *ContactListQuery) Limit(limit int) *ContactListQuery {
	clq.ctx.Limit = &limit
	return clq
}

// Offset to start from.
func (clq *ContactListQuery) Offset(offset int) *ContactListQuery {
	clq.ctx.Offset = &offset
	return clq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (clq *ContactListQuery) Unique(unique bool) *ContactListQuery {
	clq.ctx.Unique = &unique
	return clq
}

// Order specifies how the records should be ordered.
func (clq *ContactListQuery) Order(o ...contactlist.OrderOption) *ContactListQuery {
	clq.order = append(clq.order, o...)
	return clq
}

// QueryOwner chains the current query on the "owner" edge.
func (clq *ContactListQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: clq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contactlist.Table, contactlist.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, contactlist.OwnerTable, contactlist.OwnerColumn),
		)
		schemaConfig := clq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.ContactList
		fromU = sqlgraph.SetNeighbors(clq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContacts chains the current query on the "contacts" edge.
func (clq *ContactListQuery) QueryContacts() *ContactQuery {
	query := (&ContactClient{config: clq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contactlist.Table, contactlist.FieldID, selector),
			sqlgraph.To(contact.Table, contact.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, contactlist.ContactsTable, contactlist.ContactsPrimaryKey...),
		)
		schemaConfig := clq.schemaConfig
		step.To.Schema = schemaConfig.Contact
		step.Edge.Schema = schemaConfig.ContactListMembership
		fromU = sqlgraph.SetNeighbors(clq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvents chains the current query on the "events" edge.
func (clq *ContactListQuery) QueryEvents() *EventQuery {
	query := (&EventClient{config: clq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contactlist.Table, contactlist.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, contactlist.EventsTable, contactlist.EventsColumn),
		)
		schemaConfig := clq.schemaConfig
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.Event
		fromU = sqlgraph.SetNeighbors(clq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIntegrations chains the current query on the "integrations" edge.
func (clq *ContactListQuery) QueryIntegrations() *IntegrationQuery {
	query := (&IntegrationClient{config: clq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contactlist.Table, contactlist.FieldID, selector),
			sqlgraph.To(integration.Table, integration.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, contactlist.IntegrationsTable, contactlist.IntegrationsColumn),
		)
		schemaConfig := clq.schemaConfig
		step.To.Schema = schemaConfig.Integration
		step.Edge.Schema = schemaConfig.Integration
		fromU = sqlgraph.SetNeighbors(clq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContactListMembers chains the current query on the "contact_list_members" edge.
func (clq *ContactListQuery) QueryContactListMembers() *ContactListMembershipQuery {
	query := (&ContactListMembershipClient{config: clq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(contactlist.Table, contactlist.FieldID, selector),
			sqlgraph.To(contactlistmembership.Table, contactlistmembership.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, contactlist.ContactListMembersTable, contactlist.ContactListMembersColumn),
		)
		schemaConfig := clq.schemaConfig
		step.To.Schema = schemaConfig.ContactListMembership
		step.Edge.Schema = schemaConfig.ContactListMembership
		fromU = sqlgraph.SetNeighbors(clq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ContactList entity from the query.
// Returns a *NotFoundError when no ContactList was found.
func (clq *ContactListQuery) First(ctx context.Context) (*ContactList, error) {
	nodes, err := clq.Limit(1).All(setContextOp(ctx, clq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{contactlist.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (clq *ContactListQuery) FirstX(ctx context.Context) *ContactList {
	node, err := clq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ContactList ID from the query.
// Returns a *NotFoundError when no ContactList ID was found.
func (clq *ContactListQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = clq.Limit(1).IDs(setContextOp(ctx, clq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{contactlist.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (clq *ContactListQuery) FirstIDX(ctx context.Context) string {
	id, err := clq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ContactList entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ContactList entity is found.
// Returns a *NotFoundError when no ContactList entities are found.
func (clq *ContactListQuery) Only(ctx context.Context) (*ContactList, error) {
	nodes, err := clq.Limit(2).All(setContextOp(ctx, clq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{contactlist.Label}
	default:
		return nil, &NotSingularError{contactlist.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (clq *ContactListQuery) OnlyX(ctx context.Context) *ContactList {
	node, err := clq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ContactList ID in the query.
// Returns a *NotSingularError when more than one ContactList ID is found.
// Returns a *NotFoundError when no entities are found.
func (clq *ContactListQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = clq.Limit(2).IDs(setContextOp(ctx, clq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{contactlist.Label}
	default:
		err = &NotSingularError{contactlist.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (clq *ContactListQuery) OnlyIDX(ctx context.Context) string {
	id, err := clq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ContactLists.
func (clq *ContactListQuery) All(ctx context.Context) ([]*ContactList, error) {
	ctx = setContextOp(ctx, clq.ctx, ent.OpQueryAll)
	if err := clq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ContactList, *ContactListQuery]()
	return withInterceptors[[]*ContactList](ctx, clq, qr, clq.inters)
}

// AllX is like All, but panics if an error occurs.
func (clq *ContactListQuery) AllX(ctx context.Context) []*ContactList {
	nodes, err := clq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ContactList IDs.
func (clq *ContactListQuery) IDs(ctx context.Context) (ids []string, err error) {
	if clq.ctx.Unique == nil && clq.path != nil {
		clq.Unique(true)
	}
	ctx = setContextOp(ctx, clq.ctx, ent.OpQueryIDs)
	if err = clq.Select(contactlist.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (clq *ContactListQuery) IDsX(ctx context.Context) []string {
	ids, err := clq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (clq *ContactListQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, clq.ctx, ent.OpQueryCount)
	if err := clq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, clq, querierCount[*ContactListQuery](), clq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (clq *ContactListQuery) CountX(ctx context.Context) int {
	count, err := clq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (clq *ContactListQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, clq.ctx, ent.OpQueryExist)
	switch _, err := clq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (clq *ContactListQuery) ExistX(ctx context.Context) bool {
	exist, err := clq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ContactListQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (clq *ContactListQuery) Clone() *ContactListQuery {
	if clq == nil {
		return nil
	}
	return &ContactListQuery{
		config:                 clq.config,
		ctx:                    clq.ctx.Clone(),
		order:                  append([]contactlist.OrderOption{}, clq.order...),
		inters:                 append([]Interceptor{}, clq.inters...),
		predicates:             append([]predicate.ContactList{}, clq.predicates...),
		withOwner:              clq.withOwner.Clone(),
		withContacts:           clq.withContacts.Clone(),
		withEvents:             clq.withEvents.Clone(),
		withIntegrations:       clq.withIntegrations.Clone(),
		withContactListMembers: clq.withContactListMembers.Clone(),
		// clone intermediate query.
		sql:  clq.sql.Clone(),
		path: clq.path,
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (clq *ContactListQuery) WithOwner(opts ...func(*OrganizationQuery)) *ContactListQuery {
	query := (&OrganizationClient{config: clq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clq.withOwner = query
	return clq
}

// WithContacts tells the query-builder to eager-load the nodes that are connected to
// the "contacts" edge. The optional arguments are used to configure the query builder of the edge.
func (clq *ContactListQuery) WithContacts(opts ...func(*ContactQuery)) *ContactListQuery {
	query := (&ContactClient{config: clq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clq.withContacts = query
	return clq
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (clq *ContactListQuery) WithEvents(opts ...func(*EventQuery)) *ContactListQuery {
	query := (&EventClient{config: clq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clq.withEvents = query
	return clq
}

// WithIntegrations tells the query-builder to eager-load the nodes that are connected to
// the "integrations" edge. The optional arguments are used to configure the query builder of the edge.
func (clq *ContactListQuery) WithIntegrations(opts ...func(*IntegrationQuery)) *ContactListQuery {
	query := (&IntegrationClient{config: clq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clq.withIntegrations = query
	return clq
}

// WithContactListMembers tells the query-builder to eager-load the nodes that are connected to
// the "contact_list_members" edge. The optional arguments are used to configure the query builder of the edge.
func (clq *ContactListQuery) WithContactListMembers(opts ...func(*ContactListMembershipQuery)) *ContactListQuery {
	query := (&ContactListMembershipClient{config: clq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clq.withContactListMembers = query
	return clq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ContactList.Query().
//		GroupBy(contactlist.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (clq *ContactListQuery) GroupBy(field string, fields ...string) *ContactListGroupBy {
	clq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ContactListGroupBy{build: clq}
	grbuild.flds = &clq.ctx.Fields
	grbuild.label = contactlist.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ContactList.Query().
//		Select(contactlist.FieldCreatedAt).
//		Scan(ctx, &v)
func (clq *ContactListQuery) Select(fields ...string) *ContactListSelect {
	clq.ctx.Fields = append(clq.ctx.Fields, fields...)
	sbuild := &ContactListSelect{ContactListQuery: clq}
	sbuild.label = contactlist.Label
	sbuild.flds, sbuild.scan = &clq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ContactListSelect configured with the given aggregations.
func (clq *ContactListQuery) Aggregate(fns ...AggregateFunc) *ContactListSelect {
	return clq.Select().Aggregate(fns...)
}

func (clq *ContactListQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range clq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, clq); err != nil {
				return err
			}
		}
	}
	for _, f := range clq.ctx.Fields {
		if !contactlist.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if clq.path != nil {
		prev, err := clq.path(ctx)
		if err != nil {
			return err
		}
		clq.sql = prev
	}
	return nil
}

func (clq *ContactListQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ContactList, error) {
	var (
		nodes       = []*ContactList{}
		_spec       = clq.querySpec()
		loadedTypes = [5]bool{
			clq.withOwner != nil,
			clq.withContacts != nil,
			clq.withEvents != nil,
			clq.withIntegrations != nil,
			clq.withContactListMembers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ContactList).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ContactList{config: clq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = clq.schemaConfig.ContactList
	ctx = internal.NewSchemaConfigContext(ctx, clq.schemaConfig)
	if len(clq.modifiers) > 0 {
		_spec.Modifiers = clq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, clq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := clq.withOwner; query != nil {
		if err := clq.loadOwner(ctx, query, nodes, nil,
			func(n *ContactList, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := clq.withContacts; query != nil {
		if err := clq.loadContacts(ctx, query, nodes,
			func(n *ContactList) { n.Edges.Contacts = []*Contact{} },
			func(n *ContactList, e *Contact) { n.Edges.Contacts = append(n.Edges.Contacts, e) }); err != nil {
			return nil, err
		}
	}
	if query := clq.withEvents; query != nil {
		if err := clq.loadEvents(ctx, query, nodes,
			func(n *ContactList) { n.Edges.Events = []*Event{} },
			func(n *ContactList, e *Event) { n.Edges.Events = append(n.Edges.Events, e) }); err != nil {
			return nil, err
		}
	}
	if query := clq.withIntegrations; query != nil {
		if err := clq.loadIntegrations(ctx, query, nodes,
			func(n *ContactList) { n.Edges.Integrations = []*Integration{} },
			func(n *ContactList, e *Integration) { n.Edges.Integrations = append(n.Edges.Integrations, e) }); err != nil {
			return nil, err
		}
	}
	if query := clq.withContactListMembers; query != nil {
		if err := clq.loadContactListMembers(ctx, query, nodes,
			func(n *ContactList) { n.Edges.ContactListMembers = []*ContactListMembership{} },
			func(n *ContactList, e *ContactListMembership) {
				n.Edges.ContactListMembers = append(n.Edges.ContactListMembers, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range clq.withNamedContacts {
		if err := clq.loadContacts(ctx, query, nodes,
			func(n *ContactList) { n.appendNamedContacts(name) },
			func(n *ContactList, e *Contact) { n.appendNamedContacts(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range clq.withNamedEvents {
		if err := clq.loadEvents(ctx, query, nodes,
			func(n *ContactList) { n.appendNamedEvents(name) },
			func(n *ContactList, e *Event) { n.appendNamedEvents(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range clq.withNamedIntegrations {
		if err := clq.loadIntegrations(ctx, query, nodes,
			func(n *ContactList) { n.appendNamedIntegrations(name) },
			func(n *ContactList, e *Integration) { n.appendNamedIntegrations(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range clq.withNamedContactListMembers {
		if err := clq.loadContactListMembers(ctx, query, nodes,
			func(n *ContactList) { n.appendNamedContactListMembers(name) },
			func(n *ContactList, e *ContactListMembership) { n.appendNamedContactListMembers(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range clq.loadTotal {
		if err := clq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (clq *ContactListQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*ContactList, init func(*ContactList), assign func(*ContactList, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*ContactList)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (clq *ContactListQuery) loadContacts(ctx context.Context, query *ContactQuery, nodes []*ContactList, init func(*ContactList), assign func(*ContactList, *Contact)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*ContactList)
	nids := make(map[string]map[*ContactList]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(contactlist.ContactsTable)
		joinT.Schema(clq.schemaConfig.ContactListMembership)
		s.Join(joinT).On(s.C(contact.FieldID), joinT.C(contactlist.ContactsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(contactlist.ContactsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(contactlist.ContactsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*ContactList]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Contact](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "contacts" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (clq *ContactListQuery) loadEvents(ctx context.Context, query *EventQuery, nodes []*ContactList, init func(*ContactList), assign func(*ContactList, *Event)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ContactList)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Event(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(contactlist.EventsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.contact_list_events
		if fk == nil {
			return fmt.Errorf(`foreign-key "contact_list_events" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "contact_list_events" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (clq *ContactListQuery) loadIntegrations(ctx context.Context, query *IntegrationQuery, nodes []*ContactList, init func(*ContactList), assign func(*ContactList, *Integration)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ContactList)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Integration(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(contactlist.IntegrationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.contact_list_integrations
		if fk == nil {
			return fmt.Errorf(`foreign-key "contact_list_integrations" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "contact_list_integrations" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (clq *ContactListQuery) loadContactListMembers(ctx context.Context, query *ContactListMembershipQuery, nodes []*ContactList, init func(*ContactList), assign func(*ContactList, *ContactListMembership)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ContactList)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(contactlistmembership.FieldContactListID)
	}
	query.Where(predicate.ContactListMembership(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(contactlist.ContactListMembersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ContactListID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "contact_list_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (clq *ContactListQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := clq.querySpec()
	_spec.Node.Schema = clq.schemaConfig.ContactList
	ctx = internal.NewSchemaConfigContext(ctx, clq.schemaConfig)
	if len(clq.modifiers) > 0 {
		_spec.Modifiers = clq.modifiers
	}
	_spec.Node.Columns = clq.ctx.Fields
	if len(clq.ctx.Fields) > 0 {
		_spec.Unique = clq.ctx.Unique != nil && *clq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, clq.driver, _spec)
}

func (clq *ContactListQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(contactlist.Table, contactlist.Columns, sqlgraph.NewFieldSpec(contactlist.FieldID, field.TypeString))
	_spec.From = clq.sql
	if unique := clq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if clq.path != nil {
		_spec.Unique = true
	}
	if fields := clq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contactlist.FieldID)
		for i := range fields {
			if fields[i] != contactlist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if clq.withOwner != nil {
			_spec.Node.AddColumnOnce(contactlist.FieldOwnerID)
		}
	}
	if ps := clq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := clq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := clq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := clq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (clq *ContactListQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(clq.driver.Dialect())
	t1 := builder.Table(contactlist.Table)
	columns := clq.ctx.Fields
	if len(columns) == 0 {
		columns = contactlist.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if clq.sql != nil {
		selector = clq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if clq.ctx.Unique != nil && *clq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(clq.schemaConfig.ContactList)
	ctx = internal.NewSchemaConfigContext(ctx, clq.schemaConfig)
	selector.WithContext(ctx)
	for _, p := range clq.predicates {
		p(selector)
	}
	for _, p := range clq.order {
		p(selector)
	}
	if offset := clq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := clq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedContacts tells the query-builder to eager-load the nodes that are connected to the "contacts"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (clq *ContactListQuery) WithNamedContacts(name string, opts ...func(*ContactQuery)) *ContactListQuery {
	query := (&ContactClient{config: clq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if clq.withNamedContacts == nil {
		clq.withNamedContacts = make(map[string]*ContactQuery)
	}
	clq.withNamedContacts[name] = query
	return clq
}

// WithNamedEvents tells the query-builder to eager-load the nodes that are connected to the "events"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (clq *ContactListQuery) WithNamedEvents(name string, opts ...func(*EventQuery)) *ContactListQuery {
	query := (&EventClient{config: clq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if clq.withNamedEvents == nil {
		clq.withNamedEvents = make(map[string]*EventQuery)
	}
	clq.withNamedEvents[name] = query
	return clq
}

// WithNamedIntegrations tells the query-builder to eager-load the nodes that are connected to the "integrations"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (clq *ContactListQuery) WithNamedIntegrations(name string, opts ...func(*IntegrationQuery)) *ContactListQuery {
	query := (&IntegrationClient{config: clq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if clq.withNamedIntegrations == nil {
		clq.withNamedIntegrations = make(map[string]*IntegrationQuery)
	}
	clq.withNamedIntegrations[name] = query
	return clq
}

// WithNamedContactListMembers tells the query-builder to eager-load the nodes that are connected to the "contact_list_members"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (clq *ContactListQuery) WithNamedContactListMembers(name string, opts ...func(*ContactListMembershipQuery)) *ContactListQuery {
	query := (&ContactListMembershipClient{config: clq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if clq.withNamedContactListMembers == nil {
		clq.withNamedContactListMembers = make(map[string]*ContactListMembershipQuery)
	}
	clq.withNamedContactListMembers[name] = query
	return clq
}

// ContactListGroupBy is the group-by builder for ContactList entities.
type ContactListGroupBy struct {
	selector
	build *ContactListQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (clgb *ContactListGroupBy) Aggregate(fns ...AggregateFunc) *ContactListGroupBy {
	clgb.fns = append(clgb.fns, fns...)
	return clgb
}

// Scan applies the selector query and scans the result into the given value.
func (clgb *ContactListGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, clgb.build.ctx, ent.OpQueryGroupBy)
	if err := clgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ContactListQuery, *ContactListGroupBy](ctx, clgb.build, clgb, clgb.build.inters, v)
}

func (clgb *ContactListGroupBy) sqlScan(ctx context.Context, root *ContactListQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(clgb.fns))
	for _, fn := range clgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*clgb.flds)+len(clgb.fns))
		for _, f := range *clgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*clgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := clgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ContactListSelect is the builder for selecting fields of ContactList entities.
type ContactListSelect struct {
	*ContactListQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cls *ContactListSelect) Aggregate(fns ...AggregateFunc) *ContactListSelect {
	cls.fns = append(cls.fns, fns...)
	return cls
}

// Scan applies the selector query and scans the result into the given value.
func (cls *ContactListSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cls.ctx, ent.OpQuerySelect)
	if err := cls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ContactListQuery, *ContactListSelect](ctx, cls.ContactListQuery, cls, cls.inters, v)
}

func (cls *ContactListSelect) sqlScan(ctx context.Context, root *ContactListQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cls.fns))
	for _, fn := range cls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
