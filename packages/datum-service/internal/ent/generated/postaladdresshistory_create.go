// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/postaladdresshistory"
	"github.com/datum-cloud/datum-os/pkg/enthistory"
)

// PostalAddressHistoryCreate is the builder for creating a PostalAddressHistory entity.
type PostalAddressHistoryCreate struct {
	config
	mutation *PostalAddressHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (pahc *PostalAddressHistoryCreate) SetHistoryTime(t time.Time) *PostalAddressHistoryCreate {
	pahc.mutation.SetHistoryTime(t)
	return pahc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (pahc *PostalAddressHistoryCreate) SetNillableHistoryTime(t *time.Time) *PostalAddressHistoryCreate {
	if t != nil {
		pahc.SetHistoryTime(*t)
	}
	return pahc
}

// SetRef sets the "ref" field.
func (pahc *PostalAddressHistoryCreate) SetRef(s string) *PostalAddressHistoryCreate {
	pahc.mutation.SetRef(s)
	return pahc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (pahc *PostalAddressHistoryCreate) SetNillableRef(s *string) *PostalAddressHistoryCreate {
	if s != nil {
		pahc.SetRef(*s)
	}
	return pahc
}

// SetOperation sets the "operation" field.
func (pahc *PostalAddressHistoryCreate) SetOperation(et enthistory.OpType) *PostalAddressHistoryCreate {
	pahc.mutation.SetOperation(et)
	return pahc
}

// SetCreatedAt sets the "created_at" field.
func (pahc *PostalAddressHistoryCreate) SetCreatedAt(t time.Time) *PostalAddressHistoryCreate {
	pahc.mutation.SetCreatedAt(t)
	return pahc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pahc *PostalAddressHistoryCreate) SetNillableCreatedAt(t *time.Time) *PostalAddressHistoryCreate {
	if t != nil {
		pahc.SetCreatedAt(*t)
	}
	return pahc
}

// SetUpdatedAt sets the "updated_at" field.
func (pahc *PostalAddressHistoryCreate) SetUpdatedAt(t time.Time) *PostalAddressHistoryCreate {
	pahc.mutation.SetUpdatedAt(t)
	return pahc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pahc *PostalAddressHistoryCreate) SetNillableUpdatedAt(t *time.Time) *PostalAddressHistoryCreate {
	if t != nil {
		pahc.SetUpdatedAt(*t)
	}
	return pahc
}

// SetCreatedBy sets the "created_by" field.
func (pahc *PostalAddressHistoryCreate) SetCreatedBy(s string) *PostalAddressHistoryCreate {
	pahc.mutation.SetCreatedBy(s)
	return pahc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pahc *PostalAddressHistoryCreate) SetNillableCreatedBy(s *string) *PostalAddressHistoryCreate {
	if s != nil {
		pahc.SetCreatedBy(*s)
	}
	return pahc
}

// SetUpdatedBy sets the "updated_by" field.
func (pahc *PostalAddressHistoryCreate) SetUpdatedBy(s string) *PostalAddressHistoryCreate {
	pahc.mutation.SetUpdatedBy(s)
	return pahc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pahc *PostalAddressHistoryCreate) SetNillableUpdatedBy(s *string) *PostalAddressHistoryCreate {
	if s != nil {
		pahc.SetUpdatedBy(*s)
	}
	return pahc
}

// SetDeletedAt sets the "deleted_at" field.
func (pahc *PostalAddressHistoryCreate) SetDeletedAt(t time.Time) *PostalAddressHistoryCreate {
	pahc.mutation.SetDeletedAt(t)
	return pahc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pahc *PostalAddressHistoryCreate) SetNillableDeletedAt(t *time.Time) *PostalAddressHistoryCreate {
	if t != nil {
		pahc.SetDeletedAt(*t)
	}
	return pahc
}

// SetDeletedBy sets the "deleted_by" field.
func (pahc *PostalAddressHistoryCreate) SetDeletedBy(s string) *PostalAddressHistoryCreate {
	pahc.mutation.SetDeletedBy(s)
	return pahc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pahc *PostalAddressHistoryCreate) SetNillableDeletedBy(s *string) *PostalAddressHistoryCreate {
	if s != nil {
		pahc.SetDeletedBy(*s)
	}
	return pahc
}

// SetMappingID sets the "mapping_id" field.
func (pahc *PostalAddressHistoryCreate) SetMappingID(s string) *PostalAddressHistoryCreate {
	pahc.mutation.SetMappingID(s)
	return pahc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (pahc *PostalAddressHistoryCreate) SetNillableMappingID(s *string) *PostalAddressHistoryCreate {
	if s != nil {
		pahc.SetMappingID(*s)
	}
	return pahc
}

// SetTags sets the "tags" field.
func (pahc *PostalAddressHistoryCreate) SetTags(s []string) *PostalAddressHistoryCreate {
	pahc.mutation.SetTags(s)
	return pahc
}

// SetOwnerID sets the "owner_id" field.
func (pahc *PostalAddressHistoryCreate) SetOwnerID(s string) *PostalAddressHistoryCreate {
	pahc.mutation.SetOwnerID(s)
	return pahc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pahc *PostalAddressHistoryCreate) SetNillableOwnerID(s *string) *PostalAddressHistoryCreate {
	if s != nil {
		pahc.SetOwnerID(*s)
	}
	return pahc
}

// SetRegionCode sets the "region_code" field.
func (pahc *PostalAddressHistoryCreate) SetRegionCode(s string) *PostalAddressHistoryCreate {
	pahc.mutation.SetRegionCode(s)
	return pahc
}

// SetLanguageCode sets the "language_code" field.
func (pahc *PostalAddressHistoryCreate) SetLanguageCode(s string) *PostalAddressHistoryCreate {
	pahc.mutation.SetLanguageCode(s)
	return pahc
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (pahc *PostalAddressHistoryCreate) SetNillableLanguageCode(s *string) *PostalAddressHistoryCreate {
	if s != nil {
		pahc.SetLanguageCode(*s)
	}
	return pahc
}

// SetPostalCode sets the "postal_code" field.
func (pahc *PostalAddressHistoryCreate) SetPostalCode(s string) *PostalAddressHistoryCreate {
	pahc.mutation.SetPostalCode(s)
	return pahc
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (pahc *PostalAddressHistoryCreate) SetNillablePostalCode(s *string) *PostalAddressHistoryCreate {
	if s != nil {
		pahc.SetPostalCode(*s)
	}
	return pahc
}

// SetSortingCode sets the "sorting_code" field.
func (pahc *PostalAddressHistoryCreate) SetSortingCode(s string) *PostalAddressHistoryCreate {
	pahc.mutation.SetSortingCode(s)
	return pahc
}

// SetNillableSortingCode sets the "sorting_code" field if the given value is not nil.
func (pahc *PostalAddressHistoryCreate) SetNillableSortingCode(s *string) *PostalAddressHistoryCreate {
	if s != nil {
		pahc.SetSortingCode(*s)
	}
	return pahc
}

// SetAdministrativeArea sets the "administrative_area" field.
func (pahc *PostalAddressHistoryCreate) SetAdministrativeArea(s string) *PostalAddressHistoryCreate {
	pahc.mutation.SetAdministrativeArea(s)
	return pahc
}

// SetNillableAdministrativeArea sets the "administrative_area" field if the given value is not nil.
func (pahc *PostalAddressHistoryCreate) SetNillableAdministrativeArea(s *string) *PostalAddressHistoryCreate {
	if s != nil {
		pahc.SetAdministrativeArea(*s)
	}
	return pahc
}

// SetLocality sets the "locality" field.
func (pahc *PostalAddressHistoryCreate) SetLocality(s string) *PostalAddressHistoryCreate {
	pahc.mutation.SetLocality(s)
	return pahc
}

// SetNillableLocality sets the "locality" field if the given value is not nil.
func (pahc *PostalAddressHistoryCreate) SetNillableLocality(s *string) *PostalAddressHistoryCreate {
	if s != nil {
		pahc.SetLocality(*s)
	}
	return pahc
}

// SetSublocality sets the "sublocality" field.
func (pahc *PostalAddressHistoryCreate) SetSublocality(s string) *PostalAddressHistoryCreate {
	pahc.mutation.SetSublocality(s)
	return pahc
}

// SetNillableSublocality sets the "sublocality" field if the given value is not nil.
func (pahc *PostalAddressHistoryCreate) SetNillableSublocality(s *string) *PostalAddressHistoryCreate {
	if s != nil {
		pahc.SetSublocality(*s)
	}
	return pahc
}

// SetAddressLines sets the "address_lines" field.
func (pahc *PostalAddressHistoryCreate) SetAddressLines(s []string) *PostalAddressHistoryCreate {
	pahc.mutation.SetAddressLines(s)
	return pahc
}

// SetRecipients sets the "recipients" field.
func (pahc *PostalAddressHistoryCreate) SetRecipients(s []string) *PostalAddressHistoryCreate {
	pahc.mutation.SetRecipients(s)
	return pahc
}

// SetOrganization sets the "organization" field.
func (pahc *PostalAddressHistoryCreate) SetOrganization(s string) *PostalAddressHistoryCreate {
	pahc.mutation.SetOrganization(s)
	return pahc
}

// SetNillableOrganization sets the "organization" field if the given value is not nil.
func (pahc *PostalAddressHistoryCreate) SetNillableOrganization(s *string) *PostalAddressHistoryCreate {
	if s != nil {
		pahc.SetOrganization(*s)
	}
	return pahc
}

// SetID sets the "id" field.
func (pahc *PostalAddressHistoryCreate) SetID(s string) *PostalAddressHistoryCreate {
	pahc.mutation.SetID(s)
	return pahc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pahc *PostalAddressHistoryCreate) SetNillableID(s *string) *PostalAddressHistoryCreate {
	if s != nil {
		pahc.SetID(*s)
	}
	return pahc
}

// Mutation returns the PostalAddressHistoryMutation object of the builder.
func (pahc *PostalAddressHistoryCreate) Mutation() *PostalAddressHistoryMutation {
	return pahc.mutation
}

// Save creates the PostalAddressHistory in the database.
func (pahc *PostalAddressHistoryCreate) Save(ctx context.Context) (*PostalAddressHistory, error) {
	pahc.defaults()
	return withHooks(ctx, pahc.sqlSave, pahc.mutation, pahc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pahc *PostalAddressHistoryCreate) SaveX(ctx context.Context) *PostalAddressHistory {
	v, err := pahc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pahc *PostalAddressHistoryCreate) Exec(ctx context.Context) error {
	_, err := pahc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pahc *PostalAddressHistoryCreate) ExecX(ctx context.Context) {
	if err := pahc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pahc *PostalAddressHistoryCreate) defaults() {
	if _, ok := pahc.mutation.HistoryTime(); !ok {
		v := postaladdresshistory.DefaultHistoryTime()
		pahc.mutation.SetHistoryTime(v)
	}
	if _, ok := pahc.mutation.CreatedAt(); !ok {
		v := postaladdresshistory.DefaultCreatedAt()
		pahc.mutation.SetCreatedAt(v)
	}
	if _, ok := pahc.mutation.UpdatedAt(); !ok {
		v := postaladdresshistory.DefaultUpdatedAt()
		pahc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pahc.mutation.MappingID(); !ok {
		v := postaladdresshistory.DefaultMappingID()
		pahc.mutation.SetMappingID(v)
	}
	if _, ok := pahc.mutation.Tags(); !ok {
		v := postaladdresshistory.DefaultTags
		pahc.mutation.SetTags(v)
	}
	if _, ok := pahc.mutation.ID(); !ok {
		v := postaladdresshistory.DefaultID()
		pahc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pahc *PostalAddressHistoryCreate) check() error {
	if _, ok := pahc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "PostalAddressHistory.history_time"`)}
	}
	if _, ok := pahc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "PostalAddressHistory.operation"`)}
	}
	if v, ok := pahc.mutation.Operation(); ok {
		if err := postaladdresshistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "PostalAddressHistory.operation": %w`, err)}
		}
	}
	if _, ok := pahc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "PostalAddressHistory.mapping_id"`)}
	}
	if _, ok := pahc.mutation.RegionCode(); !ok {
		return &ValidationError{Name: "region_code", err: errors.New(`generated: missing required field "PostalAddressHistory.region_code"`)}
	}
	if _, ok := pahc.mutation.AddressLines(); !ok {
		return &ValidationError{Name: "address_lines", err: errors.New(`generated: missing required field "PostalAddressHistory.address_lines"`)}
	}
	if _, ok := pahc.mutation.Recipients(); !ok {
		return &ValidationError{Name: "recipients", err: errors.New(`generated: missing required field "PostalAddressHistory.recipients"`)}
	}
	return nil
}

func (pahc *PostalAddressHistoryCreate) sqlSave(ctx context.Context) (*PostalAddressHistory, error) {
	if err := pahc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pahc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pahc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PostalAddressHistory.ID type: %T", _spec.ID.Value)
		}
	}
	pahc.mutation.id = &_node.ID
	pahc.mutation.done = true
	return _node, nil
}

func (pahc *PostalAddressHistoryCreate) createSpec() (*PostalAddressHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &PostalAddressHistory{config: pahc.config}
		_spec = sqlgraph.NewCreateSpec(postaladdresshistory.Table, sqlgraph.NewFieldSpec(postaladdresshistory.FieldID, field.TypeString))
	)
	_spec.Schema = pahc.schemaConfig.PostalAddressHistory
	if id, ok := pahc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pahc.mutation.HistoryTime(); ok {
		_spec.SetField(postaladdresshistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := pahc.mutation.Ref(); ok {
		_spec.SetField(postaladdresshistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := pahc.mutation.Operation(); ok {
		_spec.SetField(postaladdresshistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := pahc.mutation.CreatedAt(); ok {
		_spec.SetField(postaladdresshistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pahc.mutation.UpdatedAt(); ok {
		_spec.SetField(postaladdresshistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pahc.mutation.CreatedBy(); ok {
		_spec.SetField(postaladdresshistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := pahc.mutation.UpdatedBy(); ok {
		_spec.SetField(postaladdresshistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := pahc.mutation.DeletedAt(); ok {
		_spec.SetField(postaladdresshistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := pahc.mutation.DeletedBy(); ok {
		_spec.SetField(postaladdresshistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := pahc.mutation.MappingID(); ok {
		_spec.SetField(postaladdresshistory.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := pahc.mutation.Tags(); ok {
		_spec.SetField(postaladdresshistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := pahc.mutation.OwnerID(); ok {
		_spec.SetField(postaladdresshistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := pahc.mutation.RegionCode(); ok {
		_spec.SetField(postaladdresshistory.FieldRegionCode, field.TypeString, value)
		_node.RegionCode = value
	}
	if value, ok := pahc.mutation.LanguageCode(); ok {
		_spec.SetField(postaladdresshistory.FieldLanguageCode, field.TypeString, value)
		_node.LanguageCode = &value
	}
	if value, ok := pahc.mutation.PostalCode(); ok {
		_spec.SetField(postaladdresshistory.FieldPostalCode, field.TypeString, value)
		_node.PostalCode = &value
	}
	if value, ok := pahc.mutation.SortingCode(); ok {
		_spec.SetField(postaladdresshistory.FieldSortingCode, field.TypeString, value)
		_node.SortingCode = &value
	}
	if value, ok := pahc.mutation.AdministrativeArea(); ok {
		_spec.SetField(postaladdresshistory.FieldAdministrativeArea, field.TypeString, value)
		_node.AdministrativeArea = &value
	}
	if value, ok := pahc.mutation.Locality(); ok {
		_spec.SetField(postaladdresshistory.FieldLocality, field.TypeString, value)
		_node.Locality = &value
	}
	if value, ok := pahc.mutation.Sublocality(); ok {
		_spec.SetField(postaladdresshistory.FieldSublocality, field.TypeString, value)
		_node.Sublocality = &value
	}
	if value, ok := pahc.mutation.AddressLines(); ok {
		_spec.SetField(postaladdresshistory.FieldAddressLines, field.TypeJSON, value)
		_node.AddressLines = value
	}
	if value, ok := pahc.mutation.Recipients(); ok {
		_spec.SetField(postaladdresshistory.FieldRecipients, field.TypeJSON, value)
		_node.Recipients = value
	}
	if value, ok := pahc.mutation.Organization(); ok {
		_spec.SetField(postaladdresshistory.FieldOrganization, field.TypeString, value)
		_node.Organization = &value
	}
	return _node, _spec
}

// PostalAddressHistoryCreateBulk is the builder for creating many PostalAddressHistory entities in bulk.
type PostalAddressHistoryCreateBulk struct {
	config
	err      error
	builders []*PostalAddressHistoryCreate
}

// Save creates the PostalAddressHistory entities in the database.
func (pahcb *PostalAddressHistoryCreateBulk) Save(ctx context.Context) ([]*PostalAddressHistory, error) {
	if pahcb.err != nil {
		return nil, pahcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pahcb.builders))
	nodes := make([]*PostalAddressHistory, len(pahcb.builders))
	mutators := make([]Mutator, len(pahcb.builders))
	for i := range pahcb.builders {
		func(i int, root context.Context) {
			builder := pahcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PostalAddressHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pahcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pahcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pahcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pahcb *PostalAddressHistoryCreateBulk) SaveX(ctx context.Context) []*PostalAddressHistory {
	v, err := pahcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pahcb *PostalAddressHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := pahcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pahcb *PostalAddressHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := pahcb.Exec(ctx); err != nil {
		panic(err)
	}
}
