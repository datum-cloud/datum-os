// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilehistory"
	"github.com/datum-cloud/datum-os/pkg/enthistory"
	"github.com/datum-cloud/datum-os/pkg/enums"
)

// VendorProfileHistoryCreate is the builder for creating a VendorProfileHistory entity.
type VendorProfileHistoryCreate struct {
	config
	mutation *VendorProfileHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (vphc *VendorProfileHistoryCreate) SetHistoryTime(t time.Time) *VendorProfileHistoryCreate {
	vphc.mutation.SetHistoryTime(t)
	return vphc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (vphc *VendorProfileHistoryCreate) SetNillableHistoryTime(t *time.Time) *VendorProfileHistoryCreate {
	if t != nil {
		vphc.SetHistoryTime(*t)
	}
	return vphc
}

// SetRef sets the "ref" field.
func (vphc *VendorProfileHistoryCreate) SetRef(s string) *VendorProfileHistoryCreate {
	vphc.mutation.SetRef(s)
	return vphc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (vphc *VendorProfileHistoryCreate) SetNillableRef(s *string) *VendorProfileHistoryCreate {
	if s != nil {
		vphc.SetRef(*s)
	}
	return vphc
}

// SetOperation sets the "operation" field.
func (vphc *VendorProfileHistoryCreate) SetOperation(et enthistory.OpType) *VendorProfileHistoryCreate {
	vphc.mutation.SetOperation(et)
	return vphc
}

// SetCreatedAt sets the "created_at" field.
func (vphc *VendorProfileHistoryCreate) SetCreatedAt(t time.Time) *VendorProfileHistoryCreate {
	vphc.mutation.SetCreatedAt(t)
	return vphc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vphc *VendorProfileHistoryCreate) SetNillableCreatedAt(t *time.Time) *VendorProfileHistoryCreate {
	if t != nil {
		vphc.SetCreatedAt(*t)
	}
	return vphc
}

// SetUpdatedAt sets the "updated_at" field.
func (vphc *VendorProfileHistoryCreate) SetUpdatedAt(t time.Time) *VendorProfileHistoryCreate {
	vphc.mutation.SetUpdatedAt(t)
	return vphc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vphc *VendorProfileHistoryCreate) SetNillableUpdatedAt(t *time.Time) *VendorProfileHistoryCreate {
	if t != nil {
		vphc.SetUpdatedAt(*t)
	}
	return vphc
}

// SetCreatedBy sets the "created_by" field.
func (vphc *VendorProfileHistoryCreate) SetCreatedBy(s string) *VendorProfileHistoryCreate {
	vphc.mutation.SetCreatedBy(s)
	return vphc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vphc *VendorProfileHistoryCreate) SetNillableCreatedBy(s *string) *VendorProfileHistoryCreate {
	if s != nil {
		vphc.SetCreatedBy(*s)
	}
	return vphc
}

// SetUpdatedBy sets the "updated_by" field.
func (vphc *VendorProfileHistoryCreate) SetUpdatedBy(s string) *VendorProfileHistoryCreate {
	vphc.mutation.SetUpdatedBy(s)
	return vphc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vphc *VendorProfileHistoryCreate) SetNillableUpdatedBy(s *string) *VendorProfileHistoryCreate {
	if s != nil {
		vphc.SetUpdatedBy(*s)
	}
	return vphc
}

// SetDeletedAt sets the "deleted_at" field.
func (vphc *VendorProfileHistoryCreate) SetDeletedAt(t time.Time) *VendorProfileHistoryCreate {
	vphc.mutation.SetDeletedAt(t)
	return vphc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vphc *VendorProfileHistoryCreate) SetNillableDeletedAt(t *time.Time) *VendorProfileHistoryCreate {
	if t != nil {
		vphc.SetDeletedAt(*t)
	}
	return vphc
}

// SetDeletedBy sets the "deleted_by" field.
func (vphc *VendorProfileHistoryCreate) SetDeletedBy(s string) *VendorProfileHistoryCreate {
	vphc.mutation.SetDeletedBy(s)
	return vphc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vphc *VendorProfileHistoryCreate) SetNillableDeletedBy(s *string) *VendorProfileHistoryCreate {
	if s != nil {
		vphc.SetDeletedBy(*s)
	}
	return vphc
}

// SetMappingID sets the "mapping_id" field.
func (vphc *VendorProfileHistoryCreate) SetMappingID(s string) *VendorProfileHistoryCreate {
	vphc.mutation.SetMappingID(s)
	return vphc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (vphc *VendorProfileHistoryCreate) SetNillableMappingID(s *string) *VendorProfileHistoryCreate {
	if s != nil {
		vphc.SetMappingID(*s)
	}
	return vphc
}

// SetTags sets the "tags" field.
func (vphc *VendorProfileHistoryCreate) SetTags(s []string) *VendorProfileHistoryCreate {
	vphc.mutation.SetTags(s)
	return vphc
}

// SetOwnerID sets the "owner_id" field.
func (vphc *VendorProfileHistoryCreate) SetOwnerID(s string) *VendorProfileHistoryCreate {
	vphc.mutation.SetOwnerID(s)
	return vphc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (vphc *VendorProfileHistoryCreate) SetNillableOwnerID(s *string) *VendorProfileHistoryCreate {
	if s != nil {
		vphc.SetOwnerID(*s)
	}
	return vphc
}

// SetVendorID sets the "vendor_id" field.
func (vphc *VendorProfileHistoryCreate) SetVendorID(s string) *VendorProfileHistoryCreate {
	vphc.mutation.SetVendorID(s)
	return vphc
}

// SetNillableVendorID sets the "vendor_id" field if the given value is not nil.
func (vphc *VendorProfileHistoryCreate) SetNillableVendorID(s *string) *VendorProfileHistoryCreate {
	if s != nil {
		vphc.SetVendorID(*s)
	}
	return vphc
}

// SetName sets the "name" field.
func (vphc *VendorProfileHistoryCreate) SetName(s string) *VendorProfileHistoryCreate {
	vphc.mutation.SetName(s)
	return vphc
}

// SetCorporationType sets the "corporation_type" field.
func (vphc *VendorProfileHistoryCreate) SetCorporationType(s string) *VendorProfileHistoryCreate {
	vphc.mutation.SetCorporationType(s)
	return vphc
}

// SetNillableCorporationType sets the "corporation_type" field if the given value is not nil.
func (vphc *VendorProfileHistoryCreate) SetNillableCorporationType(s *string) *VendorProfileHistoryCreate {
	if s != nil {
		vphc.SetCorporationType(*s)
	}
	return vphc
}

// SetCorporationDba sets the "corporation_dba" field.
func (vphc *VendorProfileHistoryCreate) SetCorporationDba(s string) *VendorProfileHistoryCreate {
	vphc.mutation.SetCorporationDba(s)
	return vphc
}

// SetNillableCorporationDba sets the "corporation_dba" field if the given value is not nil.
func (vphc *VendorProfileHistoryCreate) SetNillableCorporationDba(s *string) *VendorProfileHistoryCreate {
	if s != nil {
		vphc.SetCorporationDba(*s)
	}
	return vphc
}

// SetDescription sets the "description" field.
func (vphc *VendorProfileHistoryCreate) SetDescription(s string) *VendorProfileHistoryCreate {
	vphc.mutation.SetDescription(s)
	return vphc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vphc *VendorProfileHistoryCreate) SetNillableDescription(s *string) *VendorProfileHistoryCreate {
	if s != nil {
		vphc.SetDescription(*s)
	}
	return vphc
}

// SetWebsiteURI sets the "website_uri" field.
func (vphc *VendorProfileHistoryCreate) SetWebsiteURI(s string) *VendorProfileHistoryCreate {
	vphc.mutation.SetWebsiteURI(s)
	return vphc
}

// SetNillableWebsiteURI sets the "website_uri" field if the given value is not nil.
func (vphc *VendorProfileHistoryCreate) SetNillableWebsiteURI(s *string) *VendorProfileHistoryCreate {
	if s != nil {
		vphc.SetWebsiteURI(*s)
	}
	return vphc
}

// SetTaxID sets the "tax_id" field.
func (vphc *VendorProfileHistoryCreate) SetTaxID(s string) *VendorProfileHistoryCreate {
	vphc.mutation.SetTaxID(s)
	return vphc
}

// SetNillableTaxID sets the "tax_id" field if the given value is not nil.
func (vphc *VendorProfileHistoryCreate) SetNillableTaxID(s *string) *VendorProfileHistoryCreate {
	if s != nil {
		vphc.SetTaxID(*s)
	}
	return vphc
}

// SetTaxIDType sets the "tax_id_type" field.
func (vphc *VendorProfileHistoryCreate) SetTaxIDType(eit enums.TaxIDType) *VendorProfileHistoryCreate {
	vphc.mutation.SetTaxIDType(eit)
	return vphc
}

// SetNillableTaxIDType sets the "tax_id_type" field if the given value is not nil.
func (vphc *VendorProfileHistoryCreate) SetNillableTaxIDType(eit *enums.TaxIDType) *VendorProfileHistoryCreate {
	if eit != nil {
		vphc.SetTaxIDType(*eit)
	}
	return vphc
}

// SetID sets the "id" field.
func (vphc *VendorProfileHistoryCreate) SetID(s string) *VendorProfileHistoryCreate {
	vphc.mutation.SetID(s)
	return vphc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vphc *VendorProfileHistoryCreate) SetNillableID(s *string) *VendorProfileHistoryCreate {
	if s != nil {
		vphc.SetID(*s)
	}
	return vphc
}

// Mutation returns the VendorProfileHistoryMutation object of the builder.
func (vphc *VendorProfileHistoryCreate) Mutation() *VendorProfileHistoryMutation {
	return vphc.mutation
}

// Save creates the VendorProfileHistory in the database.
func (vphc *VendorProfileHistoryCreate) Save(ctx context.Context) (*VendorProfileHistory, error) {
	vphc.defaults()
	return withHooks(ctx, vphc.sqlSave, vphc.mutation, vphc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vphc *VendorProfileHistoryCreate) SaveX(ctx context.Context) *VendorProfileHistory {
	v, err := vphc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vphc *VendorProfileHistoryCreate) Exec(ctx context.Context) error {
	_, err := vphc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vphc *VendorProfileHistoryCreate) ExecX(ctx context.Context) {
	if err := vphc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vphc *VendorProfileHistoryCreate) defaults() {
	if _, ok := vphc.mutation.HistoryTime(); !ok {
		v := vendorprofilehistory.DefaultHistoryTime()
		vphc.mutation.SetHistoryTime(v)
	}
	if _, ok := vphc.mutation.CreatedAt(); !ok {
		v := vendorprofilehistory.DefaultCreatedAt()
		vphc.mutation.SetCreatedAt(v)
	}
	if _, ok := vphc.mutation.UpdatedAt(); !ok {
		v := vendorprofilehistory.DefaultUpdatedAt()
		vphc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vphc.mutation.MappingID(); !ok {
		v := vendorprofilehistory.DefaultMappingID()
		vphc.mutation.SetMappingID(v)
	}
	if _, ok := vphc.mutation.Tags(); !ok {
		v := vendorprofilehistory.DefaultTags
		vphc.mutation.SetTags(v)
	}
	if _, ok := vphc.mutation.TaxIDType(); !ok {
		v := vendorprofilehistory.DefaultTaxIDType
		vphc.mutation.SetTaxIDType(v)
	}
	if _, ok := vphc.mutation.ID(); !ok {
		v := vendorprofilehistory.DefaultID()
		vphc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vphc *VendorProfileHistoryCreate) check() error {
	if _, ok := vphc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "VendorProfileHistory.history_time"`)}
	}
	if _, ok := vphc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "VendorProfileHistory.operation"`)}
	}
	if v, ok := vphc.mutation.Operation(); ok {
		if err := vendorprofilehistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "VendorProfileHistory.operation": %w`, err)}
		}
	}
	if _, ok := vphc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "VendorProfileHistory.mapping_id"`)}
	}
	if _, ok := vphc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "VendorProfileHistory.name"`)}
	}
	if _, ok := vphc.mutation.TaxIDType(); !ok {
		return &ValidationError{Name: "tax_id_type", err: errors.New(`generated: missing required field "VendorProfileHistory.tax_id_type"`)}
	}
	if v, ok := vphc.mutation.TaxIDType(); ok {
		if err := vendorprofilehistory.TaxIDTypeValidator(v); err != nil {
			return &ValidationError{Name: "tax_id_type", err: fmt.Errorf(`generated: validator failed for field "VendorProfileHistory.tax_id_type": %w`, err)}
		}
	}
	return nil
}

func (vphc *VendorProfileHistoryCreate) sqlSave(ctx context.Context) (*VendorProfileHistory, error) {
	if err := vphc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vphc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vphc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected VendorProfileHistory.ID type: %T", _spec.ID.Value)
		}
	}
	vphc.mutation.id = &_node.ID
	vphc.mutation.done = true
	return _node, nil
}

func (vphc *VendorProfileHistoryCreate) createSpec() (*VendorProfileHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &VendorProfileHistory{config: vphc.config}
		_spec = sqlgraph.NewCreateSpec(vendorprofilehistory.Table, sqlgraph.NewFieldSpec(vendorprofilehistory.FieldID, field.TypeString))
	)
	_spec.Schema = vphc.schemaConfig.VendorProfileHistory
	if id, ok := vphc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vphc.mutation.HistoryTime(); ok {
		_spec.SetField(vendorprofilehistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := vphc.mutation.Ref(); ok {
		_spec.SetField(vendorprofilehistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := vphc.mutation.Operation(); ok {
		_spec.SetField(vendorprofilehistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := vphc.mutation.CreatedAt(); ok {
		_spec.SetField(vendorprofilehistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vphc.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofilehistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vphc.mutation.CreatedBy(); ok {
		_spec.SetField(vendorprofilehistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := vphc.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofilehistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := vphc.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofilehistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := vphc.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofilehistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = &value
	}
	if value, ok := vphc.mutation.MappingID(); ok {
		_spec.SetField(vendorprofilehistory.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := vphc.mutation.Tags(); ok {
		_spec.SetField(vendorprofilehistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := vphc.mutation.OwnerID(); ok {
		_spec.SetField(vendorprofilehistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := vphc.mutation.VendorID(); ok {
		_spec.SetField(vendorprofilehistory.FieldVendorID, field.TypeString, value)
		_node.VendorID = value
	}
	if value, ok := vphc.mutation.Name(); ok {
		_spec.SetField(vendorprofilehistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := vphc.mutation.CorporationType(); ok {
		_spec.SetField(vendorprofilehistory.FieldCorporationType, field.TypeString, value)
		_node.CorporationType = value
	}
	if value, ok := vphc.mutation.CorporationDba(); ok {
		_spec.SetField(vendorprofilehistory.FieldCorporationDba, field.TypeString, value)
		_node.CorporationDba = value
	}
	if value, ok := vphc.mutation.Description(); ok {
		_spec.SetField(vendorprofilehistory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := vphc.mutation.WebsiteURI(); ok {
		_spec.SetField(vendorprofilehistory.FieldWebsiteURI, field.TypeString, value)
		_node.WebsiteURI = value
	}
	if value, ok := vphc.mutation.TaxID(); ok {
		_spec.SetField(vendorprofilehistory.FieldTaxID, field.TypeString, value)
		_node.TaxID = value
	}
	if value, ok := vphc.mutation.TaxIDType(); ok {
		_spec.SetField(vendorprofilehistory.FieldTaxIDType, field.TypeEnum, value)
		_node.TaxIDType = value
	}
	return _node, _spec
}

// VendorProfileHistoryCreateBulk is the builder for creating many VendorProfileHistory entities in bulk.
type VendorProfileHistoryCreateBulk struct {
	config
	err      error
	builders []*VendorProfileHistoryCreate
}

// Save creates the VendorProfileHistory entities in the database.
func (vphcb *VendorProfileHistoryCreateBulk) Save(ctx context.Context) ([]*VendorProfileHistory, error) {
	if vphcb.err != nil {
		return nil, vphcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vphcb.builders))
	nodes := make([]*VendorProfileHistory, len(vphcb.builders))
	mutators := make([]Mutator, len(vphcb.builders))
	for i := range vphcb.builders {
		func(i int, root context.Context) {
			builder := vphcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VendorProfileHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vphcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vphcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vphcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vphcb *VendorProfileHistoryCreateBulk) SaveX(ctx context.Context) []*VendorProfileHistory {
	v, err := vphcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vphcb *VendorProfileHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := vphcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vphcb *VendorProfileHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := vphcb.Exec(ctx); err != nil {
		panic(err)
	}
}
