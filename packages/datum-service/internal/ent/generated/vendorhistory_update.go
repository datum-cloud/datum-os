// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorhistory"
	"github.com/datum-cloud/datum-os/pkg/enums"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// VendorHistoryUpdate is the builder for updating VendorHistory entities.
type VendorHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *VendorHistoryMutation
}

// Where appends a list predicates to the VendorHistoryUpdate builder.
func (vhu *VendorHistoryUpdate) Where(ps ...predicate.VendorHistory) *VendorHistoryUpdate {
	vhu.mutation.Where(ps...)
	return vhu
}

// SetUpdatedAt sets the "updated_at" field.
func (vhu *VendorHistoryUpdate) SetUpdatedAt(t time.Time) *VendorHistoryUpdate {
	vhu.mutation.SetUpdatedAt(t)
	return vhu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vhu *VendorHistoryUpdate) ClearUpdatedAt() *VendorHistoryUpdate {
	vhu.mutation.ClearUpdatedAt()
	return vhu
}

// SetUpdatedBy sets the "updated_by" field.
func (vhu *VendorHistoryUpdate) SetUpdatedBy(s string) *VendorHistoryUpdate {
	vhu.mutation.SetUpdatedBy(s)
	return vhu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vhu *VendorHistoryUpdate) SetNillableUpdatedBy(s *string) *VendorHistoryUpdate {
	if s != nil {
		vhu.SetUpdatedBy(*s)
	}
	return vhu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vhu *VendorHistoryUpdate) ClearUpdatedBy() *VendorHistoryUpdate {
	vhu.mutation.ClearUpdatedBy()
	return vhu
}

// SetDeletedAt sets the "deleted_at" field.
func (vhu *VendorHistoryUpdate) SetDeletedAt(t time.Time) *VendorHistoryUpdate {
	vhu.mutation.SetDeletedAt(t)
	return vhu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vhu *VendorHistoryUpdate) SetNillableDeletedAt(t *time.Time) *VendorHistoryUpdate {
	if t != nil {
		vhu.SetDeletedAt(*t)
	}
	return vhu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vhu *VendorHistoryUpdate) ClearDeletedAt() *VendorHistoryUpdate {
	vhu.mutation.ClearDeletedAt()
	return vhu
}

// SetDeletedBy sets the "deleted_by" field.
func (vhu *VendorHistoryUpdate) SetDeletedBy(s string) *VendorHistoryUpdate {
	vhu.mutation.SetDeletedBy(s)
	return vhu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vhu *VendorHistoryUpdate) SetNillableDeletedBy(s *string) *VendorHistoryUpdate {
	if s != nil {
		vhu.SetDeletedBy(*s)
	}
	return vhu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (vhu *VendorHistoryUpdate) ClearDeletedBy() *VendorHistoryUpdate {
	vhu.mutation.ClearDeletedBy()
	return vhu
}

// SetTags sets the "tags" field.
func (vhu *VendorHistoryUpdate) SetTags(s []string) *VendorHistoryUpdate {
	vhu.mutation.SetTags(s)
	return vhu
}

// AppendTags appends s to the "tags" field.
func (vhu *VendorHistoryUpdate) AppendTags(s []string) *VendorHistoryUpdate {
	vhu.mutation.AppendTags(s)
	return vhu
}

// ClearTags clears the value of the "tags" field.
func (vhu *VendorHistoryUpdate) ClearTags() *VendorHistoryUpdate {
	vhu.mutation.ClearTags()
	return vhu
}

// SetOwnerID sets the "owner_id" field.
func (vhu *VendorHistoryUpdate) SetOwnerID(s string) *VendorHistoryUpdate {
	vhu.mutation.SetOwnerID(s)
	return vhu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (vhu *VendorHistoryUpdate) SetNillableOwnerID(s *string) *VendorHistoryUpdate {
	if s != nil {
		vhu.SetOwnerID(*s)
	}
	return vhu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (vhu *VendorHistoryUpdate) ClearOwnerID() *VendorHistoryUpdate {
	vhu.mutation.ClearOwnerID()
	return vhu
}

// SetDisplayName sets the "display_name" field.
func (vhu *VendorHistoryUpdate) SetDisplayName(s string) *VendorHistoryUpdate {
	vhu.mutation.SetDisplayName(s)
	return vhu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (vhu *VendorHistoryUpdate) SetNillableDisplayName(s *string) *VendorHistoryUpdate {
	if s != nil {
		vhu.SetDisplayName(*s)
	}
	return vhu
}

// SetVendorType sets the "vendor_type" field.
func (vhu *VendorHistoryUpdate) SetVendorType(et enums.VendorType) *VendorHistoryUpdate {
	vhu.mutation.SetVendorType(et)
	return vhu
}

// SetNillableVendorType sets the "vendor_type" field if the given value is not nil.
func (vhu *VendorHistoryUpdate) SetNillableVendorType(et *enums.VendorType) *VendorHistoryUpdate {
	if et != nil {
		vhu.SetVendorType(*et)
	}
	return vhu
}

// SetOnboardingState sets the "onboarding_state" field.
func (vhu *VendorHistoryUpdate) SetOnboardingState(es enums.OnboardingState) *VendorHistoryUpdate {
	vhu.mutation.SetOnboardingState(es)
	return vhu
}

// SetNillableOnboardingState sets the "onboarding_state" field if the given value is not nil.
func (vhu *VendorHistoryUpdate) SetNillableOnboardingState(es *enums.OnboardingState) *VendorHistoryUpdate {
	if es != nil {
		vhu.SetOnboardingState(*es)
	}
	return vhu
}

// Mutation returns the VendorHistoryMutation object of the builder.
func (vhu *VendorHistoryUpdate) Mutation() *VendorHistoryMutation {
	return vhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vhu *VendorHistoryUpdate) Save(ctx context.Context) (int, error) {
	vhu.defaults()
	return withHooks(ctx, vhu.sqlSave, vhu.mutation, vhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vhu *VendorHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := vhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vhu *VendorHistoryUpdate) Exec(ctx context.Context) error {
	_, err := vhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vhu *VendorHistoryUpdate) ExecX(ctx context.Context) {
	if err := vhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vhu *VendorHistoryUpdate) defaults() {
	if _, ok := vhu.mutation.UpdatedAt(); !ok && !vhu.mutation.UpdatedAtCleared() {
		v := vendorhistory.UpdateDefaultUpdatedAt()
		vhu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vhu *VendorHistoryUpdate) check() error {
	if v, ok := vhu.mutation.VendorType(); ok {
		if err := vendorhistory.VendorTypeValidator(v); err != nil {
			return &ValidationError{Name: "vendor_type", err: fmt.Errorf(`generated: validator failed for field "VendorHistory.vendor_type": %w`, err)}
		}
	}
	if v, ok := vhu.mutation.OnboardingState(); ok {
		if err := vendorhistory.OnboardingStateValidator(v); err != nil {
			return &ValidationError{Name: "onboarding_state", err: fmt.Errorf(`generated: validator failed for field "VendorHistory.onboarding_state": %w`, err)}
		}
	}
	return nil
}

func (vhu *VendorHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vhu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendorhistory.Table, vendorhistory.Columns, sqlgraph.NewFieldSpec(vendorhistory.FieldID, field.TypeString))
	if ps := vhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vhu.mutation.RefCleared() {
		_spec.ClearField(vendorhistory.FieldRef, field.TypeString)
	}
	if vhu.mutation.CreatedAtCleared() {
		_spec.ClearField(vendorhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vhu.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if vhu.mutation.UpdatedAtCleared() {
		_spec.ClearField(vendorhistory.FieldUpdatedAt, field.TypeTime)
	}
	if vhu.mutation.CreatedByCleared() {
		_spec.ClearField(vendorhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vhu.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if vhu.mutation.UpdatedByCleared() {
		_spec.ClearField(vendorhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vhu.mutation.DeletedAt(); ok {
		_spec.SetField(vendorhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if vhu.mutation.DeletedAtCleared() {
		_spec.ClearField(vendorhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vhu.mutation.DeletedBy(); ok {
		_spec.SetField(vendorhistory.FieldDeletedBy, field.TypeString, value)
	}
	if vhu.mutation.DeletedByCleared() {
		_spec.ClearField(vendorhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := vhu.mutation.Tags(); ok {
		_spec.SetField(vendorhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := vhu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vendorhistory.FieldTags, value)
		})
	}
	if vhu.mutation.TagsCleared() {
		_spec.ClearField(vendorhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := vhu.mutation.OwnerID(); ok {
		_spec.SetField(vendorhistory.FieldOwnerID, field.TypeString, value)
	}
	if vhu.mutation.OwnerIDCleared() {
		_spec.ClearField(vendorhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := vhu.mutation.DisplayName(); ok {
		_spec.SetField(vendorhistory.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := vhu.mutation.VendorType(); ok {
		_spec.SetField(vendorhistory.FieldVendorType, field.TypeEnum, value)
	}
	if value, ok := vhu.mutation.OnboardingState(); ok {
		_spec.SetField(vendorhistory.FieldOnboardingState, field.TypeEnum, value)
	}
	_spec.Node.Schema = vhu.schemaConfig.VendorHistory
	ctx = internal.NewSchemaConfigContext(ctx, vhu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, vhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vhu.mutation.done = true
	return n, nil
}

// VendorHistoryUpdateOne is the builder for updating a single VendorHistory entity.
type VendorHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VendorHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vhuo *VendorHistoryUpdateOne) SetUpdatedAt(t time.Time) *VendorHistoryUpdateOne {
	vhuo.mutation.SetUpdatedAt(t)
	return vhuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vhuo *VendorHistoryUpdateOne) ClearUpdatedAt() *VendorHistoryUpdateOne {
	vhuo.mutation.ClearUpdatedAt()
	return vhuo
}

// SetUpdatedBy sets the "updated_by" field.
func (vhuo *VendorHistoryUpdateOne) SetUpdatedBy(s string) *VendorHistoryUpdateOne {
	vhuo.mutation.SetUpdatedBy(s)
	return vhuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vhuo *VendorHistoryUpdateOne) SetNillableUpdatedBy(s *string) *VendorHistoryUpdateOne {
	if s != nil {
		vhuo.SetUpdatedBy(*s)
	}
	return vhuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vhuo *VendorHistoryUpdateOne) ClearUpdatedBy() *VendorHistoryUpdateOne {
	vhuo.mutation.ClearUpdatedBy()
	return vhuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vhuo *VendorHistoryUpdateOne) SetDeletedAt(t time.Time) *VendorHistoryUpdateOne {
	vhuo.mutation.SetDeletedAt(t)
	return vhuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vhuo *VendorHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *VendorHistoryUpdateOne {
	if t != nil {
		vhuo.SetDeletedAt(*t)
	}
	return vhuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vhuo *VendorHistoryUpdateOne) ClearDeletedAt() *VendorHistoryUpdateOne {
	vhuo.mutation.ClearDeletedAt()
	return vhuo
}

// SetDeletedBy sets the "deleted_by" field.
func (vhuo *VendorHistoryUpdateOne) SetDeletedBy(s string) *VendorHistoryUpdateOne {
	vhuo.mutation.SetDeletedBy(s)
	return vhuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vhuo *VendorHistoryUpdateOne) SetNillableDeletedBy(s *string) *VendorHistoryUpdateOne {
	if s != nil {
		vhuo.SetDeletedBy(*s)
	}
	return vhuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (vhuo *VendorHistoryUpdateOne) ClearDeletedBy() *VendorHistoryUpdateOne {
	vhuo.mutation.ClearDeletedBy()
	return vhuo
}

// SetTags sets the "tags" field.
func (vhuo *VendorHistoryUpdateOne) SetTags(s []string) *VendorHistoryUpdateOne {
	vhuo.mutation.SetTags(s)
	return vhuo
}

// AppendTags appends s to the "tags" field.
func (vhuo *VendorHistoryUpdateOne) AppendTags(s []string) *VendorHistoryUpdateOne {
	vhuo.mutation.AppendTags(s)
	return vhuo
}

// ClearTags clears the value of the "tags" field.
func (vhuo *VendorHistoryUpdateOne) ClearTags() *VendorHistoryUpdateOne {
	vhuo.mutation.ClearTags()
	return vhuo
}

// SetOwnerID sets the "owner_id" field.
func (vhuo *VendorHistoryUpdateOne) SetOwnerID(s string) *VendorHistoryUpdateOne {
	vhuo.mutation.SetOwnerID(s)
	return vhuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (vhuo *VendorHistoryUpdateOne) SetNillableOwnerID(s *string) *VendorHistoryUpdateOne {
	if s != nil {
		vhuo.SetOwnerID(*s)
	}
	return vhuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (vhuo *VendorHistoryUpdateOne) ClearOwnerID() *VendorHistoryUpdateOne {
	vhuo.mutation.ClearOwnerID()
	return vhuo
}

// SetDisplayName sets the "display_name" field.
func (vhuo *VendorHistoryUpdateOne) SetDisplayName(s string) *VendorHistoryUpdateOne {
	vhuo.mutation.SetDisplayName(s)
	return vhuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (vhuo *VendorHistoryUpdateOne) SetNillableDisplayName(s *string) *VendorHistoryUpdateOne {
	if s != nil {
		vhuo.SetDisplayName(*s)
	}
	return vhuo
}

// SetVendorType sets the "vendor_type" field.
func (vhuo *VendorHistoryUpdateOne) SetVendorType(et enums.VendorType) *VendorHistoryUpdateOne {
	vhuo.mutation.SetVendorType(et)
	return vhuo
}

// SetNillableVendorType sets the "vendor_type" field if the given value is not nil.
func (vhuo *VendorHistoryUpdateOne) SetNillableVendorType(et *enums.VendorType) *VendorHistoryUpdateOne {
	if et != nil {
		vhuo.SetVendorType(*et)
	}
	return vhuo
}

// SetOnboardingState sets the "onboarding_state" field.
func (vhuo *VendorHistoryUpdateOne) SetOnboardingState(es enums.OnboardingState) *VendorHistoryUpdateOne {
	vhuo.mutation.SetOnboardingState(es)
	return vhuo
}

// SetNillableOnboardingState sets the "onboarding_state" field if the given value is not nil.
func (vhuo *VendorHistoryUpdateOne) SetNillableOnboardingState(es *enums.OnboardingState) *VendorHistoryUpdateOne {
	if es != nil {
		vhuo.SetOnboardingState(*es)
	}
	return vhuo
}

// Mutation returns the VendorHistoryMutation object of the builder.
func (vhuo *VendorHistoryUpdateOne) Mutation() *VendorHistoryMutation {
	return vhuo.mutation
}

// Where appends a list predicates to the VendorHistoryUpdate builder.
func (vhuo *VendorHistoryUpdateOne) Where(ps ...predicate.VendorHistory) *VendorHistoryUpdateOne {
	vhuo.mutation.Where(ps...)
	return vhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vhuo *VendorHistoryUpdateOne) Select(field string, fields ...string) *VendorHistoryUpdateOne {
	vhuo.fields = append([]string{field}, fields...)
	return vhuo
}

// Save executes the query and returns the updated VendorHistory entity.
func (vhuo *VendorHistoryUpdateOne) Save(ctx context.Context) (*VendorHistory, error) {
	vhuo.defaults()
	return withHooks(ctx, vhuo.sqlSave, vhuo.mutation, vhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vhuo *VendorHistoryUpdateOne) SaveX(ctx context.Context) *VendorHistory {
	node, err := vhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vhuo *VendorHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := vhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vhuo *VendorHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := vhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vhuo *VendorHistoryUpdateOne) defaults() {
	if _, ok := vhuo.mutation.UpdatedAt(); !ok && !vhuo.mutation.UpdatedAtCleared() {
		v := vendorhistory.UpdateDefaultUpdatedAt()
		vhuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vhuo *VendorHistoryUpdateOne) check() error {
	if v, ok := vhuo.mutation.VendorType(); ok {
		if err := vendorhistory.VendorTypeValidator(v); err != nil {
			return &ValidationError{Name: "vendor_type", err: fmt.Errorf(`generated: validator failed for field "VendorHistory.vendor_type": %w`, err)}
		}
	}
	if v, ok := vhuo.mutation.OnboardingState(); ok {
		if err := vendorhistory.OnboardingStateValidator(v); err != nil {
			return &ValidationError{Name: "onboarding_state", err: fmt.Errorf(`generated: validator failed for field "VendorHistory.onboarding_state": %w`, err)}
		}
	}
	return nil
}

func (vhuo *VendorHistoryUpdateOne) sqlSave(ctx context.Context) (_node *VendorHistory, err error) {
	if err := vhuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendorhistory.Table, vendorhistory.Columns, sqlgraph.NewFieldSpec(vendorhistory.FieldID, field.TypeString))
	id, ok := vhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "VendorHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vendorhistory.FieldID)
		for _, f := range fields {
			if !vendorhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != vendorhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vhuo.mutation.RefCleared() {
		_spec.ClearField(vendorhistory.FieldRef, field.TypeString)
	}
	if vhuo.mutation.CreatedAtCleared() {
		_spec.ClearField(vendorhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vhuo.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if vhuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(vendorhistory.FieldUpdatedAt, field.TypeTime)
	}
	if vhuo.mutation.CreatedByCleared() {
		_spec.ClearField(vendorhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vhuo.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if vhuo.mutation.UpdatedByCleared() {
		_spec.ClearField(vendorhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vhuo.mutation.DeletedAt(); ok {
		_spec.SetField(vendorhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if vhuo.mutation.DeletedAtCleared() {
		_spec.ClearField(vendorhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vhuo.mutation.DeletedBy(); ok {
		_spec.SetField(vendorhistory.FieldDeletedBy, field.TypeString, value)
	}
	if vhuo.mutation.DeletedByCleared() {
		_spec.ClearField(vendorhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := vhuo.mutation.Tags(); ok {
		_spec.SetField(vendorhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := vhuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vendorhistory.FieldTags, value)
		})
	}
	if vhuo.mutation.TagsCleared() {
		_spec.ClearField(vendorhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := vhuo.mutation.OwnerID(); ok {
		_spec.SetField(vendorhistory.FieldOwnerID, field.TypeString, value)
	}
	if vhuo.mutation.OwnerIDCleared() {
		_spec.ClearField(vendorhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := vhuo.mutation.DisplayName(); ok {
		_spec.SetField(vendorhistory.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := vhuo.mutation.VendorType(); ok {
		_spec.SetField(vendorhistory.FieldVendorType, field.TypeEnum, value)
	}
	if value, ok := vhuo.mutation.OnboardingState(); ok {
		_spec.SetField(vendorhistory.FieldOnboardingState, field.TypeEnum, value)
	}
	_spec.Node.Schema = vhuo.schemaConfig.VendorHistory
	ctx = internal.NewSchemaConfigContext(ctx, vhuo.schemaConfig)
	_node = &VendorHistory{config: vhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vhuo.mutation.done = true
	return _node, nil
}
