// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/event"
	"github.com/datum-cloud/datum-os/internal/ent/generated/postaladdress"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofile"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilepostaladdress"
	"github.com/datum-cloud/datum-os/pkg/enums"
)

// VendorProfilePostalAddressCreate is the builder for creating a VendorProfilePostalAddress entity.
type VendorProfilePostalAddressCreate struct {
	config
	mutation *VendorProfilePostalAddressMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (vppac *VendorProfilePostalAddressCreate) SetCreatedAt(t time.Time) *VendorProfilePostalAddressCreate {
	vppac.mutation.SetCreatedAt(t)
	return vppac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vppac *VendorProfilePostalAddressCreate) SetNillableCreatedAt(t *time.Time) *VendorProfilePostalAddressCreate {
	if t != nil {
		vppac.SetCreatedAt(*t)
	}
	return vppac
}

// SetUpdatedAt sets the "updated_at" field.
func (vppac *VendorProfilePostalAddressCreate) SetUpdatedAt(t time.Time) *VendorProfilePostalAddressCreate {
	vppac.mutation.SetUpdatedAt(t)
	return vppac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vppac *VendorProfilePostalAddressCreate) SetNillableUpdatedAt(t *time.Time) *VendorProfilePostalAddressCreate {
	if t != nil {
		vppac.SetUpdatedAt(*t)
	}
	return vppac
}

// SetCreatedBy sets the "created_by" field.
func (vppac *VendorProfilePostalAddressCreate) SetCreatedBy(s string) *VendorProfilePostalAddressCreate {
	vppac.mutation.SetCreatedBy(s)
	return vppac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vppac *VendorProfilePostalAddressCreate) SetNillableCreatedBy(s *string) *VendorProfilePostalAddressCreate {
	if s != nil {
		vppac.SetCreatedBy(*s)
	}
	return vppac
}

// SetUpdatedBy sets the "updated_by" field.
func (vppac *VendorProfilePostalAddressCreate) SetUpdatedBy(s string) *VendorProfilePostalAddressCreate {
	vppac.mutation.SetUpdatedBy(s)
	return vppac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vppac *VendorProfilePostalAddressCreate) SetNillableUpdatedBy(s *string) *VendorProfilePostalAddressCreate {
	if s != nil {
		vppac.SetUpdatedBy(*s)
	}
	return vppac
}

// SetMappingID sets the "mapping_id" field.
func (vppac *VendorProfilePostalAddressCreate) SetMappingID(s string) *VendorProfilePostalAddressCreate {
	vppac.mutation.SetMappingID(s)
	return vppac
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (vppac *VendorProfilePostalAddressCreate) SetNillableMappingID(s *string) *VendorProfilePostalAddressCreate {
	if s != nil {
		vppac.SetMappingID(*s)
	}
	return vppac
}

// SetDeletedAt sets the "deleted_at" field.
func (vppac *VendorProfilePostalAddressCreate) SetDeletedAt(t time.Time) *VendorProfilePostalAddressCreate {
	vppac.mutation.SetDeletedAt(t)
	return vppac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vppac *VendorProfilePostalAddressCreate) SetNillableDeletedAt(t *time.Time) *VendorProfilePostalAddressCreate {
	if t != nil {
		vppac.SetDeletedAt(*t)
	}
	return vppac
}

// SetDeletedBy sets the "deleted_by" field.
func (vppac *VendorProfilePostalAddressCreate) SetDeletedBy(s string) *VendorProfilePostalAddressCreate {
	vppac.mutation.SetDeletedBy(s)
	return vppac
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vppac *VendorProfilePostalAddressCreate) SetNillableDeletedBy(s *string) *VendorProfilePostalAddressCreate {
	if s != nil {
		vppac.SetDeletedBy(*s)
	}
	return vppac
}

// SetPostalAddressType sets the "postal_address_type" field.
func (vppac *VendorProfilePostalAddressCreate) SetPostalAddressType(eat enums.PostalAddressType) *VendorProfilePostalAddressCreate {
	vppac.mutation.SetPostalAddressType(eat)
	return vppac
}

// SetNillablePostalAddressType sets the "postal_address_type" field if the given value is not nil.
func (vppac *VendorProfilePostalAddressCreate) SetNillablePostalAddressType(eat *enums.PostalAddressType) *VendorProfilePostalAddressCreate {
	if eat != nil {
		vppac.SetPostalAddressType(*eat)
	}
	return vppac
}

// SetVendorProfileID sets the "vendor_profile_id" field.
func (vppac *VendorProfilePostalAddressCreate) SetVendorProfileID(s string) *VendorProfilePostalAddressCreate {
	vppac.mutation.SetVendorProfileID(s)
	return vppac
}

// SetPostalAddressID sets the "postal_address_id" field.
func (vppac *VendorProfilePostalAddressCreate) SetPostalAddressID(s string) *VendorProfilePostalAddressCreate {
	vppac.mutation.SetPostalAddressID(s)
	return vppac
}

// SetID sets the "id" field.
func (vppac *VendorProfilePostalAddressCreate) SetID(s string) *VendorProfilePostalAddressCreate {
	vppac.mutation.SetID(s)
	return vppac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vppac *VendorProfilePostalAddressCreate) SetNillableID(s *string) *VendorProfilePostalAddressCreate {
	if s != nil {
		vppac.SetID(*s)
	}
	return vppac
}

// SetPostalAddress sets the "postal_address" edge to the PostalAddress entity.
func (vppac *VendorProfilePostalAddressCreate) SetPostalAddress(p *PostalAddress) *VendorProfilePostalAddressCreate {
	return vppac.SetPostalAddressID(p.ID)
}

// SetProfileID sets the "profile" edge to the VendorProfile entity by ID.
func (vppac *VendorProfilePostalAddressCreate) SetProfileID(id string) *VendorProfilePostalAddressCreate {
	vppac.mutation.SetProfileID(id)
	return vppac
}

// SetProfile sets the "profile" edge to the VendorProfile entity.
func (vppac *VendorProfilePostalAddressCreate) SetProfile(v *VendorProfile) *VendorProfilePostalAddressCreate {
	return vppac.SetProfileID(v.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (vppac *VendorProfilePostalAddressCreate) AddEventIDs(ids ...string) *VendorProfilePostalAddressCreate {
	vppac.mutation.AddEventIDs(ids...)
	return vppac
}

// AddEvents adds the "events" edges to the Event entity.
func (vppac *VendorProfilePostalAddressCreate) AddEvents(e ...*Event) *VendorProfilePostalAddressCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vppac.AddEventIDs(ids...)
}

// Mutation returns the VendorProfilePostalAddressMutation object of the builder.
func (vppac *VendorProfilePostalAddressCreate) Mutation() *VendorProfilePostalAddressMutation {
	return vppac.mutation
}

// Save creates the VendorProfilePostalAddress in the database.
func (vppac *VendorProfilePostalAddressCreate) Save(ctx context.Context) (*VendorProfilePostalAddress, error) {
	if err := vppac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, vppac.sqlSave, vppac.mutation, vppac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vppac *VendorProfilePostalAddressCreate) SaveX(ctx context.Context) *VendorProfilePostalAddress {
	v, err := vppac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vppac *VendorProfilePostalAddressCreate) Exec(ctx context.Context) error {
	_, err := vppac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vppac *VendorProfilePostalAddressCreate) ExecX(ctx context.Context) {
	if err := vppac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vppac *VendorProfilePostalAddressCreate) defaults() error {
	if _, ok := vppac.mutation.CreatedAt(); !ok {
		if vendorprofilepostaladdress.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized vendorprofilepostaladdress.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := vendorprofilepostaladdress.DefaultCreatedAt()
		vppac.mutation.SetCreatedAt(v)
	}
	if _, ok := vppac.mutation.UpdatedAt(); !ok {
		if vendorprofilepostaladdress.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized vendorprofilepostaladdress.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := vendorprofilepostaladdress.DefaultUpdatedAt()
		vppac.mutation.SetUpdatedAt(v)
	}
	if _, ok := vppac.mutation.MappingID(); !ok {
		if vendorprofilepostaladdress.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized vendorprofilepostaladdress.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := vendorprofilepostaladdress.DefaultMappingID()
		vppac.mutation.SetMappingID(v)
	}
	if _, ok := vppac.mutation.PostalAddressType(); !ok {
		v := vendorprofilepostaladdress.DefaultPostalAddressType
		vppac.mutation.SetPostalAddressType(v)
	}
	if _, ok := vppac.mutation.ID(); !ok {
		if vendorprofilepostaladdress.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized vendorprofilepostaladdress.DefaultID (forgotten import generated/runtime?)")
		}
		v := vendorprofilepostaladdress.DefaultID()
		vppac.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vppac *VendorProfilePostalAddressCreate) check() error {
	if _, ok := vppac.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "VendorProfilePostalAddress.mapping_id"`)}
	}
	if _, ok := vppac.mutation.PostalAddressType(); !ok {
		return &ValidationError{Name: "postal_address_type", err: errors.New(`generated: missing required field "VendorProfilePostalAddress.postal_address_type"`)}
	}
	if v, ok := vppac.mutation.PostalAddressType(); ok {
		if err := vendorprofilepostaladdress.PostalAddressTypeValidator(v); err != nil {
			return &ValidationError{Name: "postal_address_type", err: fmt.Errorf(`generated: validator failed for field "VendorProfilePostalAddress.postal_address_type": %w`, err)}
		}
	}
	if _, ok := vppac.mutation.VendorProfileID(); !ok {
		return &ValidationError{Name: "vendor_profile_id", err: errors.New(`generated: missing required field "VendorProfilePostalAddress.vendor_profile_id"`)}
	}
	if v, ok := vppac.mutation.VendorProfileID(); ok {
		if err := vendorprofilepostaladdress.VendorProfileIDValidator(v); err != nil {
			return &ValidationError{Name: "vendor_profile_id", err: fmt.Errorf(`generated: validator failed for field "VendorProfilePostalAddress.vendor_profile_id": %w`, err)}
		}
	}
	if _, ok := vppac.mutation.PostalAddressID(); !ok {
		return &ValidationError{Name: "postal_address_id", err: errors.New(`generated: missing required field "VendorProfilePostalAddress.postal_address_id"`)}
	}
	if v, ok := vppac.mutation.PostalAddressID(); ok {
		if err := vendorprofilepostaladdress.PostalAddressIDValidator(v); err != nil {
			return &ValidationError{Name: "postal_address_id", err: fmt.Errorf(`generated: validator failed for field "VendorProfilePostalAddress.postal_address_id": %w`, err)}
		}
	}
	if len(vppac.mutation.PostalAddressIDs()) == 0 {
		return &ValidationError{Name: "postal_address", err: errors.New(`generated: missing required edge "VendorProfilePostalAddress.postal_address"`)}
	}
	if len(vppac.mutation.ProfileIDs()) == 0 {
		return &ValidationError{Name: "profile", err: errors.New(`generated: missing required edge "VendorProfilePostalAddress.profile"`)}
	}
	return nil
}

func (vppac *VendorProfilePostalAddressCreate) sqlSave(ctx context.Context) (*VendorProfilePostalAddress, error) {
	if err := vppac.check(); err != nil {
		return nil, err
	}
	_node, _spec := vppac.createSpec()
	if err := sqlgraph.CreateNode(ctx, vppac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected VendorProfilePostalAddress.ID type: %T", _spec.ID.Value)
		}
	}
	vppac.mutation.id = &_node.ID
	vppac.mutation.done = true
	return _node, nil
}

func (vppac *VendorProfilePostalAddressCreate) createSpec() (*VendorProfilePostalAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &VendorProfilePostalAddress{config: vppac.config}
		_spec = sqlgraph.NewCreateSpec(vendorprofilepostaladdress.Table, sqlgraph.NewFieldSpec(vendorprofilepostaladdress.FieldID, field.TypeString))
	)
	_spec.Schema = vppac.schemaConfig.VendorProfilePostalAddress
	if id, ok := vppac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vppac.mutation.CreatedAt(); ok {
		_spec.SetField(vendorprofilepostaladdress.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vppac.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofilepostaladdress.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vppac.mutation.CreatedBy(); ok {
		_spec.SetField(vendorprofilepostaladdress.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := vppac.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofilepostaladdress.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := vppac.mutation.MappingID(); ok {
		_spec.SetField(vendorprofilepostaladdress.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := vppac.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofilepostaladdress.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := vppac.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofilepostaladdress.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = &value
	}
	if value, ok := vppac.mutation.PostalAddressType(); ok {
		_spec.SetField(vendorprofilepostaladdress.FieldPostalAddressType, field.TypeEnum, value)
		_node.PostalAddressType = value
	}
	if nodes := vppac.mutation.PostalAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vendorprofilepostaladdress.PostalAddressTable,
			Columns: []string{vendorprofilepostaladdress.PostalAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postaladdress.FieldID, field.TypeString),
			},
		}
		edge.Schema = vppac.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PostalAddressID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vppac.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vendorprofilepostaladdress.ProfileTable,
			Columns: []string{vendorprofilepostaladdress.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = vppac.schemaConfig.VendorProfilePostalAddress
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VendorProfileID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vppac.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendorprofilepostaladdress.EventsTable,
			Columns: []string{vendorprofilepostaladdress.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = vppac.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VendorProfilePostalAddressCreateBulk is the builder for creating many VendorProfilePostalAddress entities in bulk.
type VendorProfilePostalAddressCreateBulk struct {
	config
	err      error
	builders []*VendorProfilePostalAddressCreate
}

// Save creates the VendorProfilePostalAddress entities in the database.
func (vppacb *VendorProfilePostalAddressCreateBulk) Save(ctx context.Context) ([]*VendorProfilePostalAddress, error) {
	if vppacb.err != nil {
		return nil, vppacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vppacb.builders))
	nodes := make([]*VendorProfilePostalAddress, len(vppacb.builders))
	mutators := make([]Mutator, len(vppacb.builders))
	for i := range vppacb.builders {
		func(i int, root context.Context) {
			builder := vppacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VendorProfilePostalAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vppacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vppacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vppacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vppacb *VendorProfilePostalAddressCreateBulk) SaveX(ctx context.Context) []*VendorProfilePostalAddress {
	v, err := vppacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vppacb *VendorProfilePostalAddressCreateBulk) Exec(ctx context.Context) error {
	_, err := vppacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vppacb *VendorProfilePostalAddressCreateBulk) ExecX(ctx context.Context) {
	if err := vppacb.Exec(ctx); err != nil {
		panic(err)
	}
}
