// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilehistory"
	"github.com/datum-cloud/datum-os/pkg/enthistory"
	"github.com/datum-cloud/datum-os/pkg/enums"
)

// VendorProfileHistory is the model entity for the VendorProfileHistory schema.
type VendorProfileHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation enthistory.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *string `json:"deleted_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// The organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// The ID of the Vendor
	VendorID string `json:"vendor_id,omitempty"`
	// The name of the Corporation or Person
	Name string `json:"name,omitempty"`
	// The type of corporation (e.g. LLC, S-Corp, C-Corp, Other)
	CorporationType string `json:"corporation_type,omitempty"`
	// The Doing Business As (DBA) name of the Corporation
	CorporationDba string `json:"corporation_dba,omitempty"`
	// The description of the Corporation or Person and the services they provide
	Description string `json:"description,omitempty"`
	// The URL of the website of the Corporation or Person
	WebsiteURI string `json:"website_uri,omitempty"`
	// The tax ID of the Corporation or Person
	TaxID string `json:"-"`
	// The type of tax ID (e.g. EIN, SSN, TIN, etc.)
	TaxIDType    enums.TaxIDType `json:"tax_id_type,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VendorProfileHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vendorprofilehistory.FieldTags:
			values[i] = new([]byte)
		case vendorprofilehistory.FieldOperation:
			values[i] = new(enthistory.OpType)
		case vendorprofilehistory.FieldID, vendorprofilehistory.FieldRef, vendorprofilehistory.FieldCreatedBy, vendorprofilehistory.FieldUpdatedBy, vendorprofilehistory.FieldDeletedBy, vendorprofilehistory.FieldMappingID, vendorprofilehistory.FieldOwnerID, vendorprofilehistory.FieldVendorID, vendorprofilehistory.FieldName, vendorprofilehistory.FieldCorporationType, vendorprofilehistory.FieldCorporationDba, vendorprofilehistory.FieldDescription, vendorprofilehistory.FieldWebsiteURI, vendorprofilehistory.FieldTaxID, vendorprofilehistory.FieldTaxIDType:
			values[i] = new(sql.NullString)
		case vendorprofilehistory.FieldHistoryTime, vendorprofilehistory.FieldCreatedAt, vendorprofilehistory.FieldUpdatedAt, vendorprofilehistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VendorProfileHistory fields.
func (vph *VendorProfileHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vendorprofilehistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				vph.ID = value.String
			}
		case vendorprofilehistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				vph.HistoryTime = value.Time
			}
		case vendorprofilehistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				vph.Ref = value.String
			}
		case vendorprofilehistory.FieldOperation:
			if value, ok := values[i].(*enthistory.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				vph.Operation = *value
			}
		case vendorprofilehistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vph.CreatedAt = value.Time
			}
		case vendorprofilehistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vph.UpdatedAt = value.Time
			}
		case vendorprofilehistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				vph.CreatedBy = value.String
			}
		case vendorprofilehistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				vph.UpdatedBy = value.String
			}
		case vendorprofilehistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				vph.DeletedAt = new(time.Time)
				*vph.DeletedAt = value.Time
			}
		case vendorprofilehistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				vph.DeletedBy = new(string)
				*vph.DeletedBy = value.String
			}
		case vendorprofilehistory.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				vph.MappingID = value.String
			}
		case vendorprofilehistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &vph.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case vendorprofilehistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				vph.OwnerID = value.String
			}
		case vendorprofilehistory.FieldVendorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vendor_id", values[i])
			} else if value.Valid {
				vph.VendorID = value.String
			}
		case vendorprofilehistory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				vph.Name = value.String
			}
		case vendorprofilehistory.FieldCorporationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field corporation_type", values[i])
			} else if value.Valid {
				vph.CorporationType = value.String
			}
		case vendorprofilehistory.FieldCorporationDba:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field corporation_dba", values[i])
			} else if value.Valid {
				vph.CorporationDba = value.String
			}
		case vendorprofilehistory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				vph.Description = value.String
			}
		case vendorprofilehistory.FieldWebsiteURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field website_uri", values[i])
			} else if value.Valid {
				vph.WebsiteURI = value.String
			}
		case vendorprofilehistory.FieldTaxID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tax_id", values[i])
			} else if value.Valid {
				vph.TaxID = value.String
			}
		case vendorprofilehistory.FieldTaxIDType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tax_id_type", values[i])
			} else if value.Valid {
				vph.TaxIDType = enums.TaxIDType(value.String)
			}
		default:
			vph.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VendorProfileHistory.
// This includes values selected through modifiers, order, etc.
func (vph *VendorProfileHistory) Value(name string) (ent.Value, error) {
	return vph.selectValues.Get(name)
}

// Update returns a builder for updating this VendorProfileHistory.
// Note that you need to call VendorProfileHistory.Unwrap() before calling this method if this VendorProfileHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (vph *VendorProfileHistory) Update() *VendorProfileHistoryUpdateOne {
	return NewVendorProfileHistoryClient(vph.config).UpdateOne(vph)
}

// Unwrap unwraps the VendorProfileHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vph *VendorProfileHistory) Unwrap() *VendorProfileHistory {
	_tx, ok := vph.config.driver.(*txDriver)
	if !ok {
		panic("generated: VendorProfileHistory is not a transactional entity")
	}
	vph.config.driver = _tx.drv
	return vph
}

// String implements the fmt.Stringer.
func (vph *VendorProfileHistory) String() string {
	var builder strings.Builder
	builder.WriteString("VendorProfileHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vph.ID))
	builder.WriteString("history_time=")
	builder.WriteString(vph.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(vph.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", vph.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(vph.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(vph.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(vph.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(vph.UpdatedBy)
	builder.WriteString(", ")
	if v := vph.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := vph.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(vph.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", vph.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(vph.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("vendor_id=")
	builder.WriteString(vph.VendorID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(vph.Name)
	builder.WriteString(", ")
	builder.WriteString("corporation_type=")
	builder.WriteString(vph.CorporationType)
	builder.WriteString(", ")
	builder.WriteString("corporation_dba=")
	builder.WriteString(vph.CorporationDba)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(vph.Description)
	builder.WriteString(", ")
	builder.WriteString("website_uri=")
	builder.WriteString(vph.WebsiteURI)
	builder.WriteString(", ")
	builder.WriteString("tax_id=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("tax_id_type=")
	builder.WriteString(fmt.Sprintf("%v", vph.TaxIDType))
	builder.WriteByte(')')
	return builder.String()
}

// VendorProfileHistories is a parsable slice of VendorProfileHistory.
type VendorProfileHistories []*VendorProfileHistory
