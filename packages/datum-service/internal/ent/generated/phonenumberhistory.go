// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datum-cloud/datum-os/internal/ent/generated/phonenumberhistory"
	"github.com/datum-cloud/datum-os/pkg/enthistory"
	"github.com/datum-cloud/datum-os/pkg/enums"
)

// PhoneNumberHistory is the model entity for the PhoneNumberHistory schema.
type PhoneNumberHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation enthistory.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// The organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// The type of phone number. E.g. 'E164' or 'SHORT_CODE'
	Kind enums.PhoneNumberType `json:"kind,omitempty"`
	// The BCP-47 region code of the phone number. E.g. 'US' or 'CA'
	RegionCode string `json:"region_code,omitempty"`
	// The short code of the phone number. E.g. '611'
	ShortCode string `json:"short_code,omitempty"`
	// The phone number. E.g. '+15552220123'
	Number string `json:"number,omitempty"`
	// The extension of the phone number. E.g. '123'
	Extension    string `json:"extension,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PhoneNumberHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case phonenumberhistory.FieldTags:
			values[i] = new([]byte)
		case phonenumberhistory.FieldOperation:
			values[i] = new(enthistory.OpType)
		case phonenumberhistory.FieldID, phonenumberhistory.FieldRef, phonenumberhistory.FieldCreatedBy, phonenumberhistory.FieldUpdatedBy, phonenumberhistory.FieldDeletedBy, phonenumberhistory.FieldMappingID, phonenumberhistory.FieldOwnerID, phonenumberhistory.FieldKind, phonenumberhistory.FieldRegionCode, phonenumberhistory.FieldShortCode, phonenumberhistory.FieldNumber, phonenumberhistory.FieldExtension:
			values[i] = new(sql.NullString)
		case phonenumberhistory.FieldHistoryTime, phonenumberhistory.FieldCreatedAt, phonenumberhistory.FieldUpdatedAt, phonenumberhistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PhoneNumberHistory fields.
func (pnh *PhoneNumberHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case phonenumberhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pnh.ID = value.String
			}
		case phonenumberhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				pnh.HistoryTime = value.Time
			}
		case phonenumberhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				pnh.Ref = value.String
			}
		case phonenumberhistory.FieldOperation:
			if value, ok := values[i].(*enthistory.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				pnh.Operation = *value
			}
		case phonenumberhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pnh.CreatedAt = value.Time
			}
		case phonenumberhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pnh.UpdatedAt = value.Time
			}
		case phonenumberhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pnh.CreatedBy = value.String
			}
		case phonenumberhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pnh.UpdatedBy = value.String
			}
		case phonenumberhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pnh.DeletedAt = value.Time
			}
		case phonenumberhistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				pnh.DeletedBy = value.String
			}
		case phonenumberhistory.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				pnh.MappingID = value.String
			}
		case phonenumberhistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pnh.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case phonenumberhistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				pnh.OwnerID = value.String
			}
		case phonenumberhistory.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				pnh.Kind = enums.PhoneNumberType(value.String)
			}
		case phonenumberhistory.FieldRegionCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region_code", values[i])
			} else if value.Valid {
				pnh.RegionCode = value.String
			}
		case phonenumberhistory.FieldShortCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short_code", values[i])
			} else if value.Valid {
				pnh.ShortCode = value.String
			}
		case phonenumberhistory.FieldNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				pnh.Number = value.String
			}
		case phonenumberhistory.FieldExtension:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extension", values[i])
			} else if value.Valid {
				pnh.Extension = value.String
			}
		default:
			pnh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PhoneNumberHistory.
// This includes values selected through modifiers, order, etc.
func (pnh *PhoneNumberHistory) Value(name string) (ent.Value, error) {
	return pnh.selectValues.Get(name)
}

// Update returns a builder for updating this PhoneNumberHistory.
// Note that you need to call PhoneNumberHistory.Unwrap() before calling this method if this PhoneNumberHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (pnh *PhoneNumberHistory) Update() *PhoneNumberHistoryUpdateOne {
	return NewPhoneNumberHistoryClient(pnh.config).UpdateOne(pnh)
}

// Unwrap unwraps the PhoneNumberHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pnh *PhoneNumberHistory) Unwrap() *PhoneNumberHistory {
	_tx, ok := pnh.config.driver.(*txDriver)
	if !ok {
		panic("generated: PhoneNumberHistory is not a transactional entity")
	}
	pnh.config.driver = _tx.drv
	return pnh
}

// String implements the fmt.Stringer.
func (pnh *PhoneNumberHistory) String() string {
	var builder strings.Builder
	builder.WriteString("PhoneNumberHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pnh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(pnh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(pnh.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", pnh.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pnh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pnh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(pnh.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(pnh.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(pnh.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(pnh.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(pnh.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", pnh.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(pnh.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", pnh.Kind))
	builder.WriteString(", ")
	builder.WriteString("region_code=")
	builder.WriteString(pnh.RegionCode)
	builder.WriteString(", ")
	builder.WriteString("short_code=")
	builder.WriteString(pnh.ShortCode)
	builder.WriteString(", ")
	builder.WriteString("number=")
	builder.WriteString(pnh.Number)
	builder.WriteString(", ")
	builder.WriteString("extension=")
	builder.WriteString(pnh.Extension)
	builder.WriteByte(')')
	return builder.String()
}

// PhoneNumberHistories is a parsable slice of PhoneNumberHistory.
type PhoneNumberHistories []*PhoneNumberHistory
