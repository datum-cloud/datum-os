// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilepaymentpreferencehistory"
	"github.com/datum-cloud/datum-os/pkg/enthistory"
	"github.com/datum-cloud/datum-os/pkg/enums"
)

// VendorProfilePaymentPreferenceHistoryCreate is the builder for creating a VendorProfilePaymentPreferenceHistory entity.
type VendorProfilePaymentPreferenceHistoryCreate struct {
	config
	mutation *VendorProfilePaymentPreferenceHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetHistoryTime(t time.Time) *VendorProfilePaymentPreferenceHistoryCreate {
	vppphc.mutation.SetHistoryTime(t)
	return vppphc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetNillableHistoryTime(t *time.Time) *VendorProfilePaymentPreferenceHistoryCreate {
	if t != nil {
		vppphc.SetHistoryTime(*t)
	}
	return vppphc
}

// SetRef sets the "ref" field.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetRef(s string) *VendorProfilePaymentPreferenceHistoryCreate {
	vppphc.mutation.SetRef(s)
	return vppphc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetNillableRef(s *string) *VendorProfilePaymentPreferenceHistoryCreate {
	if s != nil {
		vppphc.SetRef(*s)
	}
	return vppphc
}

// SetOperation sets the "operation" field.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetOperation(et enthistory.OpType) *VendorProfilePaymentPreferenceHistoryCreate {
	vppphc.mutation.SetOperation(et)
	return vppphc
}

// SetMappingID sets the "mapping_id" field.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetMappingID(s string) *VendorProfilePaymentPreferenceHistoryCreate {
	vppphc.mutation.SetMappingID(s)
	return vppphc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetNillableMappingID(s *string) *VendorProfilePaymentPreferenceHistoryCreate {
	if s != nil {
		vppphc.SetMappingID(*s)
	}
	return vppphc
}

// SetCreatedAt sets the "created_at" field.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetCreatedAt(t time.Time) *VendorProfilePaymentPreferenceHistoryCreate {
	vppphc.mutation.SetCreatedAt(t)
	return vppphc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetNillableCreatedAt(t *time.Time) *VendorProfilePaymentPreferenceHistoryCreate {
	if t != nil {
		vppphc.SetCreatedAt(*t)
	}
	return vppphc
}

// SetUpdatedAt sets the "updated_at" field.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetUpdatedAt(t time.Time) *VendorProfilePaymentPreferenceHistoryCreate {
	vppphc.mutation.SetUpdatedAt(t)
	return vppphc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetNillableUpdatedAt(t *time.Time) *VendorProfilePaymentPreferenceHistoryCreate {
	if t != nil {
		vppphc.SetUpdatedAt(*t)
	}
	return vppphc
}

// SetCreatedBy sets the "created_by" field.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetCreatedBy(s string) *VendorProfilePaymentPreferenceHistoryCreate {
	vppphc.mutation.SetCreatedBy(s)
	return vppphc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetNillableCreatedBy(s *string) *VendorProfilePaymentPreferenceHistoryCreate {
	if s != nil {
		vppphc.SetCreatedBy(*s)
	}
	return vppphc
}

// SetUpdatedBy sets the "updated_by" field.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetUpdatedBy(s string) *VendorProfilePaymentPreferenceHistoryCreate {
	vppphc.mutation.SetUpdatedBy(s)
	return vppphc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetNillableUpdatedBy(s *string) *VendorProfilePaymentPreferenceHistoryCreate {
	if s != nil {
		vppphc.SetUpdatedBy(*s)
	}
	return vppphc
}

// SetDeletedAt sets the "deleted_at" field.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetDeletedAt(t time.Time) *VendorProfilePaymentPreferenceHistoryCreate {
	vppphc.mutation.SetDeletedAt(t)
	return vppphc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetNillableDeletedAt(t *time.Time) *VendorProfilePaymentPreferenceHistoryCreate {
	if t != nil {
		vppphc.SetDeletedAt(*t)
	}
	return vppphc
}

// SetDeletedBy sets the "deleted_by" field.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetDeletedBy(s string) *VendorProfilePaymentPreferenceHistoryCreate {
	vppphc.mutation.SetDeletedBy(s)
	return vppphc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetNillableDeletedBy(s *string) *VendorProfilePaymentPreferenceHistoryCreate {
	if s != nil {
		vppphc.SetDeletedBy(*s)
	}
	return vppphc
}

// SetTags sets the "tags" field.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetTags(s []string) *VendorProfilePaymentPreferenceHistoryCreate {
	vppphc.mutation.SetTags(s)
	return vppphc
}

// SetOwnerID sets the "owner_id" field.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetOwnerID(s string) *VendorProfilePaymentPreferenceHistoryCreate {
	vppphc.mutation.SetOwnerID(s)
	return vppphc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetNillableOwnerID(s *string) *VendorProfilePaymentPreferenceHistoryCreate {
	if s != nil {
		vppphc.SetOwnerID(*s)
	}
	return vppphc
}

// SetVendorProfileID sets the "vendor_profile_id" field.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetVendorProfileID(s string) *VendorProfilePaymentPreferenceHistoryCreate {
	vppphc.mutation.SetVendorProfileID(s)
	return vppphc
}

// SetNillableVendorProfileID sets the "vendor_profile_id" field if the given value is not nil.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetNillableVendorProfileID(s *string) *VendorProfilePaymentPreferenceHistoryCreate {
	if s != nil {
		vppphc.SetVendorProfileID(*s)
	}
	return vppphc
}

// SetPreferred sets the "preferred" field.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetPreferred(b bool) *VendorProfilePaymentPreferenceHistoryCreate {
	vppphc.mutation.SetPreferred(b)
	return vppphc
}

// SetNillablePreferred sets the "preferred" field if the given value is not nil.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetNillablePreferred(b *bool) *VendorProfilePaymentPreferenceHistoryCreate {
	if b != nil {
		vppphc.SetPreferred(*b)
	}
	return vppphc
}

// SetMethod sets the "method" field.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetMethod(em enums.PaymentMethod) *VendorProfilePaymentPreferenceHistoryCreate {
	vppphc.mutation.SetMethod(em)
	return vppphc
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetNillableMethod(em *enums.PaymentMethod) *VendorProfilePaymentPreferenceHistoryCreate {
	if em != nil {
		vppphc.SetMethod(*em)
	}
	return vppphc
}

// SetID sets the "id" field.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetID(s string) *VendorProfilePaymentPreferenceHistoryCreate {
	vppphc.mutation.SetID(s)
	return vppphc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SetNillableID(s *string) *VendorProfilePaymentPreferenceHistoryCreate {
	if s != nil {
		vppphc.SetID(*s)
	}
	return vppphc
}

// Mutation returns the VendorProfilePaymentPreferenceHistoryMutation object of the builder.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) Mutation() *VendorProfilePaymentPreferenceHistoryMutation {
	return vppphc.mutation
}

// Save creates the VendorProfilePaymentPreferenceHistory in the database.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) Save(ctx context.Context) (*VendorProfilePaymentPreferenceHistory, error) {
	vppphc.defaults()
	return withHooks(ctx, vppphc.sqlSave, vppphc.mutation, vppphc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) SaveX(ctx context.Context) *VendorProfilePaymentPreferenceHistory {
	v, err := vppphc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) Exec(ctx context.Context) error {
	_, err := vppphc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) ExecX(ctx context.Context) {
	if err := vppphc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) defaults() {
	if _, ok := vppphc.mutation.HistoryTime(); !ok {
		v := vendorprofilepaymentpreferencehistory.DefaultHistoryTime()
		vppphc.mutation.SetHistoryTime(v)
	}
	if _, ok := vppphc.mutation.MappingID(); !ok {
		v := vendorprofilepaymentpreferencehistory.DefaultMappingID()
		vppphc.mutation.SetMappingID(v)
	}
	if _, ok := vppphc.mutation.CreatedAt(); !ok {
		v := vendorprofilepaymentpreferencehistory.DefaultCreatedAt()
		vppphc.mutation.SetCreatedAt(v)
	}
	if _, ok := vppphc.mutation.UpdatedAt(); !ok {
		v := vendorprofilepaymentpreferencehistory.DefaultUpdatedAt()
		vppphc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vppphc.mutation.Tags(); !ok {
		v := vendorprofilepaymentpreferencehistory.DefaultTags
		vppphc.mutation.SetTags(v)
	}
	if _, ok := vppphc.mutation.Preferred(); !ok {
		v := vendorprofilepaymentpreferencehistory.DefaultPreferred
		vppphc.mutation.SetPreferred(v)
	}
	if _, ok := vppphc.mutation.Method(); !ok {
		v := vendorprofilepaymentpreferencehistory.DefaultMethod
		vppphc.mutation.SetMethod(v)
	}
	if _, ok := vppphc.mutation.ID(); !ok {
		v := vendorprofilepaymentpreferencehistory.DefaultID()
		vppphc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) check() error {
	if _, ok := vppphc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "VendorProfilePaymentPreferenceHistory.history_time"`)}
	}
	if _, ok := vppphc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "VendorProfilePaymentPreferenceHistory.operation"`)}
	}
	if v, ok := vppphc.mutation.Operation(); ok {
		if err := vendorprofilepaymentpreferencehistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "VendorProfilePaymentPreferenceHistory.operation": %w`, err)}
		}
	}
	if _, ok := vppphc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "VendorProfilePaymentPreferenceHistory.mapping_id"`)}
	}
	if _, ok := vppphc.mutation.Preferred(); !ok {
		return &ValidationError{Name: "preferred", err: errors.New(`generated: missing required field "VendorProfilePaymentPreferenceHistory.preferred"`)}
	}
	if _, ok := vppphc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`generated: missing required field "VendorProfilePaymentPreferenceHistory.method"`)}
	}
	if v, ok := vppphc.mutation.Method(); ok {
		if err := vendorprofilepaymentpreferencehistory.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`generated: validator failed for field "VendorProfilePaymentPreferenceHistory.method": %w`, err)}
		}
	}
	return nil
}

func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) sqlSave(ctx context.Context) (*VendorProfilePaymentPreferenceHistory, error) {
	if err := vppphc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vppphc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vppphc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected VendorProfilePaymentPreferenceHistory.ID type: %T", _spec.ID.Value)
		}
	}
	vppphc.mutation.id = &_node.ID
	vppphc.mutation.done = true
	return _node, nil
}

func (vppphc *VendorProfilePaymentPreferenceHistoryCreate) createSpec() (*VendorProfilePaymentPreferenceHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &VendorProfilePaymentPreferenceHistory{config: vppphc.config}
		_spec = sqlgraph.NewCreateSpec(vendorprofilepaymentpreferencehistory.Table, sqlgraph.NewFieldSpec(vendorprofilepaymentpreferencehistory.FieldID, field.TypeString))
	)
	_spec.Schema = vppphc.schemaConfig.VendorProfilePaymentPreferenceHistory
	if id, ok := vppphc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vppphc.mutation.HistoryTime(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := vppphc.mutation.Ref(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := vppphc.mutation.Operation(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := vppphc.mutation.MappingID(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := vppphc.mutation.CreatedAt(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vppphc.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vppphc.mutation.CreatedBy(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := vppphc.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := vppphc.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := vppphc.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = &value
	}
	if value, ok := vppphc.mutation.Tags(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := vppphc.mutation.OwnerID(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := vppphc.mutation.VendorProfileID(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldVendorProfileID, field.TypeString, value)
		_node.VendorProfileID = value
	}
	if value, ok := vppphc.mutation.Preferred(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldPreferred, field.TypeBool, value)
		_node.Preferred = value
	}
	if value, ok := vppphc.mutation.Method(); ok {
		_spec.SetField(vendorprofilepaymentpreferencehistory.FieldMethod, field.TypeEnum, value)
		_node.Method = value
	}
	return _node, _spec
}

// VendorProfilePaymentPreferenceHistoryCreateBulk is the builder for creating many VendorProfilePaymentPreferenceHistory entities in bulk.
type VendorProfilePaymentPreferenceHistoryCreateBulk struct {
	config
	err      error
	builders []*VendorProfilePaymentPreferenceHistoryCreate
}

// Save creates the VendorProfilePaymentPreferenceHistory entities in the database.
func (vppphcb *VendorProfilePaymentPreferenceHistoryCreateBulk) Save(ctx context.Context) ([]*VendorProfilePaymentPreferenceHistory, error) {
	if vppphcb.err != nil {
		return nil, vppphcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vppphcb.builders))
	nodes := make([]*VendorProfilePaymentPreferenceHistory, len(vppphcb.builders))
	mutators := make([]Mutator, len(vppphcb.builders))
	for i := range vppphcb.builders {
		func(i int, root context.Context) {
			builder := vppphcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VendorProfilePaymentPreferenceHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vppphcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vppphcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vppphcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vppphcb *VendorProfilePaymentPreferenceHistoryCreateBulk) SaveX(ctx context.Context) []*VendorProfilePaymentPreferenceHistory {
	v, err := vppphcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vppphcb *VendorProfilePaymentPreferenceHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := vppphcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vppphcb *VendorProfilePaymentPreferenceHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := vppphcb.Exec(ctx); err != nil {
		panic(err)
	}
}
