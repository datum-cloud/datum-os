// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contactlisthistory"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// ContactListHistoryQuery is the builder for querying ContactListHistory entities.
type ContactListHistoryQuery struct {
	config
	ctx        *QueryContext
	order      []contactlisthistory.OrderOption
	inters     []Interceptor
	predicates []predicate.ContactListHistory
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*ContactListHistory) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ContactListHistoryQuery builder.
func (clhq *ContactListHistoryQuery) Where(ps ...predicate.ContactListHistory) *ContactListHistoryQuery {
	clhq.predicates = append(clhq.predicates, ps...)
	return clhq
}

// Limit the number of records to be returned by this query.
func (clhq *ContactListHistoryQuery) Limit(limit int) *ContactListHistoryQuery {
	clhq.ctx.Limit = &limit
	return clhq
}

// Offset to start from.
func (clhq *ContactListHistoryQuery) Offset(offset int) *ContactListHistoryQuery {
	clhq.ctx.Offset = &offset
	return clhq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (clhq *ContactListHistoryQuery) Unique(unique bool) *ContactListHistoryQuery {
	clhq.ctx.Unique = &unique
	return clhq
}

// Order specifies how the records should be ordered.
func (clhq *ContactListHistoryQuery) Order(o ...contactlisthistory.OrderOption) *ContactListHistoryQuery {
	clhq.order = append(clhq.order, o...)
	return clhq
}

// First returns the first ContactListHistory entity from the query.
// Returns a *NotFoundError when no ContactListHistory was found.
func (clhq *ContactListHistoryQuery) First(ctx context.Context) (*ContactListHistory, error) {
	nodes, err := clhq.Limit(1).All(setContextOp(ctx, clhq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{contactlisthistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (clhq *ContactListHistoryQuery) FirstX(ctx context.Context) *ContactListHistory {
	node, err := clhq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ContactListHistory ID from the query.
// Returns a *NotFoundError when no ContactListHistory ID was found.
func (clhq *ContactListHistoryQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = clhq.Limit(1).IDs(setContextOp(ctx, clhq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{contactlisthistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (clhq *ContactListHistoryQuery) FirstIDX(ctx context.Context) string {
	id, err := clhq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ContactListHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ContactListHistory entity is found.
// Returns a *NotFoundError when no ContactListHistory entities are found.
func (clhq *ContactListHistoryQuery) Only(ctx context.Context) (*ContactListHistory, error) {
	nodes, err := clhq.Limit(2).All(setContextOp(ctx, clhq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{contactlisthistory.Label}
	default:
		return nil, &NotSingularError{contactlisthistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (clhq *ContactListHistoryQuery) OnlyX(ctx context.Context) *ContactListHistory {
	node, err := clhq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ContactListHistory ID in the query.
// Returns a *NotSingularError when more than one ContactListHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (clhq *ContactListHistoryQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = clhq.Limit(2).IDs(setContextOp(ctx, clhq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{contactlisthistory.Label}
	default:
		err = &NotSingularError{contactlisthistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (clhq *ContactListHistoryQuery) OnlyIDX(ctx context.Context) string {
	id, err := clhq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ContactListHistories.
func (clhq *ContactListHistoryQuery) All(ctx context.Context) ([]*ContactListHistory, error) {
	ctx = setContextOp(ctx, clhq.ctx, ent.OpQueryAll)
	if err := clhq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ContactListHistory, *ContactListHistoryQuery]()
	return withInterceptors[[]*ContactListHistory](ctx, clhq, qr, clhq.inters)
}

// AllX is like All, but panics if an error occurs.
func (clhq *ContactListHistoryQuery) AllX(ctx context.Context) []*ContactListHistory {
	nodes, err := clhq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ContactListHistory IDs.
func (clhq *ContactListHistoryQuery) IDs(ctx context.Context) (ids []string, err error) {
	if clhq.ctx.Unique == nil && clhq.path != nil {
		clhq.Unique(true)
	}
	ctx = setContextOp(ctx, clhq.ctx, ent.OpQueryIDs)
	if err = clhq.Select(contactlisthistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (clhq *ContactListHistoryQuery) IDsX(ctx context.Context) []string {
	ids, err := clhq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (clhq *ContactListHistoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, clhq.ctx, ent.OpQueryCount)
	if err := clhq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, clhq, querierCount[*ContactListHistoryQuery](), clhq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (clhq *ContactListHistoryQuery) CountX(ctx context.Context) int {
	count, err := clhq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (clhq *ContactListHistoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, clhq.ctx, ent.OpQueryExist)
	switch _, err := clhq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (clhq *ContactListHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := clhq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ContactListHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (clhq *ContactListHistoryQuery) Clone() *ContactListHistoryQuery {
	if clhq == nil {
		return nil
	}
	return &ContactListHistoryQuery{
		config:     clhq.config,
		ctx:        clhq.ctx.Clone(),
		order:      append([]contactlisthistory.OrderOption{}, clhq.order...),
		inters:     append([]Interceptor{}, clhq.inters...),
		predicates: append([]predicate.ContactListHistory{}, clhq.predicates...),
		// clone intermediate query.
		sql:  clhq.sql.Clone(),
		path: clhq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		HistoryTime time.Time `json:"history_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ContactListHistory.Query().
//		GroupBy(contactlisthistory.FieldHistoryTime).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (clhq *ContactListHistoryQuery) GroupBy(field string, fields ...string) *ContactListHistoryGroupBy {
	clhq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ContactListHistoryGroupBy{build: clhq}
	grbuild.flds = &clhq.ctx.Fields
	grbuild.label = contactlisthistory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		HistoryTime time.Time `json:"history_time,omitempty"`
//	}
//
//	client.ContactListHistory.Query().
//		Select(contactlisthistory.FieldHistoryTime).
//		Scan(ctx, &v)
func (clhq *ContactListHistoryQuery) Select(fields ...string) *ContactListHistorySelect {
	clhq.ctx.Fields = append(clhq.ctx.Fields, fields...)
	sbuild := &ContactListHistorySelect{ContactListHistoryQuery: clhq}
	sbuild.label = contactlisthistory.Label
	sbuild.flds, sbuild.scan = &clhq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ContactListHistorySelect configured with the given aggregations.
func (clhq *ContactListHistoryQuery) Aggregate(fns ...AggregateFunc) *ContactListHistorySelect {
	return clhq.Select().Aggregate(fns...)
}

func (clhq *ContactListHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range clhq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, clhq); err != nil {
				return err
			}
		}
	}
	for _, f := range clhq.ctx.Fields {
		if !contactlisthistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if clhq.path != nil {
		prev, err := clhq.path(ctx)
		if err != nil {
			return err
		}
		clhq.sql = prev
	}
	if contactlisthistory.Policy == nil {
		return errors.New("generated: uninitialized contactlisthistory.Policy (forgotten import generated/runtime?)")
	}
	if err := contactlisthistory.Policy.EvalQuery(ctx, clhq); err != nil {
		return err
	}
	return nil
}

func (clhq *ContactListHistoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ContactListHistory, error) {
	var (
		nodes = []*ContactListHistory{}
		_spec = clhq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ContactListHistory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ContactListHistory{config: clhq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = clhq.schemaConfig.ContactListHistory
	ctx = internal.NewSchemaConfigContext(ctx, clhq.schemaConfig)
	if len(clhq.modifiers) > 0 {
		_spec.Modifiers = clhq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, clhq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	for i := range clhq.loadTotal {
		if err := clhq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (clhq *ContactListHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := clhq.querySpec()
	_spec.Node.Schema = clhq.schemaConfig.ContactListHistory
	ctx = internal.NewSchemaConfigContext(ctx, clhq.schemaConfig)
	if len(clhq.modifiers) > 0 {
		_spec.Modifiers = clhq.modifiers
	}
	_spec.Node.Columns = clhq.ctx.Fields
	if len(clhq.ctx.Fields) > 0 {
		_spec.Unique = clhq.ctx.Unique != nil && *clhq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, clhq.driver, _spec)
}

func (clhq *ContactListHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(contactlisthistory.Table, contactlisthistory.Columns, sqlgraph.NewFieldSpec(contactlisthistory.FieldID, field.TypeString))
	_spec.From = clhq.sql
	if unique := clhq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if clhq.path != nil {
		_spec.Unique = true
	}
	if fields := clhq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contactlisthistory.FieldID)
		for i := range fields {
			if fields[i] != contactlisthistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := clhq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := clhq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := clhq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := clhq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (clhq *ContactListHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(clhq.driver.Dialect())
	t1 := builder.Table(contactlisthistory.Table)
	columns := clhq.ctx.Fields
	if len(columns) == 0 {
		columns = contactlisthistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if clhq.sql != nil {
		selector = clhq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if clhq.ctx.Unique != nil && *clhq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(clhq.schemaConfig.ContactListHistory)
	ctx = internal.NewSchemaConfigContext(ctx, clhq.schemaConfig)
	selector.WithContext(ctx)
	for _, p := range clhq.predicates {
		p(selector)
	}
	for _, p := range clhq.order {
		p(selector)
	}
	if offset := clhq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := clhq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ContactListHistoryGroupBy is the group-by builder for ContactListHistory entities.
type ContactListHistoryGroupBy struct {
	selector
	build *ContactListHistoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (clhgb *ContactListHistoryGroupBy) Aggregate(fns ...AggregateFunc) *ContactListHistoryGroupBy {
	clhgb.fns = append(clhgb.fns, fns...)
	return clhgb
}

// Scan applies the selector query and scans the result into the given value.
func (clhgb *ContactListHistoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, clhgb.build.ctx, ent.OpQueryGroupBy)
	if err := clhgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ContactListHistoryQuery, *ContactListHistoryGroupBy](ctx, clhgb.build, clhgb, clhgb.build.inters, v)
}

func (clhgb *ContactListHistoryGroupBy) sqlScan(ctx context.Context, root *ContactListHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(clhgb.fns))
	for _, fn := range clhgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*clhgb.flds)+len(clhgb.fns))
		for _, f := range *clhgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*clhgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := clhgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ContactListHistorySelect is the builder for selecting fields of ContactListHistory entities.
type ContactListHistorySelect struct {
	*ContactListHistoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (clhs *ContactListHistorySelect) Aggregate(fns ...AggregateFunc) *ContactListHistorySelect {
	clhs.fns = append(clhs.fns, fns...)
	return clhs
}

// Scan applies the selector query and scans the result into the given value.
func (clhs *ContactListHistorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, clhs.ctx, ent.OpQuerySelect)
	if err := clhs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ContactListHistoryQuery, *ContactListHistorySelect](ctx, clhs.ContactListHistoryQuery, clhs, clhs.inters, v)
}

func (clhs *ContactListHistorySelect) sqlScan(ctx context.Context, root *ContactListHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(clhs.fns))
	for _, fn := range clhs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*clhs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := clhs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
