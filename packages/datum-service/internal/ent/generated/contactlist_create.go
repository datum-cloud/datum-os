// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contact"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contactlist"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contactlistmembership"
	"github.com/datum-cloud/datum-os/internal/ent/generated/event"
	"github.com/datum-cloud/datum-os/internal/ent/generated/integration"
	"github.com/datum-cloud/datum-os/internal/ent/generated/organization"
)

// ContactListCreate is the builder for creating a ContactList entity.
type ContactListCreate struct {
	config
	mutation *ContactListMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (clc *ContactListCreate) SetCreatedAt(t time.Time) *ContactListCreate {
	clc.mutation.SetCreatedAt(t)
	return clc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (clc *ContactListCreate) SetNillableCreatedAt(t *time.Time) *ContactListCreate {
	if t != nil {
		clc.SetCreatedAt(*t)
	}
	return clc
}

// SetUpdatedAt sets the "updated_at" field.
func (clc *ContactListCreate) SetUpdatedAt(t time.Time) *ContactListCreate {
	clc.mutation.SetUpdatedAt(t)
	return clc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (clc *ContactListCreate) SetNillableUpdatedAt(t *time.Time) *ContactListCreate {
	if t != nil {
		clc.SetUpdatedAt(*t)
	}
	return clc
}

// SetCreatedBy sets the "created_by" field.
func (clc *ContactListCreate) SetCreatedBy(s string) *ContactListCreate {
	clc.mutation.SetCreatedBy(s)
	return clc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (clc *ContactListCreate) SetNillableCreatedBy(s *string) *ContactListCreate {
	if s != nil {
		clc.SetCreatedBy(*s)
	}
	return clc
}

// SetUpdatedBy sets the "updated_by" field.
func (clc *ContactListCreate) SetUpdatedBy(s string) *ContactListCreate {
	clc.mutation.SetUpdatedBy(s)
	return clc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (clc *ContactListCreate) SetNillableUpdatedBy(s *string) *ContactListCreate {
	if s != nil {
		clc.SetUpdatedBy(*s)
	}
	return clc
}

// SetDeletedAt sets the "deleted_at" field.
func (clc *ContactListCreate) SetDeletedAt(t time.Time) *ContactListCreate {
	clc.mutation.SetDeletedAt(t)
	return clc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (clc *ContactListCreate) SetNillableDeletedAt(t *time.Time) *ContactListCreate {
	if t != nil {
		clc.SetDeletedAt(*t)
	}
	return clc
}

// SetDeletedBy sets the "deleted_by" field.
func (clc *ContactListCreate) SetDeletedBy(s string) *ContactListCreate {
	clc.mutation.SetDeletedBy(s)
	return clc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (clc *ContactListCreate) SetNillableDeletedBy(s *string) *ContactListCreate {
	if s != nil {
		clc.SetDeletedBy(*s)
	}
	return clc
}

// SetMappingID sets the "mapping_id" field.
func (clc *ContactListCreate) SetMappingID(s string) *ContactListCreate {
	clc.mutation.SetMappingID(s)
	return clc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (clc *ContactListCreate) SetNillableMappingID(s *string) *ContactListCreate {
	if s != nil {
		clc.SetMappingID(*s)
	}
	return clc
}

// SetTags sets the "tags" field.
func (clc *ContactListCreate) SetTags(s []string) *ContactListCreate {
	clc.mutation.SetTags(s)
	return clc
}

// SetOwnerID sets the "owner_id" field.
func (clc *ContactListCreate) SetOwnerID(s string) *ContactListCreate {
	clc.mutation.SetOwnerID(s)
	return clc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (clc *ContactListCreate) SetNillableOwnerID(s *string) *ContactListCreate {
	if s != nil {
		clc.SetOwnerID(*s)
	}
	return clc
}

// SetName sets the "name" field.
func (clc *ContactListCreate) SetName(s string) *ContactListCreate {
	clc.mutation.SetName(s)
	return clc
}

// SetVisibility sets the "visibility" field.
func (clc *ContactListCreate) SetVisibility(s string) *ContactListCreate {
	clc.mutation.SetVisibility(s)
	return clc
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (clc *ContactListCreate) SetNillableVisibility(s *string) *ContactListCreate {
	if s != nil {
		clc.SetVisibility(*s)
	}
	return clc
}

// SetDisplayName sets the "display_name" field.
func (clc *ContactListCreate) SetDisplayName(s string) *ContactListCreate {
	clc.mutation.SetDisplayName(s)
	return clc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (clc *ContactListCreate) SetNillableDisplayName(s *string) *ContactListCreate {
	if s != nil {
		clc.SetDisplayName(*s)
	}
	return clc
}

// SetDescription sets the "description" field.
func (clc *ContactListCreate) SetDescription(s string) *ContactListCreate {
	clc.mutation.SetDescription(s)
	return clc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (clc *ContactListCreate) SetNillableDescription(s *string) *ContactListCreate {
	if s != nil {
		clc.SetDescription(*s)
	}
	return clc
}

// SetID sets the "id" field.
func (clc *ContactListCreate) SetID(s string) *ContactListCreate {
	clc.mutation.SetID(s)
	return clc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (clc *ContactListCreate) SetNillableID(s *string) *ContactListCreate {
	if s != nil {
		clc.SetID(*s)
	}
	return clc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (clc *ContactListCreate) SetOwner(o *Organization) *ContactListCreate {
	return clc.SetOwnerID(o.ID)
}

// AddContactIDs adds the "contacts" edge to the Contact entity by IDs.
func (clc *ContactListCreate) AddContactIDs(ids ...string) *ContactListCreate {
	clc.mutation.AddContactIDs(ids...)
	return clc
}

// AddContacts adds the "contacts" edges to the Contact entity.
func (clc *ContactListCreate) AddContacts(c ...*Contact) *ContactListCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return clc.AddContactIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (clc *ContactListCreate) AddEventIDs(ids ...string) *ContactListCreate {
	clc.mutation.AddEventIDs(ids...)
	return clc
}

// AddEvents adds the "events" edges to the Event entity.
func (clc *ContactListCreate) AddEvents(e ...*Event) *ContactListCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return clc.AddEventIDs(ids...)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (clc *ContactListCreate) AddIntegrationIDs(ids ...string) *ContactListCreate {
	clc.mutation.AddIntegrationIDs(ids...)
	return clc
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (clc *ContactListCreate) AddIntegrations(i ...*Integration) *ContactListCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return clc.AddIntegrationIDs(ids...)
}

// AddContactListMemberIDs adds the "contact_list_members" edge to the ContactListMembership entity by IDs.
func (clc *ContactListCreate) AddContactListMemberIDs(ids ...string) *ContactListCreate {
	clc.mutation.AddContactListMemberIDs(ids...)
	return clc
}

// AddContactListMembers adds the "contact_list_members" edges to the ContactListMembership entity.
func (clc *ContactListCreate) AddContactListMembers(c ...*ContactListMembership) *ContactListCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return clc.AddContactListMemberIDs(ids...)
}

// Mutation returns the ContactListMutation object of the builder.
func (clc *ContactListCreate) Mutation() *ContactListMutation {
	return clc.mutation
}

// Save creates the ContactList in the database.
func (clc *ContactListCreate) Save(ctx context.Context) (*ContactList, error) {
	if err := clc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, clc.sqlSave, clc.mutation, clc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (clc *ContactListCreate) SaveX(ctx context.Context) *ContactList {
	v, err := clc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clc *ContactListCreate) Exec(ctx context.Context) error {
	_, err := clc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clc *ContactListCreate) ExecX(ctx context.Context) {
	if err := clc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clc *ContactListCreate) defaults() error {
	if _, ok := clc.mutation.CreatedAt(); !ok {
		if contactlist.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized contactlist.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := contactlist.DefaultCreatedAt()
		clc.mutation.SetCreatedAt(v)
	}
	if _, ok := clc.mutation.UpdatedAt(); !ok {
		if contactlist.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized contactlist.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := contactlist.DefaultUpdatedAt()
		clc.mutation.SetUpdatedAt(v)
	}
	if _, ok := clc.mutation.MappingID(); !ok {
		if contactlist.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized contactlist.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := contactlist.DefaultMappingID()
		clc.mutation.SetMappingID(v)
	}
	if _, ok := clc.mutation.Tags(); !ok {
		v := contactlist.DefaultTags
		clc.mutation.SetTags(v)
	}
	if _, ok := clc.mutation.Visibility(); !ok {
		v := contactlist.DefaultVisibility
		clc.mutation.SetVisibility(v)
	}
	if _, ok := clc.mutation.DisplayName(); !ok {
		v := contactlist.DefaultDisplayName
		clc.mutation.SetDisplayName(v)
	}
	if _, ok := clc.mutation.ID(); !ok {
		if contactlist.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized contactlist.DefaultID (forgotten import generated/runtime?)")
		}
		v := contactlist.DefaultID()
		clc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (clc *ContactListCreate) check() error {
	if _, ok := clc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "ContactList.mapping_id"`)}
	}
	if v, ok := clc.mutation.OwnerID(); ok {
		if err := contactlist.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "ContactList.owner_id": %w`, err)}
		}
	}
	if _, ok := clc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "ContactList.name"`)}
	}
	if v, ok := clc.mutation.Name(); ok {
		if err := contactlist.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "ContactList.name": %w`, err)}
		}
	}
	if _, ok := clc.mutation.Visibility(); !ok {
		return &ValidationError{Name: "visibility", err: errors.New(`generated: missing required field "ContactList.visibility"`)}
	}
	if _, ok := clc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`generated: missing required field "ContactList.display_name"`)}
	}
	if v, ok := clc.mutation.DisplayName(); ok {
		if err := contactlist.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "ContactList.display_name": %w`, err)}
		}
	}
	return nil
}

func (clc *ContactListCreate) sqlSave(ctx context.Context) (*ContactList, error) {
	if err := clc.check(); err != nil {
		return nil, err
	}
	_node, _spec := clc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ContactList.ID type: %T", _spec.ID.Value)
		}
	}
	clc.mutation.id = &_node.ID
	clc.mutation.done = true
	return _node, nil
}

func (clc *ContactListCreate) createSpec() (*ContactList, *sqlgraph.CreateSpec) {
	var (
		_node = &ContactList{config: clc.config}
		_spec = sqlgraph.NewCreateSpec(contactlist.Table, sqlgraph.NewFieldSpec(contactlist.FieldID, field.TypeString))
	)
	_spec.Schema = clc.schemaConfig.ContactList
	if id, ok := clc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := clc.mutation.CreatedAt(); ok {
		_spec.SetField(contactlist.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := clc.mutation.UpdatedAt(); ok {
		_spec.SetField(contactlist.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := clc.mutation.CreatedBy(); ok {
		_spec.SetField(contactlist.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := clc.mutation.UpdatedBy(); ok {
		_spec.SetField(contactlist.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := clc.mutation.DeletedAt(); ok {
		_spec.SetField(contactlist.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := clc.mutation.DeletedBy(); ok {
		_spec.SetField(contactlist.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = &value
	}
	if value, ok := clc.mutation.MappingID(); ok {
		_spec.SetField(contactlist.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := clc.mutation.Tags(); ok {
		_spec.SetField(contactlist.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := clc.mutation.Name(); ok {
		_spec.SetField(contactlist.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := clc.mutation.Visibility(); ok {
		_spec.SetField(contactlist.FieldVisibility, field.TypeString, value)
		_node.Visibility = value
	}
	if value, ok := clc.mutation.DisplayName(); ok {
		_spec.SetField(contactlist.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := clc.mutation.Description(); ok {
		_spec.SetField(contactlist.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := clc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contactlist.OwnerTable,
			Columns: []string{contactlist.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = clc.schemaConfig.ContactList
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := clc.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contactlist.ContactsTable,
			Columns: contactlist.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = clc.schemaConfig.ContactListMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ContactListMembershipCreate{config: clc.config, mutation: newContactListMembershipMutation(clc.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := clc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactlist.EventsTable,
			Columns: []string{contactlist.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = clc.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := clc.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contactlist.IntegrationsTable,
			Columns: []string{contactlist.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = clc.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := clc.mutation.ContactListMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contactlist.ContactListMembersTable,
			Columns: []string{contactlist.ContactListMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contactlistmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = clc.schemaConfig.ContactListMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ContactListCreateBulk is the builder for creating many ContactList entities in bulk.
type ContactListCreateBulk struct {
	config
	err      error
	builders []*ContactListCreate
}

// Save creates the ContactList entities in the database.
func (clcb *ContactListCreateBulk) Save(ctx context.Context) ([]*ContactList, error) {
	if clcb.err != nil {
		return nil, clcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(clcb.builders))
	nodes := make([]*ContactList, len(clcb.builders))
	mutators := make([]Mutator, len(clcb.builders))
	for i := range clcb.builders {
		func(i int, root context.Context) {
			builder := clcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContactListMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clcb *ContactListCreateBulk) SaveX(ctx context.Context) []*ContactList {
	v, err := clcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clcb *ContactListCreateBulk) Exec(ctx context.Context) error {
	_, err := clcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clcb *ContactListCreateBulk) ExecX(ctx context.Context) {
	if err := clcb.Exec(ctx); err != nil {
		panic(err)
	}
}
