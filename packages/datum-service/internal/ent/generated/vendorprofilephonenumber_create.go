// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/event"
	"github.com/datum-cloud/datum-os/internal/ent/generated/phonenumber"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofile"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilephonenumber"
)

// VendorProfilePhoneNumberCreate is the builder for creating a VendorProfilePhoneNumber entity.
type VendorProfilePhoneNumberCreate struct {
	config
	mutation *VendorProfilePhoneNumberMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (vppnc *VendorProfilePhoneNumberCreate) SetCreatedAt(t time.Time) *VendorProfilePhoneNumberCreate {
	vppnc.mutation.SetCreatedAt(t)
	return vppnc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vppnc *VendorProfilePhoneNumberCreate) SetNillableCreatedAt(t *time.Time) *VendorProfilePhoneNumberCreate {
	if t != nil {
		vppnc.SetCreatedAt(*t)
	}
	return vppnc
}

// SetUpdatedAt sets the "updated_at" field.
func (vppnc *VendorProfilePhoneNumberCreate) SetUpdatedAt(t time.Time) *VendorProfilePhoneNumberCreate {
	vppnc.mutation.SetUpdatedAt(t)
	return vppnc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vppnc *VendorProfilePhoneNumberCreate) SetNillableUpdatedAt(t *time.Time) *VendorProfilePhoneNumberCreate {
	if t != nil {
		vppnc.SetUpdatedAt(*t)
	}
	return vppnc
}

// SetCreatedBy sets the "created_by" field.
func (vppnc *VendorProfilePhoneNumberCreate) SetCreatedBy(s string) *VendorProfilePhoneNumberCreate {
	vppnc.mutation.SetCreatedBy(s)
	return vppnc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vppnc *VendorProfilePhoneNumberCreate) SetNillableCreatedBy(s *string) *VendorProfilePhoneNumberCreate {
	if s != nil {
		vppnc.SetCreatedBy(*s)
	}
	return vppnc
}

// SetUpdatedBy sets the "updated_by" field.
func (vppnc *VendorProfilePhoneNumberCreate) SetUpdatedBy(s string) *VendorProfilePhoneNumberCreate {
	vppnc.mutation.SetUpdatedBy(s)
	return vppnc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vppnc *VendorProfilePhoneNumberCreate) SetNillableUpdatedBy(s *string) *VendorProfilePhoneNumberCreate {
	if s != nil {
		vppnc.SetUpdatedBy(*s)
	}
	return vppnc
}

// SetMappingID sets the "mapping_id" field.
func (vppnc *VendorProfilePhoneNumberCreate) SetMappingID(s string) *VendorProfilePhoneNumberCreate {
	vppnc.mutation.SetMappingID(s)
	return vppnc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (vppnc *VendorProfilePhoneNumberCreate) SetNillableMappingID(s *string) *VendorProfilePhoneNumberCreate {
	if s != nil {
		vppnc.SetMappingID(*s)
	}
	return vppnc
}

// SetDeletedAt sets the "deleted_at" field.
func (vppnc *VendorProfilePhoneNumberCreate) SetDeletedAt(t time.Time) *VendorProfilePhoneNumberCreate {
	vppnc.mutation.SetDeletedAt(t)
	return vppnc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vppnc *VendorProfilePhoneNumberCreate) SetNillableDeletedAt(t *time.Time) *VendorProfilePhoneNumberCreate {
	if t != nil {
		vppnc.SetDeletedAt(*t)
	}
	return vppnc
}

// SetDeletedBy sets the "deleted_by" field.
func (vppnc *VendorProfilePhoneNumberCreate) SetDeletedBy(s string) *VendorProfilePhoneNumberCreate {
	vppnc.mutation.SetDeletedBy(s)
	return vppnc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vppnc *VendorProfilePhoneNumberCreate) SetNillableDeletedBy(s *string) *VendorProfilePhoneNumberCreate {
	if s != nil {
		vppnc.SetDeletedBy(*s)
	}
	return vppnc
}

// SetVendorProfileID sets the "vendor_profile_id" field.
func (vppnc *VendorProfilePhoneNumberCreate) SetVendorProfileID(s string) *VendorProfilePhoneNumberCreate {
	vppnc.mutation.SetVendorProfileID(s)
	return vppnc
}

// SetPhoneNumberID sets the "phone_number_id" field.
func (vppnc *VendorProfilePhoneNumberCreate) SetPhoneNumberID(s string) *VendorProfilePhoneNumberCreate {
	vppnc.mutation.SetPhoneNumberID(s)
	return vppnc
}

// SetID sets the "id" field.
func (vppnc *VendorProfilePhoneNumberCreate) SetID(s string) *VendorProfilePhoneNumberCreate {
	vppnc.mutation.SetID(s)
	return vppnc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vppnc *VendorProfilePhoneNumberCreate) SetNillableID(s *string) *VendorProfilePhoneNumberCreate {
	if s != nil {
		vppnc.SetID(*s)
	}
	return vppnc
}

// SetPhoneNumber sets the "phone_number" edge to the PhoneNumber entity.
func (vppnc *VendorProfilePhoneNumberCreate) SetPhoneNumber(p *PhoneNumber) *VendorProfilePhoneNumberCreate {
	return vppnc.SetPhoneNumberID(p.ID)
}

// SetProfileID sets the "profile" edge to the VendorProfile entity by ID.
func (vppnc *VendorProfilePhoneNumberCreate) SetProfileID(id string) *VendorProfilePhoneNumberCreate {
	vppnc.mutation.SetProfileID(id)
	return vppnc
}

// SetProfile sets the "profile" edge to the VendorProfile entity.
func (vppnc *VendorProfilePhoneNumberCreate) SetProfile(v *VendorProfile) *VendorProfilePhoneNumberCreate {
	return vppnc.SetProfileID(v.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (vppnc *VendorProfilePhoneNumberCreate) AddEventIDs(ids ...string) *VendorProfilePhoneNumberCreate {
	vppnc.mutation.AddEventIDs(ids...)
	return vppnc
}

// AddEvents adds the "events" edges to the Event entity.
func (vppnc *VendorProfilePhoneNumberCreate) AddEvents(e ...*Event) *VendorProfilePhoneNumberCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vppnc.AddEventIDs(ids...)
}

// Mutation returns the VendorProfilePhoneNumberMutation object of the builder.
func (vppnc *VendorProfilePhoneNumberCreate) Mutation() *VendorProfilePhoneNumberMutation {
	return vppnc.mutation
}

// Save creates the VendorProfilePhoneNumber in the database.
func (vppnc *VendorProfilePhoneNumberCreate) Save(ctx context.Context) (*VendorProfilePhoneNumber, error) {
	if err := vppnc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, vppnc.sqlSave, vppnc.mutation, vppnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vppnc *VendorProfilePhoneNumberCreate) SaveX(ctx context.Context) *VendorProfilePhoneNumber {
	v, err := vppnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vppnc *VendorProfilePhoneNumberCreate) Exec(ctx context.Context) error {
	_, err := vppnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vppnc *VendorProfilePhoneNumberCreate) ExecX(ctx context.Context) {
	if err := vppnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vppnc *VendorProfilePhoneNumberCreate) defaults() error {
	if _, ok := vppnc.mutation.CreatedAt(); !ok {
		if vendorprofilephonenumber.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized vendorprofilephonenumber.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := vendorprofilephonenumber.DefaultCreatedAt()
		vppnc.mutation.SetCreatedAt(v)
	}
	if _, ok := vppnc.mutation.UpdatedAt(); !ok {
		if vendorprofilephonenumber.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized vendorprofilephonenumber.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := vendorprofilephonenumber.DefaultUpdatedAt()
		vppnc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vppnc.mutation.MappingID(); !ok {
		if vendorprofilephonenumber.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized vendorprofilephonenumber.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := vendorprofilephonenumber.DefaultMappingID()
		vppnc.mutation.SetMappingID(v)
	}
	if _, ok := vppnc.mutation.ID(); !ok {
		if vendorprofilephonenumber.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized vendorprofilephonenumber.DefaultID (forgotten import generated/runtime?)")
		}
		v := vendorprofilephonenumber.DefaultID()
		vppnc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vppnc *VendorProfilePhoneNumberCreate) check() error {
	if _, ok := vppnc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "VendorProfilePhoneNumber.mapping_id"`)}
	}
	if _, ok := vppnc.mutation.VendorProfileID(); !ok {
		return &ValidationError{Name: "vendor_profile_id", err: errors.New(`generated: missing required field "VendorProfilePhoneNumber.vendor_profile_id"`)}
	}
	if v, ok := vppnc.mutation.VendorProfileID(); ok {
		if err := vendorprofilephonenumber.VendorProfileIDValidator(v); err != nil {
			return &ValidationError{Name: "vendor_profile_id", err: fmt.Errorf(`generated: validator failed for field "VendorProfilePhoneNumber.vendor_profile_id": %w`, err)}
		}
	}
	if _, ok := vppnc.mutation.PhoneNumberID(); !ok {
		return &ValidationError{Name: "phone_number_id", err: errors.New(`generated: missing required field "VendorProfilePhoneNumber.phone_number_id"`)}
	}
	if v, ok := vppnc.mutation.PhoneNumberID(); ok {
		if err := vendorprofilephonenumber.PhoneNumberIDValidator(v); err != nil {
			return &ValidationError{Name: "phone_number_id", err: fmt.Errorf(`generated: validator failed for field "VendorProfilePhoneNumber.phone_number_id": %w`, err)}
		}
	}
	if len(vppnc.mutation.PhoneNumberIDs()) == 0 {
		return &ValidationError{Name: "phone_number", err: errors.New(`generated: missing required edge "VendorProfilePhoneNumber.phone_number"`)}
	}
	if len(vppnc.mutation.ProfileIDs()) == 0 {
		return &ValidationError{Name: "profile", err: errors.New(`generated: missing required edge "VendorProfilePhoneNumber.profile"`)}
	}
	return nil
}

func (vppnc *VendorProfilePhoneNumberCreate) sqlSave(ctx context.Context) (*VendorProfilePhoneNumber, error) {
	if err := vppnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vppnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vppnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected VendorProfilePhoneNumber.ID type: %T", _spec.ID.Value)
		}
	}
	vppnc.mutation.id = &_node.ID
	vppnc.mutation.done = true
	return _node, nil
}

func (vppnc *VendorProfilePhoneNumberCreate) createSpec() (*VendorProfilePhoneNumber, *sqlgraph.CreateSpec) {
	var (
		_node = &VendorProfilePhoneNumber{config: vppnc.config}
		_spec = sqlgraph.NewCreateSpec(vendorprofilephonenumber.Table, sqlgraph.NewFieldSpec(vendorprofilephonenumber.FieldID, field.TypeString))
	)
	_spec.Schema = vppnc.schemaConfig.VendorProfilePhoneNumber
	if id, ok := vppnc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vppnc.mutation.CreatedAt(); ok {
		_spec.SetField(vendorprofilephonenumber.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vppnc.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofilephonenumber.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vppnc.mutation.CreatedBy(); ok {
		_spec.SetField(vendorprofilephonenumber.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := vppnc.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofilephonenumber.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := vppnc.mutation.MappingID(); ok {
		_spec.SetField(vendorprofilephonenumber.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := vppnc.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofilephonenumber.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := vppnc.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofilephonenumber.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = &value
	}
	if nodes := vppnc.mutation.PhoneNumberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vendorprofilephonenumber.PhoneNumberTable,
			Columns: []string{vendorprofilephonenumber.PhoneNumberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phonenumber.FieldID, field.TypeString),
			},
		}
		edge.Schema = vppnc.schemaConfig.VendorProfilePhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PhoneNumberID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vppnc.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vendorprofilephonenumber.ProfileTable,
			Columns: []string{vendorprofilephonenumber.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = vppnc.schemaConfig.VendorProfilePhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VendorProfileID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vppnc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendorprofilephonenumber.EventsTable,
			Columns: []string{vendorprofilephonenumber.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = vppnc.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VendorProfilePhoneNumberCreateBulk is the builder for creating many VendorProfilePhoneNumber entities in bulk.
type VendorProfilePhoneNumberCreateBulk struct {
	config
	err      error
	builders []*VendorProfilePhoneNumberCreate
}

// Save creates the VendorProfilePhoneNumber entities in the database.
func (vppncb *VendorProfilePhoneNumberCreateBulk) Save(ctx context.Context) ([]*VendorProfilePhoneNumber, error) {
	if vppncb.err != nil {
		return nil, vppncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vppncb.builders))
	nodes := make([]*VendorProfilePhoneNumber, len(vppncb.builders))
	mutators := make([]Mutator, len(vppncb.builders))
	for i := range vppncb.builders {
		func(i int, root context.Context) {
			builder := vppncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VendorProfilePhoneNumberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vppncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vppncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vppncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vppncb *VendorProfilePhoneNumberCreateBulk) SaveX(ctx context.Context) []*VendorProfilePhoneNumber {
	v, err := vppncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vppncb *VendorProfilePhoneNumberCreateBulk) Exec(ctx context.Context) error {
	_, err := vppncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vppncb *VendorProfilePhoneNumberCreateBulk) ExecX(ctx context.Context) {
	if err := vppncb.Exec(ctx); err != nil {
		panic(err)
	}
}
