// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilephonenumberhistory"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// VendorProfilePhoneNumberHistoryUpdate is the builder for updating VendorProfilePhoneNumberHistory entities.
type VendorProfilePhoneNumberHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *VendorProfilePhoneNumberHistoryMutation
}

// Where appends a list predicates to the VendorProfilePhoneNumberHistoryUpdate builder.
func (vppnhu *VendorProfilePhoneNumberHistoryUpdate) Where(ps ...predicate.VendorProfilePhoneNumberHistory) *VendorProfilePhoneNumberHistoryUpdate {
	vppnhu.mutation.Where(ps...)
	return vppnhu
}

// SetUpdatedAt sets the "updated_at" field.
func (vppnhu *VendorProfilePhoneNumberHistoryUpdate) SetUpdatedAt(t time.Time) *VendorProfilePhoneNumberHistoryUpdate {
	vppnhu.mutation.SetUpdatedAt(t)
	return vppnhu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vppnhu *VendorProfilePhoneNumberHistoryUpdate) ClearUpdatedAt() *VendorProfilePhoneNumberHistoryUpdate {
	vppnhu.mutation.ClearUpdatedAt()
	return vppnhu
}

// SetUpdatedBy sets the "updated_by" field.
func (vppnhu *VendorProfilePhoneNumberHistoryUpdate) SetUpdatedBy(s string) *VendorProfilePhoneNumberHistoryUpdate {
	vppnhu.mutation.SetUpdatedBy(s)
	return vppnhu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vppnhu *VendorProfilePhoneNumberHistoryUpdate) SetNillableUpdatedBy(s *string) *VendorProfilePhoneNumberHistoryUpdate {
	if s != nil {
		vppnhu.SetUpdatedBy(*s)
	}
	return vppnhu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vppnhu *VendorProfilePhoneNumberHistoryUpdate) ClearUpdatedBy() *VendorProfilePhoneNumberHistoryUpdate {
	vppnhu.mutation.ClearUpdatedBy()
	return vppnhu
}

// SetDeletedAt sets the "deleted_at" field.
func (vppnhu *VendorProfilePhoneNumberHistoryUpdate) SetDeletedAt(t time.Time) *VendorProfilePhoneNumberHistoryUpdate {
	vppnhu.mutation.SetDeletedAt(t)
	return vppnhu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vppnhu *VendorProfilePhoneNumberHistoryUpdate) SetNillableDeletedAt(t *time.Time) *VendorProfilePhoneNumberHistoryUpdate {
	if t != nil {
		vppnhu.SetDeletedAt(*t)
	}
	return vppnhu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vppnhu *VendorProfilePhoneNumberHistoryUpdate) ClearDeletedAt() *VendorProfilePhoneNumberHistoryUpdate {
	vppnhu.mutation.ClearDeletedAt()
	return vppnhu
}

// SetDeletedBy sets the "deleted_by" field.
func (vppnhu *VendorProfilePhoneNumberHistoryUpdate) SetDeletedBy(s string) *VendorProfilePhoneNumberHistoryUpdate {
	vppnhu.mutation.SetDeletedBy(s)
	return vppnhu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vppnhu *VendorProfilePhoneNumberHistoryUpdate) SetNillableDeletedBy(s *string) *VendorProfilePhoneNumberHistoryUpdate {
	if s != nil {
		vppnhu.SetDeletedBy(*s)
	}
	return vppnhu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (vppnhu *VendorProfilePhoneNumberHistoryUpdate) ClearDeletedBy() *VendorProfilePhoneNumberHistoryUpdate {
	vppnhu.mutation.ClearDeletedBy()
	return vppnhu
}

// Mutation returns the VendorProfilePhoneNumberHistoryMutation object of the builder.
func (vppnhu *VendorProfilePhoneNumberHistoryUpdate) Mutation() *VendorProfilePhoneNumberHistoryMutation {
	return vppnhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vppnhu *VendorProfilePhoneNumberHistoryUpdate) Save(ctx context.Context) (int, error) {
	vppnhu.defaults()
	return withHooks(ctx, vppnhu.sqlSave, vppnhu.mutation, vppnhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vppnhu *VendorProfilePhoneNumberHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := vppnhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vppnhu *VendorProfilePhoneNumberHistoryUpdate) Exec(ctx context.Context) error {
	_, err := vppnhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vppnhu *VendorProfilePhoneNumberHistoryUpdate) ExecX(ctx context.Context) {
	if err := vppnhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vppnhu *VendorProfilePhoneNumberHistoryUpdate) defaults() {
	if _, ok := vppnhu.mutation.UpdatedAt(); !ok && !vppnhu.mutation.UpdatedAtCleared() {
		v := vendorprofilephonenumberhistory.UpdateDefaultUpdatedAt()
		vppnhu.mutation.SetUpdatedAt(v)
	}
}

func (vppnhu *VendorProfilePhoneNumberHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(vendorprofilephonenumberhistory.Table, vendorprofilephonenumberhistory.Columns, sqlgraph.NewFieldSpec(vendorprofilephonenumberhistory.FieldID, field.TypeString))
	if ps := vppnhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vppnhu.mutation.RefCleared() {
		_spec.ClearField(vendorprofilephonenumberhistory.FieldRef, field.TypeString)
	}
	if vppnhu.mutation.CreatedAtCleared() {
		_spec.ClearField(vendorprofilephonenumberhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vppnhu.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofilephonenumberhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if vppnhu.mutation.UpdatedAtCleared() {
		_spec.ClearField(vendorprofilephonenumberhistory.FieldUpdatedAt, field.TypeTime)
	}
	if vppnhu.mutation.CreatedByCleared() {
		_spec.ClearField(vendorprofilephonenumberhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vppnhu.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofilephonenumberhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if vppnhu.mutation.UpdatedByCleared() {
		_spec.ClearField(vendorprofilephonenumberhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vppnhu.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofilephonenumberhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if vppnhu.mutation.DeletedAtCleared() {
		_spec.ClearField(vendorprofilephonenumberhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vppnhu.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofilephonenumberhistory.FieldDeletedBy, field.TypeString, value)
	}
	if vppnhu.mutation.DeletedByCleared() {
		_spec.ClearField(vendorprofilephonenumberhistory.FieldDeletedBy, field.TypeString)
	}
	_spec.Node.Schema = vppnhu.schemaConfig.VendorProfilePhoneNumberHistory
	ctx = internal.NewSchemaConfigContext(ctx, vppnhu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, vppnhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorprofilephonenumberhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vppnhu.mutation.done = true
	return n, nil
}

// VendorProfilePhoneNumberHistoryUpdateOne is the builder for updating a single VendorProfilePhoneNumberHistory entity.
type VendorProfilePhoneNumberHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VendorProfilePhoneNumberHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vppnhuo *VendorProfilePhoneNumberHistoryUpdateOne) SetUpdatedAt(t time.Time) *VendorProfilePhoneNumberHistoryUpdateOne {
	vppnhuo.mutation.SetUpdatedAt(t)
	return vppnhuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vppnhuo *VendorProfilePhoneNumberHistoryUpdateOne) ClearUpdatedAt() *VendorProfilePhoneNumberHistoryUpdateOne {
	vppnhuo.mutation.ClearUpdatedAt()
	return vppnhuo
}

// SetUpdatedBy sets the "updated_by" field.
func (vppnhuo *VendorProfilePhoneNumberHistoryUpdateOne) SetUpdatedBy(s string) *VendorProfilePhoneNumberHistoryUpdateOne {
	vppnhuo.mutation.SetUpdatedBy(s)
	return vppnhuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vppnhuo *VendorProfilePhoneNumberHistoryUpdateOne) SetNillableUpdatedBy(s *string) *VendorProfilePhoneNumberHistoryUpdateOne {
	if s != nil {
		vppnhuo.SetUpdatedBy(*s)
	}
	return vppnhuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vppnhuo *VendorProfilePhoneNumberHistoryUpdateOne) ClearUpdatedBy() *VendorProfilePhoneNumberHistoryUpdateOne {
	vppnhuo.mutation.ClearUpdatedBy()
	return vppnhuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vppnhuo *VendorProfilePhoneNumberHistoryUpdateOne) SetDeletedAt(t time.Time) *VendorProfilePhoneNumberHistoryUpdateOne {
	vppnhuo.mutation.SetDeletedAt(t)
	return vppnhuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vppnhuo *VendorProfilePhoneNumberHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *VendorProfilePhoneNumberHistoryUpdateOne {
	if t != nil {
		vppnhuo.SetDeletedAt(*t)
	}
	return vppnhuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vppnhuo *VendorProfilePhoneNumberHistoryUpdateOne) ClearDeletedAt() *VendorProfilePhoneNumberHistoryUpdateOne {
	vppnhuo.mutation.ClearDeletedAt()
	return vppnhuo
}

// SetDeletedBy sets the "deleted_by" field.
func (vppnhuo *VendorProfilePhoneNumberHistoryUpdateOne) SetDeletedBy(s string) *VendorProfilePhoneNumberHistoryUpdateOne {
	vppnhuo.mutation.SetDeletedBy(s)
	return vppnhuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vppnhuo *VendorProfilePhoneNumberHistoryUpdateOne) SetNillableDeletedBy(s *string) *VendorProfilePhoneNumberHistoryUpdateOne {
	if s != nil {
		vppnhuo.SetDeletedBy(*s)
	}
	return vppnhuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (vppnhuo *VendorProfilePhoneNumberHistoryUpdateOne) ClearDeletedBy() *VendorProfilePhoneNumberHistoryUpdateOne {
	vppnhuo.mutation.ClearDeletedBy()
	return vppnhuo
}

// Mutation returns the VendorProfilePhoneNumberHistoryMutation object of the builder.
func (vppnhuo *VendorProfilePhoneNumberHistoryUpdateOne) Mutation() *VendorProfilePhoneNumberHistoryMutation {
	return vppnhuo.mutation
}

// Where appends a list predicates to the VendorProfilePhoneNumberHistoryUpdate builder.
func (vppnhuo *VendorProfilePhoneNumberHistoryUpdateOne) Where(ps ...predicate.VendorProfilePhoneNumberHistory) *VendorProfilePhoneNumberHistoryUpdateOne {
	vppnhuo.mutation.Where(ps...)
	return vppnhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vppnhuo *VendorProfilePhoneNumberHistoryUpdateOne) Select(field string, fields ...string) *VendorProfilePhoneNumberHistoryUpdateOne {
	vppnhuo.fields = append([]string{field}, fields...)
	return vppnhuo
}

// Save executes the query and returns the updated VendorProfilePhoneNumberHistory entity.
func (vppnhuo *VendorProfilePhoneNumberHistoryUpdateOne) Save(ctx context.Context) (*VendorProfilePhoneNumberHistory, error) {
	vppnhuo.defaults()
	return withHooks(ctx, vppnhuo.sqlSave, vppnhuo.mutation, vppnhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vppnhuo *VendorProfilePhoneNumberHistoryUpdateOne) SaveX(ctx context.Context) *VendorProfilePhoneNumberHistory {
	node, err := vppnhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vppnhuo *VendorProfilePhoneNumberHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := vppnhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vppnhuo *VendorProfilePhoneNumberHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := vppnhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vppnhuo *VendorProfilePhoneNumberHistoryUpdateOne) defaults() {
	if _, ok := vppnhuo.mutation.UpdatedAt(); !ok && !vppnhuo.mutation.UpdatedAtCleared() {
		v := vendorprofilephonenumberhistory.UpdateDefaultUpdatedAt()
		vppnhuo.mutation.SetUpdatedAt(v)
	}
}

func (vppnhuo *VendorProfilePhoneNumberHistoryUpdateOne) sqlSave(ctx context.Context) (_node *VendorProfilePhoneNumberHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(vendorprofilephonenumberhistory.Table, vendorprofilephonenumberhistory.Columns, sqlgraph.NewFieldSpec(vendorprofilephonenumberhistory.FieldID, field.TypeString))
	id, ok := vppnhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "VendorProfilePhoneNumberHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vppnhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vendorprofilephonenumberhistory.FieldID)
		for _, f := range fields {
			if !vendorprofilephonenumberhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != vendorprofilephonenumberhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vppnhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vppnhuo.mutation.RefCleared() {
		_spec.ClearField(vendorprofilephonenumberhistory.FieldRef, field.TypeString)
	}
	if vppnhuo.mutation.CreatedAtCleared() {
		_spec.ClearField(vendorprofilephonenumberhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vppnhuo.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofilephonenumberhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if vppnhuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(vendorprofilephonenumberhistory.FieldUpdatedAt, field.TypeTime)
	}
	if vppnhuo.mutation.CreatedByCleared() {
		_spec.ClearField(vendorprofilephonenumberhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vppnhuo.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofilephonenumberhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if vppnhuo.mutation.UpdatedByCleared() {
		_spec.ClearField(vendorprofilephonenumberhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vppnhuo.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofilephonenumberhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if vppnhuo.mutation.DeletedAtCleared() {
		_spec.ClearField(vendorprofilephonenumberhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vppnhuo.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofilephonenumberhistory.FieldDeletedBy, field.TypeString, value)
	}
	if vppnhuo.mutation.DeletedByCleared() {
		_spec.ClearField(vendorprofilephonenumberhistory.FieldDeletedBy, field.TypeString)
	}
	_spec.Node.Schema = vppnhuo.schemaConfig.VendorProfilePhoneNumberHistory
	ctx = internal.NewSchemaConfigContext(ctx, vppnhuo.schemaConfig)
	_node = &VendorProfilePhoneNumberHistory{config: vppnhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vppnhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorprofilephonenumberhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vppnhuo.mutation.done = true
	return _node, nil
}
