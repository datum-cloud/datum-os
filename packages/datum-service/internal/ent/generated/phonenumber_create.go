// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/event"
	"github.com/datum-cloud/datum-os/internal/ent/generated/organization"
	"github.com/datum-cloud/datum-os/internal/ent/generated/phonenumber"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofile"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilephonenumber"
	"github.com/datum-cloud/datum-os/pkg/enums"
)

// PhoneNumberCreate is the builder for creating a PhoneNumber entity.
type PhoneNumberCreate struct {
	config
	mutation *PhoneNumberMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pnc *PhoneNumberCreate) SetCreatedAt(t time.Time) *PhoneNumberCreate {
	pnc.mutation.SetCreatedAt(t)
	return pnc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pnc *PhoneNumberCreate) SetNillableCreatedAt(t *time.Time) *PhoneNumberCreate {
	if t != nil {
		pnc.SetCreatedAt(*t)
	}
	return pnc
}

// SetUpdatedAt sets the "updated_at" field.
func (pnc *PhoneNumberCreate) SetUpdatedAt(t time.Time) *PhoneNumberCreate {
	pnc.mutation.SetUpdatedAt(t)
	return pnc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pnc *PhoneNumberCreate) SetNillableUpdatedAt(t *time.Time) *PhoneNumberCreate {
	if t != nil {
		pnc.SetUpdatedAt(*t)
	}
	return pnc
}

// SetCreatedBy sets the "created_by" field.
func (pnc *PhoneNumberCreate) SetCreatedBy(s string) *PhoneNumberCreate {
	pnc.mutation.SetCreatedBy(s)
	return pnc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pnc *PhoneNumberCreate) SetNillableCreatedBy(s *string) *PhoneNumberCreate {
	if s != nil {
		pnc.SetCreatedBy(*s)
	}
	return pnc
}

// SetUpdatedBy sets the "updated_by" field.
func (pnc *PhoneNumberCreate) SetUpdatedBy(s string) *PhoneNumberCreate {
	pnc.mutation.SetUpdatedBy(s)
	return pnc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pnc *PhoneNumberCreate) SetNillableUpdatedBy(s *string) *PhoneNumberCreate {
	if s != nil {
		pnc.SetUpdatedBy(*s)
	}
	return pnc
}

// SetDeletedAt sets the "deleted_at" field.
func (pnc *PhoneNumberCreate) SetDeletedAt(t time.Time) *PhoneNumberCreate {
	pnc.mutation.SetDeletedAt(t)
	return pnc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pnc *PhoneNumberCreate) SetNillableDeletedAt(t *time.Time) *PhoneNumberCreate {
	if t != nil {
		pnc.SetDeletedAt(*t)
	}
	return pnc
}

// SetDeletedBy sets the "deleted_by" field.
func (pnc *PhoneNumberCreate) SetDeletedBy(s string) *PhoneNumberCreate {
	pnc.mutation.SetDeletedBy(s)
	return pnc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pnc *PhoneNumberCreate) SetNillableDeletedBy(s *string) *PhoneNumberCreate {
	if s != nil {
		pnc.SetDeletedBy(*s)
	}
	return pnc
}

// SetMappingID sets the "mapping_id" field.
func (pnc *PhoneNumberCreate) SetMappingID(s string) *PhoneNumberCreate {
	pnc.mutation.SetMappingID(s)
	return pnc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (pnc *PhoneNumberCreate) SetNillableMappingID(s *string) *PhoneNumberCreate {
	if s != nil {
		pnc.SetMappingID(*s)
	}
	return pnc
}

// SetTags sets the "tags" field.
func (pnc *PhoneNumberCreate) SetTags(s []string) *PhoneNumberCreate {
	pnc.mutation.SetTags(s)
	return pnc
}

// SetOwnerID sets the "owner_id" field.
func (pnc *PhoneNumberCreate) SetOwnerID(s string) *PhoneNumberCreate {
	pnc.mutation.SetOwnerID(s)
	return pnc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pnc *PhoneNumberCreate) SetNillableOwnerID(s *string) *PhoneNumberCreate {
	if s != nil {
		pnc.SetOwnerID(*s)
	}
	return pnc
}

// SetKind sets the "kind" field.
func (pnc *PhoneNumberCreate) SetKind(ennuty enums.PhoneNumberType) *PhoneNumberCreate {
	pnc.mutation.SetKind(ennuty)
	return pnc
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (pnc *PhoneNumberCreate) SetNillableKind(ennuty *enums.PhoneNumberType) *PhoneNumberCreate {
	if ennuty != nil {
		pnc.SetKind(*ennuty)
	}
	return pnc
}

// SetRegionCode sets the "region_code" field.
func (pnc *PhoneNumberCreate) SetRegionCode(s string) *PhoneNumberCreate {
	pnc.mutation.SetRegionCode(s)
	return pnc
}

// SetNillableRegionCode sets the "region_code" field if the given value is not nil.
func (pnc *PhoneNumberCreate) SetNillableRegionCode(s *string) *PhoneNumberCreate {
	if s != nil {
		pnc.SetRegionCode(*s)
	}
	return pnc
}

// SetShortCode sets the "short_code" field.
func (pnc *PhoneNumberCreate) SetShortCode(s string) *PhoneNumberCreate {
	pnc.mutation.SetShortCode(s)
	return pnc
}

// SetNillableShortCode sets the "short_code" field if the given value is not nil.
func (pnc *PhoneNumberCreate) SetNillableShortCode(s *string) *PhoneNumberCreate {
	if s != nil {
		pnc.SetShortCode(*s)
	}
	return pnc
}

// SetNumber sets the "number" field.
func (pnc *PhoneNumberCreate) SetNumber(s string) *PhoneNumberCreate {
	pnc.mutation.SetNumber(s)
	return pnc
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (pnc *PhoneNumberCreate) SetNillableNumber(s *string) *PhoneNumberCreate {
	if s != nil {
		pnc.SetNumber(*s)
	}
	return pnc
}

// SetExtension sets the "extension" field.
func (pnc *PhoneNumberCreate) SetExtension(s string) *PhoneNumberCreate {
	pnc.mutation.SetExtension(s)
	return pnc
}

// SetNillableExtension sets the "extension" field if the given value is not nil.
func (pnc *PhoneNumberCreate) SetNillableExtension(s *string) *PhoneNumberCreate {
	if s != nil {
		pnc.SetExtension(*s)
	}
	return pnc
}

// SetID sets the "id" field.
func (pnc *PhoneNumberCreate) SetID(s string) *PhoneNumberCreate {
	pnc.mutation.SetID(s)
	return pnc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pnc *PhoneNumberCreate) SetNillableID(s *string) *PhoneNumberCreate {
	if s != nil {
		pnc.SetID(*s)
	}
	return pnc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (pnc *PhoneNumberCreate) SetOwner(o *Organization) *PhoneNumberCreate {
	return pnc.SetOwnerID(o.ID)
}

// AddProfileIDs adds the "profile" edge to the VendorProfile entity by IDs.
func (pnc *PhoneNumberCreate) AddProfileIDs(ids ...string) *PhoneNumberCreate {
	pnc.mutation.AddProfileIDs(ids...)
	return pnc
}

// AddProfile adds the "profile" edges to the VendorProfile entity.
func (pnc *PhoneNumberCreate) AddProfile(v ...*VendorProfile) *PhoneNumberCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pnc.AddProfileIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (pnc *PhoneNumberCreate) AddEventIDs(ids ...string) *PhoneNumberCreate {
	pnc.mutation.AddEventIDs(ids...)
	return pnc
}

// AddEvents adds the "events" edges to the Event entity.
func (pnc *PhoneNumberCreate) AddEvents(e ...*Event) *PhoneNumberCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pnc.AddEventIDs(ids...)
}

// AddVendorProfilePhoneNumberIDs adds the "vendor_profile_phone_numbers" edge to the VendorProfilePhoneNumber entity by IDs.
func (pnc *PhoneNumberCreate) AddVendorProfilePhoneNumberIDs(ids ...string) *PhoneNumberCreate {
	pnc.mutation.AddVendorProfilePhoneNumberIDs(ids...)
	return pnc
}

// AddVendorProfilePhoneNumbers adds the "vendor_profile_phone_numbers" edges to the VendorProfilePhoneNumber entity.
func (pnc *PhoneNumberCreate) AddVendorProfilePhoneNumbers(v ...*VendorProfilePhoneNumber) *PhoneNumberCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pnc.AddVendorProfilePhoneNumberIDs(ids...)
}

// Mutation returns the PhoneNumberMutation object of the builder.
func (pnc *PhoneNumberCreate) Mutation() *PhoneNumberMutation {
	return pnc.mutation
}

// Save creates the PhoneNumber in the database.
func (pnc *PhoneNumberCreate) Save(ctx context.Context) (*PhoneNumber, error) {
	if err := pnc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pnc.sqlSave, pnc.mutation, pnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pnc *PhoneNumberCreate) SaveX(ctx context.Context) *PhoneNumber {
	v, err := pnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pnc *PhoneNumberCreate) Exec(ctx context.Context) error {
	_, err := pnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pnc *PhoneNumberCreate) ExecX(ctx context.Context) {
	if err := pnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pnc *PhoneNumberCreate) defaults() error {
	if _, ok := pnc.mutation.CreatedAt(); !ok {
		if phonenumber.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized phonenumber.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := phonenumber.DefaultCreatedAt()
		pnc.mutation.SetCreatedAt(v)
	}
	if _, ok := pnc.mutation.UpdatedAt(); !ok {
		if phonenumber.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized phonenumber.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := phonenumber.DefaultUpdatedAt()
		pnc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pnc.mutation.MappingID(); !ok {
		if phonenumber.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized phonenumber.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := phonenumber.DefaultMappingID()
		pnc.mutation.SetMappingID(v)
	}
	if _, ok := pnc.mutation.Tags(); !ok {
		v := phonenumber.DefaultTags
		pnc.mutation.SetTags(v)
	}
	if _, ok := pnc.mutation.Kind(); !ok {
		v := phonenumber.DefaultKind
		pnc.mutation.SetKind(v)
	}
	if _, ok := pnc.mutation.ID(); !ok {
		if phonenumber.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized phonenumber.DefaultID (forgotten import generated/runtime?)")
		}
		v := phonenumber.DefaultID()
		pnc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pnc *PhoneNumberCreate) check() error {
	if _, ok := pnc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "PhoneNumber.mapping_id"`)}
	}
	if v, ok := pnc.mutation.OwnerID(); ok {
		if err := phonenumber.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "PhoneNumber.owner_id": %w`, err)}
		}
	}
	if _, ok := pnc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`generated: missing required field "PhoneNumber.kind"`)}
	}
	if v, ok := pnc.mutation.RegionCode(); ok {
		if err := phonenumber.RegionCodeValidator(v); err != nil {
			return &ValidationError{Name: "region_code", err: fmt.Errorf(`generated: validator failed for field "PhoneNumber.region_code": %w`, err)}
		}
	}
	if v, ok := pnc.mutation.Number(); ok {
		if err := phonenumber.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`generated: validator failed for field "PhoneNumber.number": %w`, err)}
		}
	}
	return nil
}

func (pnc *PhoneNumberCreate) sqlSave(ctx context.Context) (*PhoneNumber, error) {
	if err := pnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PhoneNumber.ID type: %T", _spec.ID.Value)
		}
	}
	pnc.mutation.id = &_node.ID
	pnc.mutation.done = true
	return _node, nil
}

func (pnc *PhoneNumberCreate) createSpec() (*PhoneNumber, *sqlgraph.CreateSpec) {
	var (
		_node = &PhoneNumber{config: pnc.config}
		_spec = sqlgraph.NewCreateSpec(phonenumber.Table, sqlgraph.NewFieldSpec(phonenumber.FieldID, field.TypeString))
	)
	_spec.Schema = pnc.schemaConfig.PhoneNumber
	if id, ok := pnc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pnc.mutation.CreatedAt(); ok {
		_spec.SetField(phonenumber.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pnc.mutation.UpdatedAt(); ok {
		_spec.SetField(phonenumber.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pnc.mutation.CreatedBy(); ok {
		_spec.SetField(phonenumber.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := pnc.mutation.UpdatedBy(); ok {
		_spec.SetField(phonenumber.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := pnc.mutation.DeletedAt(); ok {
		_spec.SetField(phonenumber.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := pnc.mutation.DeletedBy(); ok {
		_spec.SetField(phonenumber.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := pnc.mutation.MappingID(); ok {
		_spec.SetField(phonenumber.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := pnc.mutation.Tags(); ok {
		_spec.SetField(phonenumber.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := pnc.mutation.Kind(); ok {
		_spec.SetField(phonenumber.FieldKind, field.TypeString, value)
		_node.Kind = value
	}
	if value, ok := pnc.mutation.RegionCode(); ok {
		_spec.SetField(phonenumber.FieldRegionCode, field.TypeString, value)
		_node.RegionCode = value
	}
	if value, ok := pnc.mutation.ShortCode(); ok {
		_spec.SetField(phonenumber.FieldShortCode, field.TypeString, value)
		_node.ShortCode = value
	}
	if value, ok := pnc.mutation.Number(); ok {
		_spec.SetField(phonenumber.FieldNumber, field.TypeString, value)
		_node.Number = value
	}
	if value, ok := pnc.mutation.Extension(); ok {
		_spec.SetField(phonenumber.FieldExtension, field.TypeString, value)
		_node.Extension = value
	}
	if nodes := pnc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   phonenumber.OwnerTable,
			Columns: []string{phonenumber.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnc.schemaConfig.PhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pnc.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   phonenumber.ProfileTable,
			Columns: phonenumber.ProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnc.schemaConfig.VendorProfilePhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VendorProfilePhoneNumberCreate{config: pnc.config, mutation: newVendorProfilePhoneNumberMutation(pnc.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pnc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   phonenumber.EventsTable,
			Columns: []string{phonenumber.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnc.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pnc.mutation.VendorProfilePhoneNumbersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   phonenumber.VendorProfilePhoneNumbersTable,
			Columns: []string{phonenumber.VendorProfilePhoneNumbersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofilephonenumber.FieldID, field.TypeString),
			},
		}
		edge.Schema = pnc.schemaConfig.VendorProfilePhoneNumber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PhoneNumberCreateBulk is the builder for creating many PhoneNumber entities in bulk.
type PhoneNumberCreateBulk struct {
	config
	err      error
	builders []*PhoneNumberCreate
}

// Save creates the PhoneNumber entities in the database.
func (pncb *PhoneNumberCreateBulk) Save(ctx context.Context) ([]*PhoneNumber, error) {
	if pncb.err != nil {
		return nil, pncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pncb.builders))
	nodes := make([]*PhoneNumber, len(pncb.builders))
	mutators := make([]Mutator, len(pncb.builders))
	for i := range pncb.builders {
		func(i int, root context.Context) {
			builder := pncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PhoneNumberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pncb *PhoneNumberCreateBulk) SaveX(ctx context.Context) []*PhoneNumber {
	v, err := pncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pncb *PhoneNumberCreateBulk) Exec(ctx context.Context) error {
	_, err := pncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pncb *PhoneNumberCreateBulk) ExecX(ctx context.Context) {
	if err := pncb.Exec(ctx); err != nil {
		panic(err)
	}
}
