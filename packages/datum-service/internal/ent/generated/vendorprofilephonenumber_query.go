// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/event"
	"github.com/datum-cloud/datum-os/internal/ent/generated/phonenumber"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofile"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilephonenumber"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// VendorProfilePhoneNumberQuery is the builder for querying VendorProfilePhoneNumber entities.
type VendorProfilePhoneNumberQuery struct {
	config
	ctx             *QueryContext
	order           []vendorprofilephonenumber.OrderOption
	inters          []Interceptor
	predicates      []predicate.VendorProfilePhoneNumber
	withPhoneNumber *PhoneNumberQuery
	withProfile     *VendorProfileQuery
	withEvents      *EventQuery
	modifiers       []func(*sql.Selector)
	loadTotal       []func(context.Context, []*VendorProfilePhoneNumber) error
	withNamedEvents map[string]*EventQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VendorProfilePhoneNumberQuery builder.
func (vppnq *VendorProfilePhoneNumberQuery) Where(ps ...predicate.VendorProfilePhoneNumber) *VendorProfilePhoneNumberQuery {
	vppnq.predicates = append(vppnq.predicates, ps...)
	return vppnq
}

// Limit the number of records to be returned by this query.
func (vppnq *VendorProfilePhoneNumberQuery) Limit(limit int) *VendorProfilePhoneNumberQuery {
	vppnq.ctx.Limit = &limit
	return vppnq
}

// Offset to start from.
func (vppnq *VendorProfilePhoneNumberQuery) Offset(offset int) *VendorProfilePhoneNumberQuery {
	vppnq.ctx.Offset = &offset
	return vppnq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vppnq *VendorProfilePhoneNumberQuery) Unique(unique bool) *VendorProfilePhoneNumberQuery {
	vppnq.ctx.Unique = &unique
	return vppnq
}

// Order specifies how the records should be ordered.
func (vppnq *VendorProfilePhoneNumberQuery) Order(o ...vendorprofilephonenumber.OrderOption) *VendorProfilePhoneNumberQuery {
	vppnq.order = append(vppnq.order, o...)
	return vppnq
}

// QueryPhoneNumber chains the current query on the "phone_number" edge.
func (vppnq *VendorProfilePhoneNumberQuery) QueryPhoneNumber() *PhoneNumberQuery {
	query := (&PhoneNumberClient{config: vppnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vppnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vppnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vendorprofilephonenumber.Table, vendorprofilephonenumber.FieldID, selector),
			sqlgraph.To(phonenumber.Table, phonenumber.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, vendorprofilephonenumber.PhoneNumberTable, vendorprofilephonenumber.PhoneNumberColumn),
		)
		schemaConfig := vppnq.schemaConfig
		step.To.Schema = schemaConfig.PhoneNumber
		step.Edge.Schema = schemaConfig.VendorProfilePhoneNumber
		fromU = sqlgraph.SetNeighbors(vppnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProfile chains the current query on the "profile" edge.
func (vppnq *VendorProfilePhoneNumberQuery) QueryProfile() *VendorProfileQuery {
	query := (&VendorProfileClient{config: vppnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vppnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vppnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vendorprofilephonenumber.Table, vendorprofilephonenumber.FieldID, selector),
			sqlgraph.To(vendorprofile.Table, vendorprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, vendorprofilephonenumber.ProfileTable, vendorprofilephonenumber.ProfileColumn),
		)
		schemaConfig := vppnq.schemaConfig
		step.To.Schema = schemaConfig.VendorProfile
		step.Edge.Schema = schemaConfig.VendorProfilePhoneNumber
		fromU = sqlgraph.SetNeighbors(vppnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvents chains the current query on the "events" edge.
func (vppnq *VendorProfilePhoneNumberQuery) QueryEvents() *EventQuery {
	query := (&EventClient{config: vppnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vppnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vppnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vendorprofilephonenumber.Table, vendorprofilephonenumber.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vendorprofilephonenumber.EventsTable, vendorprofilephonenumber.EventsColumn),
		)
		schemaConfig := vppnq.schemaConfig
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.Event
		fromU = sqlgraph.SetNeighbors(vppnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first VendorProfilePhoneNumber entity from the query.
// Returns a *NotFoundError when no VendorProfilePhoneNumber was found.
func (vppnq *VendorProfilePhoneNumberQuery) First(ctx context.Context) (*VendorProfilePhoneNumber, error) {
	nodes, err := vppnq.Limit(1).All(setContextOp(ctx, vppnq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{vendorprofilephonenumber.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vppnq *VendorProfilePhoneNumberQuery) FirstX(ctx context.Context) *VendorProfilePhoneNumber {
	node, err := vppnq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VendorProfilePhoneNumber ID from the query.
// Returns a *NotFoundError when no VendorProfilePhoneNumber ID was found.
func (vppnq *VendorProfilePhoneNumberQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = vppnq.Limit(1).IDs(setContextOp(ctx, vppnq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{vendorprofilephonenumber.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vppnq *VendorProfilePhoneNumberQuery) FirstIDX(ctx context.Context) string {
	id, err := vppnq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VendorProfilePhoneNumber entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one VendorProfilePhoneNumber entity is found.
// Returns a *NotFoundError when no VendorProfilePhoneNumber entities are found.
func (vppnq *VendorProfilePhoneNumberQuery) Only(ctx context.Context) (*VendorProfilePhoneNumber, error) {
	nodes, err := vppnq.Limit(2).All(setContextOp(ctx, vppnq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{vendorprofilephonenumber.Label}
	default:
		return nil, &NotSingularError{vendorprofilephonenumber.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vppnq *VendorProfilePhoneNumberQuery) OnlyX(ctx context.Context) *VendorProfilePhoneNumber {
	node, err := vppnq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VendorProfilePhoneNumber ID in the query.
// Returns a *NotSingularError when more than one VendorProfilePhoneNumber ID is found.
// Returns a *NotFoundError when no entities are found.
func (vppnq *VendorProfilePhoneNumberQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = vppnq.Limit(2).IDs(setContextOp(ctx, vppnq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{vendorprofilephonenumber.Label}
	default:
		err = &NotSingularError{vendorprofilephonenumber.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vppnq *VendorProfilePhoneNumberQuery) OnlyIDX(ctx context.Context) string {
	id, err := vppnq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VendorProfilePhoneNumbers.
func (vppnq *VendorProfilePhoneNumberQuery) All(ctx context.Context) ([]*VendorProfilePhoneNumber, error) {
	ctx = setContextOp(ctx, vppnq.ctx, ent.OpQueryAll)
	if err := vppnq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*VendorProfilePhoneNumber, *VendorProfilePhoneNumberQuery]()
	return withInterceptors[[]*VendorProfilePhoneNumber](ctx, vppnq, qr, vppnq.inters)
}

// AllX is like All, but panics if an error occurs.
func (vppnq *VendorProfilePhoneNumberQuery) AllX(ctx context.Context) []*VendorProfilePhoneNumber {
	nodes, err := vppnq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VendorProfilePhoneNumber IDs.
func (vppnq *VendorProfilePhoneNumberQuery) IDs(ctx context.Context) (ids []string, err error) {
	if vppnq.ctx.Unique == nil && vppnq.path != nil {
		vppnq.Unique(true)
	}
	ctx = setContextOp(ctx, vppnq.ctx, ent.OpQueryIDs)
	if err = vppnq.Select(vendorprofilephonenumber.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vppnq *VendorProfilePhoneNumberQuery) IDsX(ctx context.Context) []string {
	ids, err := vppnq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vppnq *VendorProfilePhoneNumberQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, vppnq.ctx, ent.OpQueryCount)
	if err := vppnq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, vppnq, querierCount[*VendorProfilePhoneNumberQuery](), vppnq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (vppnq *VendorProfilePhoneNumberQuery) CountX(ctx context.Context) int {
	count, err := vppnq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vppnq *VendorProfilePhoneNumberQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, vppnq.ctx, ent.OpQueryExist)
	switch _, err := vppnq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (vppnq *VendorProfilePhoneNumberQuery) ExistX(ctx context.Context) bool {
	exist, err := vppnq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VendorProfilePhoneNumberQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vppnq *VendorProfilePhoneNumberQuery) Clone() *VendorProfilePhoneNumberQuery {
	if vppnq == nil {
		return nil
	}
	return &VendorProfilePhoneNumberQuery{
		config:          vppnq.config,
		ctx:             vppnq.ctx.Clone(),
		order:           append([]vendorprofilephonenumber.OrderOption{}, vppnq.order...),
		inters:          append([]Interceptor{}, vppnq.inters...),
		predicates:      append([]predicate.VendorProfilePhoneNumber{}, vppnq.predicates...),
		withPhoneNumber: vppnq.withPhoneNumber.Clone(),
		withProfile:     vppnq.withProfile.Clone(),
		withEvents:      vppnq.withEvents.Clone(),
		// clone intermediate query.
		sql:  vppnq.sql.Clone(),
		path: vppnq.path,
	}
}

// WithPhoneNumber tells the query-builder to eager-load the nodes that are connected to
// the "phone_number" edge. The optional arguments are used to configure the query builder of the edge.
func (vppnq *VendorProfilePhoneNumberQuery) WithPhoneNumber(opts ...func(*PhoneNumberQuery)) *VendorProfilePhoneNumberQuery {
	query := (&PhoneNumberClient{config: vppnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vppnq.withPhoneNumber = query
	return vppnq
}

// WithProfile tells the query-builder to eager-load the nodes that are connected to
// the "profile" edge. The optional arguments are used to configure the query builder of the edge.
func (vppnq *VendorProfilePhoneNumberQuery) WithProfile(opts ...func(*VendorProfileQuery)) *VendorProfilePhoneNumberQuery {
	query := (&VendorProfileClient{config: vppnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vppnq.withProfile = query
	return vppnq
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (vppnq *VendorProfilePhoneNumberQuery) WithEvents(opts ...func(*EventQuery)) *VendorProfilePhoneNumberQuery {
	query := (&EventClient{config: vppnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vppnq.withEvents = query
	return vppnq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.VendorProfilePhoneNumber.Query().
//		GroupBy(vendorprofilephonenumber.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (vppnq *VendorProfilePhoneNumberQuery) GroupBy(field string, fields ...string) *VendorProfilePhoneNumberGroupBy {
	vppnq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &VendorProfilePhoneNumberGroupBy{build: vppnq}
	grbuild.flds = &vppnq.ctx.Fields
	grbuild.label = vendorprofilephonenumber.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.VendorProfilePhoneNumber.Query().
//		Select(vendorprofilephonenumber.FieldCreatedAt).
//		Scan(ctx, &v)
func (vppnq *VendorProfilePhoneNumberQuery) Select(fields ...string) *VendorProfilePhoneNumberSelect {
	vppnq.ctx.Fields = append(vppnq.ctx.Fields, fields...)
	sbuild := &VendorProfilePhoneNumberSelect{VendorProfilePhoneNumberQuery: vppnq}
	sbuild.label = vendorprofilephonenumber.Label
	sbuild.flds, sbuild.scan = &vppnq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a VendorProfilePhoneNumberSelect configured with the given aggregations.
func (vppnq *VendorProfilePhoneNumberQuery) Aggregate(fns ...AggregateFunc) *VendorProfilePhoneNumberSelect {
	return vppnq.Select().Aggregate(fns...)
}

func (vppnq *VendorProfilePhoneNumberQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range vppnq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, vppnq); err != nil {
				return err
			}
		}
	}
	for _, f := range vppnq.ctx.Fields {
		if !vendorprofilephonenumber.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if vppnq.path != nil {
		prev, err := vppnq.path(ctx)
		if err != nil {
			return err
		}
		vppnq.sql = prev
	}
	if vendorprofilephonenumber.Policy == nil {
		return errors.New("generated: uninitialized vendorprofilephonenumber.Policy (forgotten import generated/runtime?)")
	}
	if err := vendorprofilephonenumber.Policy.EvalQuery(ctx, vppnq); err != nil {
		return err
	}
	return nil
}

func (vppnq *VendorProfilePhoneNumberQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*VendorProfilePhoneNumber, error) {
	var (
		nodes       = []*VendorProfilePhoneNumber{}
		_spec       = vppnq.querySpec()
		loadedTypes = [3]bool{
			vppnq.withPhoneNumber != nil,
			vppnq.withProfile != nil,
			vppnq.withEvents != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*VendorProfilePhoneNumber).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &VendorProfilePhoneNumber{config: vppnq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = vppnq.schemaConfig.VendorProfilePhoneNumber
	ctx = internal.NewSchemaConfigContext(ctx, vppnq.schemaConfig)
	if len(vppnq.modifiers) > 0 {
		_spec.Modifiers = vppnq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, vppnq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := vppnq.withPhoneNumber; query != nil {
		if err := vppnq.loadPhoneNumber(ctx, query, nodes, nil,
			func(n *VendorProfilePhoneNumber, e *PhoneNumber) { n.Edges.PhoneNumber = e }); err != nil {
			return nil, err
		}
	}
	if query := vppnq.withProfile; query != nil {
		if err := vppnq.loadProfile(ctx, query, nodes, nil,
			func(n *VendorProfilePhoneNumber, e *VendorProfile) { n.Edges.Profile = e }); err != nil {
			return nil, err
		}
	}
	if query := vppnq.withEvents; query != nil {
		if err := vppnq.loadEvents(ctx, query, nodes,
			func(n *VendorProfilePhoneNumber) { n.Edges.Events = []*Event{} },
			func(n *VendorProfilePhoneNumber, e *Event) { n.Edges.Events = append(n.Edges.Events, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range vppnq.withNamedEvents {
		if err := vppnq.loadEvents(ctx, query, nodes,
			func(n *VendorProfilePhoneNumber) { n.appendNamedEvents(name) },
			func(n *VendorProfilePhoneNumber, e *Event) { n.appendNamedEvents(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range vppnq.loadTotal {
		if err := vppnq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (vppnq *VendorProfilePhoneNumberQuery) loadPhoneNumber(ctx context.Context, query *PhoneNumberQuery, nodes []*VendorProfilePhoneNumber, init func(*VendorProfilePhoneNumber), assign func(*VendorProfilePhoneNumber, *PhoneNumber)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*VendorProfilePhoneNumber)
	for i := range nodes {
		fk := nodes[i].PhoneNumberID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(phonenumber.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "phone_number_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (vppnq *VendorProfilePhoneNumberQuery) loadProfile(ctx context.Context, query *VendorProfileQuery, nodes []*VendorProfilePhoneNumber, init func(*VendorProfilePhoneNumber), assign func(*VendorProfilePhoneNumber, *VendorProfile)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*VendorProfilePhoneNumber)
	for i := range nodes {
		fk := nodes[i].VendorProfileID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(vendorprofile.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "vendor_profile_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (vppnq *VendorProfilePhoneNumberQuery) loadEvents(ctx context.Context, query *EventQuery, nodes []*VendorProfilePhoneNumber, init func(*VendorProfilePhoneNumber), assign func(*VendorProfilePhoneNumber, *Event)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*VendorProfilePhoneNumber)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Event(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(vendorprofilephonenumber.EventsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.vendor_profile_phone_number_events
		if fk == nil {
			return fmt.Errorf(`foreign-key "vendor_profile_phone_number_events" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "vendor_profile_phone_number_events" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (vppnq *VendorProfilePhoneNumberQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vppnq.querySpec()
	_spec.Node.Schema = vppnq.schemaConfig.VendorProfilePhoneNumber
	ctx = internal.NewSchemaConfigContext(ctx, vppnq.schemaConfig)
	if len(vppnq.modifiers) > 0 {
		_spec.Modifiers = vppnq.modifiers
	}
	_spec.Node.Columns = vppnq.ctx.Fields
	if len(vppnq.ctx.Fields) > 0 {
		_spec.Unique = vppnq.ctx.Unique != nil && *vppnq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, vppnq.driver, _spec)
}

func (vppnq *VendorProfilePhoneNumberQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(vendorprofilephonenumber.Table, vendorprofilephonenumber.Columns, sqlgraph.NewFieldSpec(vendorprofilephonenumber.FieldID, field.TypeString))
	_spec.From = vppnq.sql
	if unique := vppnq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if vppnq.path != nil {
		_spec.Unique = true
	}
	if fields := vppnq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vendorprofilephonenumber.FieldID)
		for i := range fields {
			if fields[i] != vendorprofilephonenumber.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if vppnq.withPhoneNumber != nil {
			_spec.Node.AddColumnOnce(vendorprofilephonenumber.FieldPhoneNumberID)
		}
		if vppnq.withProfile != nil {
			_spec.Node.AddColumnOnce(vendorprofilephonenumber.FieldVendorProfileID)
		}
	}
	if ps := vppnq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vppnq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vppnq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vppnq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vppnq *VendorProfilePhoneNumberQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vppnq.driver.Dialect())
	t1 := builder.Table(vendorprofilephonenumber.Table)
	columns := vppnq.ctx.Fields
	if len(columns) == 0 {
		columns = vendorprofilephonenumber.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vppnq.sql != nil {
		selector = vppnq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if vppnq.ctx.Unique != nil && *vppnq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(vppnq.schemaConfig.VendorProfilePhoneNumber)
	ctx = internal.NewSchemaConfigContext(ctx, vppnq.schemaConfig)
	selector.WithContext(ctx)
	for _, p := range vppnq.predicates {
		p(selector)
	}
	for _, p := range vppnq.order {
		p(selector)
	}
	if offset := vppnq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vppnq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedEvents tells the query-builder to eager-load the nodes that are connected to the "events"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (vppnq *VendorProfilePhoneNumberQuery) WithNamedEvents(name string, opts ...func(*EventQuery)) *VendorProfilePhoneNumberQuery {
	query := (&EventClient{config: vppnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if vppnq.withNamedEvents == nil {
		vppnq.withNamedEvents = make(map[string]*EventQuery)
	}
	vppnq.withNamedEvents[name] = query
	return vppnq
}

// VendorProfilePhoneNumberGroupBy is the group-by builder for VendorProfilePhoneNumber entities.
type VendorProfilePhoneNumberGroupBy struct {
	selector
	build *VendorProfilePhoneNumberQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vppngb *VendorProfilePhoneNumberGroupBy) Aggregate(fns ...AggregateFunc) *VendorProfilePhoneNumberGroupBy {
	vppngb.fns = append(vppngb.fns, fns...)
	return vppngb
}

// Scan applies the selector query and scans the result into the given value.
func (vppngb *VendorProfilePhoneNumberGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vppngb.build.ctx, ent.OpQueryGroupBy)
	if err := vppngb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VendorProfilePhoneNumberQuery, *VendorProfilePhoneNumberGroupBy](ctx, vppngb.build, vppngb, vppngb.build.inters, v)
}

func (vppngb *VendorProfilePhoneNumberGroupBy) sqlScan(ctx context.Context, root *VendorProfilePhoneNumberQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(vppngb.fns))
	for _, fn := range vppngb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*vppngb.flds)+len(vppngb.fns))
		for _, f := range *vppngb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*vppngb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vppngb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// VendorProfilePhoneNumberSelect is the builder for selecting fields of VendorProfilePhoneNumber entities.
type VendorProfilePhoneNumberSelect struct {
	*VendorProfilePhoneNumberQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (vppns *VendorProfilePhoneNumberSelect) Aggregate(fns ...AggregateFunc) *VendorProfilePhoneNumberSelect {
	vppns.fns = append(vppns.fns, fns...)
	return vppns
}

// Scan applies the selector query and scans the result into the given value.
func (vppns *VendorProfilePhoneNumberSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vppns.ctx, ent.OpQuerySelect)
	if err := vppns.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VendorProfilePhoneNumberQuery, *VendorProfilePhoneNumberSelect](ctx, vppns.VendorProfilePhoneNumberQuery, vppns, vppns.inters, v)
}

func (vppns *VendorProfilePhoneNumberSelect) sqlScan(ctx context.Context, root *VendorProfilePhoneNumberQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(vppns.fns))
	for _, fn := range vppns.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*vppns.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vppns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
