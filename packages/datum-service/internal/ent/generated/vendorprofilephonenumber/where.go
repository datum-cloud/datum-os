// Code generated by ent, DO NOT EDIT.

package vendorprofilephonenumber

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEQ(FieldUpdatedBy, v))
}

// MappingID applies equality check predicate on the "mapping_id" field. It's identical to MappingIDEQ.
func MappingID(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEQ(FieldMappingID, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEQ(FieldDeletedBy, v))
}

// VendorProfileID applies equality check predicate on the "vendor_profile_id" field. It's identical to VendorProfileIDEQ.
func VendorProfileID(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEQ(FieldVendorProfileID, v))
}

// PhoneNumberID applies equality check predicate on the "phone_number_id" field. It's identical to PhoneNumberIDEQ.
func PhoneNumberID(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEQ(FieldPhoneNumberID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// MappingIDEQ applies the EQ predicate on the "mapping_id" field.
func MappingIDEQ(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEQ(FieldMappingID, v))
}

// MappingIDNEQ applies the NEQ predicate on the "mapping_id" field.
func MappingIDNEQ(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNEQ(FieldMappingID, v))
}

// MappingIDIn applies the In predicate on the "mapping_id" field.
func MappingIDIn(vs ...string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldIn(FieldMappingID, vs...))
}

// MappingIDNotIn applies the NotIn predicate on the "mapping_id" field.
func MappingIDNotIn(vs ...string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNotIn(FieldMappingID, vs...))
}

// MappingIDGT applies the GT predicate on the "mapping_id" field.
func MappingIDGT(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldGT(FieldMappingID, v))
}

// MappingIDGTE applies the GTE predicate on the "mapping_id" field.
func MappingIDGTE(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldGTE(FieldMappingID, v))
}

// MappingIDLT applies the LT predicate on the "mapping_id" field.
func MappingIDLT(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldLT(FieldMappingID, v))
}

// MappingIDLTE applies the LTE predicate on the "mapping_id" field.
func MappingIDLTE(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldLTE(FieldMappingID, v))
}

// MappingIDContains applies the Contains predicate on the "mapping_id" field.
func MappingIDContains(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldContains(FieldMappingID, v))
}

// MappingIDHasPrefix applies the HasPrefix predicate on the "mapping_id" field.
func MappingIDHasPrefix(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldHasPrefix(FieldMappingID, v))
}

// MappingIDHasSuffix applies the HasSuffix predicate on the "mapping_id" field.
func MappingIDHasSuffix(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldHasSuffix(FieldMappingID, v))
}

// MappingIDEqualFold applies the EqualFold predicate on the "mapping_id" field.
func MappingIDEqualFold(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEqualFold(FieldMappingID, v))
}

// MappingIDContainsFold applies the ContainsFold predicate on the "mapping_id" field.
func MappingIDContainsFold(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldContainsFold(FieldMappingID, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldContainsFold(FieldDeletedBy, v))
}

// VendorProfileIDEQ applies the EQ predicate on the "vendor_profile_id" field.
func VendorProfileIDEQ(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEQ(FieldVendorProfileID, v))
}

// VendorProfileIDNEQ applies the NEQ predicate on the "vendor_profile_id" field.
func VendorProfileIDNEQ(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNEQ(FieldVendorProfileID, v))
}

// VendorProfileIDIn applies the In predicate on the "vendor_profile_id" field.
func VendorProfileIDIn(vs ...string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldIn(FieldVendorProfileID, vs...))
}

// VendorProfileIDNotIn applies the NotIn predicate on the "vendor_profile_id" field.
func VendorProfileIDNotIn(vs ...string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNotIn(FieldVendorProfileID, vs...))
}

// VendorProfileIDGT applies the GT predicate on the "vendor_profile_id" field.
func VendorProfileIDGT(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldGT(FieldVendorProfileID, v))
}

// VendorProfileIDGTE applies the GTE predicate on the "vendor_profile_id" field.
func VendorProfileIDGTE(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldGTE(FieldVendorProfileID, v))
}

// VendorProfileIDLT applies the LT predicate on the "vendor_profile_id" field.
func VendorProfileIDLT(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldLT(FieldVendorProfileID, v))
}

// VendorProfileIDLTE applies the LTE predicate on the "vendor_profile_id" field.
func VendorProfileIDLTE(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldLTE(FieldVendorProfileID, v))
}

// VendorProfileIDContains applies the Contains predicate on the "vendor_profile_id" field.
func VendorProfileIDContains(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldContains(FieldVendorProfileID, v))
}

// VendorProfileIDHasPrefix applies the HasPrefix predicate on the "vendor_profile_id" field.
func VendorProfileIDHasPrefix(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldHasPrefix(FieldVendorProfileID, v))
}

// VendorProfileIDHasSuffix applies the HasSuffix predicate on the "vendor_profile_id" field.
func VendorProfileIDHasSuffix(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldHasSuffix(FieldVendorProfileID, v))
}

// VendorProfileIDEqualFold applies the EqualFold predicate on the "vendor_profile_id" field.
func VendorProfileIDEqualFold(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEqualFold(FieldVendorProfileID, v))
}

// VendorProfileIDContainsFold applies the ContainsFold predicate on the "vendor_profile_id" field.
func VendorProfileIDContainsFold(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldContainsFold(FieldVendorProfileID, v))
}

// PhoneNumberIDEQ applies the EQ predicate on the "phone_number_id" field.
func PhoneNumberIDEQ(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEQ(FieldPhoneNumberID, v))
}

// PhoneNumberIDNEQ applies the NEQ predicate on the "phone_number_id" field.
func PhoneNumberIDNEQ(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNEQ(FieldPhoneNumberID, v))
}

// PhoneNumberIDIn applies the In predicate on the "phone_number_id" field.
func PhoneNumberIDIn(vs ...string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldIn(FieldPhoneNumberID, vs...))
}

// PhoneNumberIDNotIn applies the NotIn predicate on the "phone_number_id" field.
func PhoneNumberIDNotIn(vs ...string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldNotIn(FieldPhoneNumberID, vs...))
}

// PhoneNumberIDGT applies the GT predicate on the "phone_number_id" field.
func PhoneNumberIDGT(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldGT(FieldPhoneNumberID, v))
}

// PhoneNumberIDGTE applies the GTE predicate on the "phone_number_id" field.
func PhoneNumberIDGTE(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldGTE(FieldPhoneNumberID, v))
}

// PhoneNumberIDLT applies the LT predicate on the "phone_number_id" field.
func PhoneNumberIDLT(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldLT(FieldPhoneNumberID, v))
}

// PhoneNumberIDLTE applies the LTE predicate on the "phone_number_id" field.
func PhoneNumberIDLTE(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldLTE(FieldPhoneNumberID, v))
}

// PhoneNumberIDContains applies the Contains predicate on the "phone_number_id" field.
func PhoneNumberIDContains(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldContains(FieldPhoneNumberID, v))
}

// PhoneNumberIDHasPrefix applies the HasPrefix predicate on the "phone_number_id" field.
func PhoneNumberIDHasPrefix(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldHasPrefix(FieldPhoneNumberID, v))
}

// PhoneNumberIDHasSuffix applies the HasSuffix predicate on the "phone_number_id" field.
func PhoneNumberIDHasSuffix(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldHasSuffix(FieldPhoneNumberID, v))
}

// PhoneNumberIDEqualFold applies the EqualFold predicate on the "phone_number_id" field.
func PhoneNumberIDEqualFold(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldEqualFold(FieldPhoneNumberID, v))
}

// PhoneNumberIDContainsFold applies the ContainsFold predicate on the "phone_number_id" field.
func PhoneNumberIDContainsFold(v string) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.FieldContainsFold(FieldPhoneNumberID, v))
}

// HasPhoneNumber applies the HasEdge predicate on the "phone_number" edge.
func HasPhoneNumber() predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PhoneNumberTable, PhoneNumberColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.PhoneNumber
		step.Edge.Schema = schemaConfig.VendorProfilePhoneNumber
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPhoneNumberWith applies the HasEdge predicate on the "phone_number" edge with a given conditions (other predicates).
func HasPhoneNumberWith(preds ...predicate.PhoneNumber) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(func(s *sql.Selector) {
		step := newPhoneNumberStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.PhoneNumber
		step.Edge.Schema = schemaConfig.VendorProfilePhoneNumber
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProfile applies the HasEdge predicate on the "profile" edge.
func HasProfile() predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProfileTable, ProfileColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.VendorProfile
		step.Edge.Schema = schemaConfig.VendorProfilePhoneNumber
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileWith applies the HasEdge predicate on the "profile" edge with a given conditions (other predicates).
func HasProfileWith(preds ...predicate.VendorProfile) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(func(s *sql.Selector) {
		step := newProfileStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.VendorProfile
		step.Edge.Schema = schemaConfig.VendorProfilePhoneNumber
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvents applies the HasEdge predicate on the "events" edge.
func HasEvents() predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventsTable, EventsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.Event
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventsWith applies the HasEdge predicate on the "events" edge with a given conditions (other predicates).
func HasEventsWith(preds ...predicate.Event) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(func(s *sql.Selector) {
		step := newEventsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.Event
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VendorProfilePhoneNumber) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VendorProfilePhoneNumber) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VendorProfilePhoneNumber) predicate.VendorProfilePhoneNumber {
	return predicate.VendorProfilePhoneNumber(sql.NotPredicates(p))
}
