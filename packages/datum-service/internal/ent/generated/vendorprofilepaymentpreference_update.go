// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/organization"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofile"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilepaymentpreference"
	"github.com/datum-cloud/datum-os/pkg/enums"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// VendorProfilePaymentPreferenceUpdate is the builder for updating VendorProfilePaymentPreference entities.
type VendorProfilePaymentPreferenceUpdate struct {
	config
	hooks    []Hook
	mutation *VendorProfilePaymentPreferenceMutation
}

// Where appends a list predicates to the VendorProfilePaymentPreferenceUpdate builder.
func (vpppu *VendorProfilePaymentPreferenceUpdate) Where(ps ...predicate.VendorProfilePaymentPreference) *VendorProfilePaymentPreferenceUpdate {
	vpppu.mutation.Where(ps...)
	return vpppu
}

// SetUpdatedAt sets the "updated_at" field.
func (vpppu *VendorProfilePaymentPreferenceUpdate) SetUpdatedAt(t time.Time) *VendorProfilePaymentPreferenceUpdate {
	vpppu.mutation.SetUpdatedAt(t)
	return vpppu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vpppu *VendorProfilePaymentPreferenceUpdate) ClearUpdatedAt() *VendorProfilePaymentPreferenceUpdate {
	vpppu.mutation.ClearUpdatedAt()
	return vpppu
}

// SetUpdatedBy sets the "updated_by" field.
func (vpppu *VendorProfilePaymentPreferenceUpdate) SetUpdatedBy(s string) *VendorProfilePaymentPreferenceUpdate {
	vpppu.mutation.SetUpdatedBy(s)
	return vpppu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vpppu *VendorProfilePaymentPreferenceUpdate) SetNillableUpdatedBy(s *string) *VendorProfilePaymentPreferenceUpdate {
	if s != nil {
		vpppu.SetUpdatedBy(*s)
	}
	return vpppu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vpppu *VendorProfilePaymentPreferenceUpdate) ClearUpdatedBy() *VendorProfilePaymentPreferenceUpdate {
	vpppu.mutation.ClearUpdatedBy()
	return vpppu
}

// SetDeletedAt sets the "deleted_at" field.
func (vpppu *VendorProfilePaymentPreferenceUpdate) SetDeletedAt(t time.Time) *VendorProfilePaymentPreferenceUpdate {
	vpppu.mutation.SetDeletedAt(t)
	return vpppu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vpppu *VendorProfilePaymentPreferenceUpdate) SetNillableDeletedAt(t *time.Time) *VendorProfilePaymentPreferenceUpdate {
	if t != nil {
		vpppu.SetDeletedAt(*t)
	}
	return vpppu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vpppu *VendorProfilePaymentPreferenceUpdate) ClearDeletedAt() *VendorProfilePaymentPreferenceUpdate {
	vpppu.mutation.ClearDeletedAt()
	return vpppu
}

// SetDeletedBy sets the "deleted_by" field.
func (vpppu *VendorProfilePaymentPreferenceUpdate) SetDeletedBy(s string) *VendorProfilePaymentPreferenceUpdate {
	vpppu.mutation.SetDeletedBy(s)
	return vpppu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vpppu *VendorProfilePaymentPreferenceUpdate) SetNillableDeletedBy(s *string) *VendorProfilePaymentPreferenceUpdate {
	if s != nil {
		vpppu.SetDeletedBy(*s)
	}
	return vpppu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (vpppu *VendorProfilePaymentPreferenceUpdate) ClearDeletedBy() *VendorProfilePaymentPreferenceUpdate {
	vpppu.mutation.ClearDeletedBy()
	return vpppu
}

// SetTags sets the "tags" field.
func (vpppu *VendorProfilePaymentPreferenceUpdate) SetTags(s []string) *VendorProfilePaymentPreferenceUpdate {
	vpppu.mutation.SetTags(s)
	return vpppu
}

// AppendTags appends s to the "tags" field.
func (vpppu *VendorProfilePaymentPreferenceUpdate) AppendTags(s []string) *VendorProfilePaymentPreferenceUpdate {
	vpppu.mutation.AppendTags(s)
	return vpppu
}

// ClearTags clears the value of the "tags" field.
func (vpppu *VendorProfilePaymentPreferenceUpdate) ClearTags() *VendorProfilePaymentPreferenceUpdate {
	vpppu.mutation.ClearTags()
	return vpppu
}

// SetOwnerID sets the "owner_id" field.
func (vpppu *VendorProfilePaymentPreferenceUpdate) SetOwnerID(s string) *VendorProfilePaymentPreferenceUpdate {
	vpppu.mutation.SetOwnerID(s)
	return vpppu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (vpppu *VendorProfilePaymentPreferenceUpdate) SetNillableOwnerID(s *string) *VendorProfilePaymentPreferenceUpdate {
	if s != nil {
		vpppu.SetOwnerID(*s)
	}
	return vpppu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (vpppu *VendorProfilePaymentPreferenceUpdate) ClearOwnerID() *VendorProfilePaymentPreferenceUpdate {
	vpppu.mutation.ClearOwnerID()
	return vpppu
}

// SetVendorProfileID sets the "vendor_profile_id" field.
func (vpppu *VendorProfilePaymentPreferenceUpdate) SetVendorProfileID(s string) *VendorProfilePaymentPreferenceUpdate {
	vpppu.mutation.SetVendorProfileID(s)
	return vpppu
}

// SetNillableVendorProfileID sets the "vendor_profile_id" field if the given value is not nil.
func (vpppu *VendorProfilePaymentPreferenceUpdate) SetNillableVendorProfileID(s *string) *VendorProfilePaymentPreferenceUpdate {
	if s != nil {
		vpppu.SetVendorProfileID(*s)
	}
	return vpppu
}

// ClearVendorProfileID clears the value of the "vendor_profile_id" field.
func (vpppu *VendorProfilePaymentPreferenceUpdate) ClearVendorProfileID() *VendorProfilePaymentPreferenceUpdate {
	vpppu.mutation.ClearVendorProfileID()
	return vpppu
}

// SetPreferred sets the "preferred" field.
func (vpppu *VendorProfilePaymentPreferenceUpdate) SetPreferred(b bool) *VendorProfilePaymentPreferenceUpdate {
	vpppu.mutation.SetPreferred(b)
	return vpppu
}

// SetNillablePreferred sets the "preferred" field if the given value is not nil.
func (vpppu *VendorProfilePaymentPreferenceUpdate) SetNillablePreferred(b *bool) *VendorProfilePaymentPreferenceUpdate {
	if b != nil {
		vpppu.SetPreferred(*b)
	}
	return vpppu
}

// SetMethod sets the "method" field.
func (vpppu *VendorProfilePaymentPreferenceUpdate) SetMethod(em enums.PaymentMethod) *VendorProfilePaymentPreferenceUpdate {
	vpppu.mutation.SetMethod(em)
	return vpppu
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (vpppu *VendorProfilePaymentPreferenceUpdate) SetNillableMethod(em *enums.PaymentMethod) *VendorProfilePaymentPreferenceUpdate {
	if em != nil {
		vpppu.SetMethod(*em)
	}
	return vpppu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (vpppu *VendorProfilePaymentPreferenceUpdate) SetOwner(o *Organization) *VendorProfilePaymentPreferenceUpdate {
	return vpppu.SetOwnerID(o.ID)
}

// SetVendorProfile sets the "vendor_profile" edge to the VendorProfile entity.
func (vpppu *VendorProfilePaymentPreferenceUpdate) SetVendorProfile(v *VendorProfile) *VendorProfilePaymentPreferenceUpdate {
	return vpppu.SetVendorProfileID(v.ID)
}

// Mutation returns the VendorProfilePaymentPreferenceMutation object of the builder.
func (vpppu *VendorProfilePaymentPreferenceUpdate) Mutation() *VendorProfilePaymentPreferenceMutation {
	return vpppu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (vpppu *VendorProfilePaymentPreferenceUpdate) ClearOwner() *VendorProfilePaymentPreferenceUpdate {
	vpppu.mutation.ClearOwner()
	return vpppu
}

// ClearVendorProfile clears the "vendor_profile" edge to the VendorProfile entity.
func (vpppu *VendorProfilePaymentPreferenceUpdate) ClearVendorProfile() *VendorProfilePaymentPreferenceUpdate {
	vpppu.mutation.ClearVendorProfile()
	return vpppu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vpppu *VendorProfilePaymentPreferenceUpdate) Save(ctx context.Context) (int, error) {
	if err := vpppu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, vpppu.sqlSave, vpppu.mutation, vpppu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vpppu *VendorProfilePaymentPreferenceUpdate) SaveX(ctx context.Context) int {
	affected, err := vpppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vpppu *VendorProfilePaymentPreferenceUpdate) Exec(ctx context.Context) error {
	_, err := vpppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpppu *VendorProfilePaymentPreferenceUpdate) ExecX(ctx context.Context) {
	if err := vpppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vpppu *VendorProfilePaymentPreferenceUpdate) defaults() error {
	if _, ok := vpppu.mutation.UpdatedAt(); !ok && !vpppu.mutation.UpdatedAtCleared() {
		if vendorprofilepaymentpreference.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized vendorprofilepaymentpreference.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := vendorprofilepaymentpreference.UpdateDefaultUpdatedAt()
		vpppu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vpppu *VendorProfilePaymentPreferenceUpdate) check() error {
	if v, ok := vpppu.mutation.OwnerID(); ok {
		if err := vendorprofilepaymentpreference.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "VendorProfilePaymentPreference.owner_id": %w`, err)}
		}
	}
	if v, ok := vpppu.mutation.Method(); ok {
		if err := vendorprofilepaymentpreference.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`generated: validator failed for field "VendorProfilePaymentPreference.method": %w`, err)}
		}
	}
	return nil
}

func (vpppu *VendorProfilePaymentPreferenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vpppu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendorprofilepaymentpreference.Table, vendorprofilepaymentpreference.Columns, sqlgraph.NewFieldSpec(vendorprofilepaymentpreference.FieldID, field.TypeString))
	if ps := vpppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vpppu.mutation.CreatedAtCleared() {
		_spec.ClearField(vendorprofilepaymentpreference.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vpppu.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldUpdatedAt, field.TypeTime, value)
	}
	if vpppu.mutation.UpdatedAtCleared() {
		_spec.ClearField(vendorprofilepaymentpreference.FieldUpdatedAt, field.TypeTime)
	}
	if vpppu.mutation.CreatedByCleared() {
		_spec.ClearField(vendorprofilepaymentpreference.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vpppu.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldUpdatedBy, field.TypeString, value)
	}
	if vpppu.mutation.UpdatedByCleared() {
		_spec.ClearField(vendorprofilepaymentpreference.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vpppu.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldDeletedAt, field.TypeTime, value)
	}
	if vpppu.mutation.DeletedAtCleared() {
		_spec.ClearField(vendorprofilepaymentpreference.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vpppu.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldDeletedBy, field.TypeString, value)
	}
	if vpppu.mutation.DeletedByCleared() {
		_spec.ClearField(vendorprofilepaymentpreference.FieldDeletedBy, field.TypeString)
	}
	if value, ok := vpppu.mutation.Tags(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldTags, field.TypeJSON, value)
	}
	if value, ok := vpppu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vendorprofilepaymentpreference.FieldTags, value)
		})
	}
	if vpppu.mutation.TagsCleared() {
		_spec.ClearField(vendorprofilepaymentpreference.FieldTags, field.TypeJSON)
	}
	if value, ok := vpppu.mutation.Preferred(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldPreferred, field.TypeBool, value)
	}
	if value, ok := vpppu.mutation.Method(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldMethod, field.TypeEnum, value)
	}
	if vpppu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorprofilepaymentpreference.OwnerTable,
			Columns: []string{vendorprofilepaymentpreference.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpppu.schemaConfig.VendorProfilePaymentPreference
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpppu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorprofilepaymentpreference.OwnerTable,
			Columns: []string{vendorprofilepaymentpreference.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpppu.schemaConfig.VendorProfilePaymentPreference
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vpppu.mutation.VendorProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorprofilepaymentpreference.VendorProfileTable,
			Columns: []string{vendorprofilepaymentpreference.VendorProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpppu.schemaConfig.VendorProfilePaymentPreference
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpppu.mutation.VendorProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorprofilepaymentpreference.VendorProfileTable,
			Columns: []string{vendorprofilepaymentpreference.VendorProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpppu.schemaConfig.VendorProfilePaymentPreference
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = vpppu.schemaConfig.VendorProfilePaymentPreference
	ctx = internal.NewSchemaConfigContext(ctx, vpppu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, vpppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorprofilepaymentpreference.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vpppu.mutation.done = true
	return n, nil
}

// VendorProfilePaymentPreferenceUpdateOne is the builder for updating a single VendorProfilePaymentPreference entity.
type VendorProfilePaymentPreferenceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VendorProfilePaymentPreferenceMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) SetUpdatedAt(t time.Time) *VendorProfilePaymentPreferenceUpdateOne {
	vpppuo.mutation.SetUpdatedAt(t)
	return vpppuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) ClearUpdatedAt() *VendorProfilePaymentPreferenceUpdateOne {
	vpppuo.mutation.ClearUpdatedAt()
	return vpppuo
}

// SetUpdatedBy sets the "updated_by" field.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) SetUpdatedBy(s string) *VendorProfilePaymentPreferenceUpdateOne {
	vpppuo.mutation.SetUpdatedBy(s)
	return vpppuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) SetNillableUpdatedBy(s *string) *VendorProfilePaymentPreferenceUpdateOne {
	if s != nil {
		vpppuo.SetUpdatedBy(*s)
	}
	return vpppuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) ClearUpdatedBy() *VendorProfilePaymentPreferenceUpdateOne {
	vpppuo.mutation.ClearUpdatedBy()
	return vpppuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) SetDeletedAt(t time.Time) *VendorProfilePaymentPreferenceUpdateOne {
	vpppuo.mutation.SetDeletedAt(t)
	return vpppuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) SetNillableDeletedAt(t *time.Time) *VendorProfilePaymentPreferenceUpdateOne {
	if t != nil {
		vpppuo.SetDeletedAt(*t)
	}
	return vpppuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) ClearDeletedAt() *VendorProfilePaymentPreferenceUpdateOne {
	vpppuo.mutation.ClearDeletedAt()
	return vpppuo
}

// SetDeletedBy sets the "deleted_by" field.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) SetDeletedBy(s string) *VendorProfilePaymentPreferenceUpdateOne {
	vpppuo.mutation.SetDeletedBy(s)
	return vpppuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) SetNillableDeletedBy(s *string) *VendorProfilePaymentPreferenceUpdateOne {
	if s != nil {
		vpppuo.SetDeletedBy(*s)
	}
	return vpppuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) ClearDeletedBy() *VendorProfilePaymentPreferenceUpdateOne {
	vpppuo.mutation.ClearDeletedBy()
	return vpppuo
}

// SetTags sets the "tags" field.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) SetTags(s []string) *VendorProfilePaymentPreferenceUpdateOne {
	vpppuo.mutation.SetTags(s)
	return vpppuo
}

// AppendTags appends s to the "tags" field.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) AppendTags(s []string) *VendorProfilePaymentPreferenceUpdateOne {
	vpppuo.mutation.AppendTags(s)
	return vpppuo
}

// ClearTags clears the value of the "tags" field.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) ClearTags() *VendorProfilePaymentPreferenceUpdateOne {
	vpppuo.mutation.ClearTags()
	return vpppuo
}

// SetOwnerID sets the "owner_id" field.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) SetOwnerID(s string) *VendorProfilePaymentPreferenceUpdateOne {
	vpppuo.mutation.SetOwnerID(s)
	return vpppuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) SetNillableOwnerID(s *string) *VendorProfilePaymentPreferenceUpdateOne {
	if s != nil {
		vpppuo.SetOwnerID(*s)
	}
	return vpppuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) ClearOwnerID() *VendorProfilePaymentPreferenceUpdateOne {
	vpppuo.mutation.ClearOwnerID()
	return vpppuo
}

// SetVendorProfileID sets the "vendor_profile_id" field.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) SetVendorProfileID(s string) *VendorProfilePaymentPreferenceUpdateOne {
	vpppuo.mutation.SetVendorProfileID(s)
	return vpppuo
}

// SetNillableVendorProfileID sets the "vendor_profile_id" field if the given value is not nil.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) SetNillableVendorProfileID(s *string) *VendorProfilePaymentPreferenceUpdateOne {
	if s != nil {
		vpppuo.SetVendorProfileID(*s)
	}
	return vpppuo
}

// ClearVendorProfileID clears the value of the "vendor_profile_id" field.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) ClearVendorProfileID() *VendorProfilePaymentPreferenceUpdateOne {
	vpppuo.mutation.ClearVendorProfileID()
	return vpppuo
}

// SetPreferred sets the "preferred" field.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) SetPreferred(b bool) *VendorProfilePaymentPreferenceUpdateOne {
	vpppuo.mutation.SetPreferred(b)
	return vpppuo
}

// SetNillablePreferred sets the "preferred" field if the given value is not nil.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) SetNillablePreferred(b *bool) *VendorProfilePaymentPreferenceUpdateOne {
	if b != nil {
		vpppuo.SetPreferred(*b)
	}
	return vpppuo
}

// SetMethod sets the "method" field.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) SetMethod(em enums.PaymentMethod) *VendorProfilePaymentPreferenceUpdateOne {
	vpppuo.mutation.SetMethod(em)
	return vpppuo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) SetNillableMethod(em *enums.PaymentMethod) *VendorProfilePaymentPreferenceUpdateOne {
	if em != nil {
		vpppuo.SetMethod(*em)
	}
	return vpppuo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) SetOwner(o *Organization) *VendorProfilePaymentPreferenceUpdateOne {
	return vpppuo.SetOwnerID(o.ID)
}

// SetVendorProfile sets the "vendor_profile" edge to the VendorProfile entity.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) SetVendorProfile(v *VendorProfile) *VendorProfilePaymentPreferenceUpdateOne {
	return vpppuo.SetVendorProfileID(v.ID)
}

// Mutation returns the VendorProfilePaymentPreferenceMutation object of the builder.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) Mutation() *VendorProfilePaymentPreferenceMutation {
	return vpppuo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) ClearOwner() *VendorProfilePaymentPreferenceUpdateOne {
	vpppuo.mutation.ClearOwner()
	return vpppuo
}

// ClearVendorProfile clears the "vendor_profile" edge to the VendorProfile entity.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) ClearVendorProfile() *VendorProfilePaymentPreferenceUpdateOne {
	vpppuo.mutation.ClearVendorProfile()
	return vpppuo
}

// Where appends a list predicates to the VendorProfilePaymentPreferenceUpdate builder.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) Where(ps ...predicate.VendorProfilePaymentPreference) *VendorProfilePaymentPreferenceUpdateOne {
	vpppuo.mutation.Where(ps...)
	return vpppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) Select(field string, fields ...string) *VendorProfilePaymentPreferenceUpdateOne {
	vpppuo.fields = append([]string{field}, fields...)
	return vpppuo
}

// Save executes the query and returns the updated VendorProfilePaymentPreference entity.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) Save(ctx context.Context) (*VendorProfilePaymentPreference, error) {
	if err := vpppuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, vpppuo.sqlSave, vpppuo.mutation, vpppuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) SaveX(ctx context.Context) *VendorProfilePaymentPreference {
	node, err := vpppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) Exec(ctx context.Context) error {
	_, err := vpppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) ExecX(ctx context.Context) {
	if err := vpppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) defaults() error {
	if _, ok := vpppuo.mutation.UpdatedAt(); !ok && !vpppuo.mutation.UpdatedAtCleared() {
		if vendorprofilepaymentpreference.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized vendorprofilepaymentpreference.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := vendorprofilepaymentpreference.UpdateDefaultUpdatedAt()
		vpppuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) check() error {
	if v, ok := vpppuo.mutation.OwnerID(); ok {
		if err := vendorprofilepaymentpreference.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "VendorProfilePaymentPreference.owner_id": %w`, err)}
		}
	}
	if v, ok := vpppuo.mutation.Method(); ok {
		if err := vendorprofilepaymentpreference.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`generated: validator failed for field "VendorProfilePaymentPreference.method": %w`, err)}
		}
	}
	return nil
}

func (vpppuo *VendorProfilePaymentPreferenceUpdateOne) sqlSave(ctx context.Context) (_node *VendorProfilePaymentPreference, err error) {
	if err := vpppuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendorprofilepaymentpreference.Table, vendorprofilepaymentpreference.Columns, sqlgraph.NewFieldSpec(vendorprofilepaymentpreference.FieldID, field.TypeString))
	id, ok := vpppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "VendorProfilePaymentPreference.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vpppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vendorprofilepaymentpreference.FieldID)
		for _, f := range fields {
			if !vendorprofilepaymentpreference.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != vendorprofilepaymentpreference.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vpppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vpppuo.mutation.CreatedAtCleared() {
		_spec.ClearField(vendorprofilepaymentpreference.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := vpppuo.mutation.UpdatedAt(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldUpdatedAt, field.TypeTime, value)
	}
	if vpppuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(vendorprofilepaymentpreference.FieldUpdatedAt, field.TypeTime)
	}
	if vpppuo.mutation.CreatedByCleared() {
		_spec.ClearField(vendorprofilepaymentpreference.FieldCreatedBy, field.TypeString)
	}
	if value, ok := vpppuo.mutation.UpdatedBy(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldUpdatedBy, field.TypeString, value)
	}
	if vpppuo.mutation.UpdatedByCleared() {
		_spec.ClearField(vendorprofilepaymentpreference.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := vpppuo.mutation.DeletedAt(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldDeletedAt, field.TypeTime, value)
	}
	if vpppuo.mutation.DeletedAtCleared() {
		_spec.ClearField(vendorprofilepaymentpreference.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vpppuo.mutation.DeletedBy(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldDeletedBy, field.TypeString, value)
	}
	if vpppuo.mutation.DeletedByCleared() {
		_spec.ClearField(vendorprofilepaymentpreference.FieldDeletedBy, field.TypeString)
	}
	if value, ok := vpppuo.mutation.Tags(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldTags, field.TypeJSON, value)
	}
	if value, ok := vpppuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vendorprofilepaymentpreference.FieldTags, value)
		})
	}
	if vpppuo.mutation.TagsCleared() {
		_spec.ClearField(vendorprofilepaymentpreference.FieldTags, field.TypeJSON)
	}
	if value, ok := vpppuo.mutation.Preferred(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldPreferred, field.TypeBool, value)
	}
	if value, ok := vpppuo.mutation.Method(); ok {
		_spec.SetField(vendorprofilepaymentpreference.FieldMethod, field.TypeEnum, value)
	}
	if vpppuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorprofilepaymentpreference.OwnerTable,
			Columns: []string{vendorprofilepaymentpreference.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpppuo.schemaConfig.VendorProfilePaymentPreference
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpppuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorprofilepaymentpreference.OwnerTable,
			Columns: []string{vendorprofilepaymentpreference.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpppuo.schemaConfig.VendorProfilePaymentPreference
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vpppuo.mutation.VendorProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorprofilepaymentpreference.VendorProfileTable,
			Columns: []string{vendorprofilepaymentpreference.VendorProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpppuo.schemaConfig.VendorProfilePaymentPreference
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vpppuo.mutation.VendorProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vendorprofilepaymentpreference.VendorProfileTable,
			Columns: []string{vendorprofilepaymentpreference.VendorProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString),
			},
		}
		edge.Schema = vpppuo.schemaConfig.VendorProfilePaymentPreference
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = vpppuo.schemaConfig.VendorProfilePaymentPreference
	ctx = internal.NewSchemaConfigContext(ctx, vpppuo.schemaConfig)
	_node = &VendorProfilePaymentPreference{config: vpppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vpppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorprofilepaymentpreference.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vpppuo.mutation.done = true
	return _node, nil
}
