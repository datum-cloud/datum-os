// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilepostaladdresshistory"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// VendorProfilePostalAddressHistoryQuery is the builder for querying VendorProfilePostalAddressHistory entities.
type VendorProfilePostalAddressHistoryQuery struct {
	config
	ctx        *QueryContext
	order      []vendorprofilepostaladdresshistory.OrderOption
	inters     []Interceptor
	predicates []predicate.VendorProfilePostalAddressHistory
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*VendorProfilePostalAddressHistory) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VendorProfilePostalAddressHistoryQuery builder.
func (vppahq *VendorProfilePostalAddressHistoryQuery) Where(ps ...predicate.VendorProfilePostalAddressHistory) *VendorProfilePostalAddressHistoryQuery {
	vppahq.predicates = append(vppahq.predicates, ps...)
	return vppahq
}

// Limit the number of records to be returned by this query.
func (vppahq *VendorProfilePostalAddressHistoryQuery) Limit(limit int) *VendorProfilePostalAddressHistoryQuery {
	vppahq.ctx.Limit = &limit
	return vppahq
}

// Offset to start from.
func (vppahq *VendorProfilePostalAddressHistoryQuery) Offset(offset int) *VendorProfilePostalAddressHistoryQuery {
	vppahq.ctx.Offset = &offset
	return vppahq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vppahq *VendorProfilePostalAddressHistoryQuery) Unique(unique bool) *VendorProfilePostalAddressHistoryQuery {
	vppahq.ctx.Unique = &unique
	return vppahq
}

// Order specifies how the records should be ordered.
func (vppahq *VendorProfilePostalAddressHistoryQuery) Order(o ...vendorprofilepostaladdresshistory.OrderOption) *VendorProfilePostalAddressHistoryQuery {
	vppahq.order = append(vppahq.order, o...)
	return vppahq
}

// First returns the first VendorProfilePostalAddressHistory entity from the query.
// Returns a *NotFoundError when no VendorProfilePostalAddressHistory was found.
func (vppahq *VendorProfilePostalAddressHistoryQuery) First(ctx context.Context) (*VendorProfilePostalAddressHistory, error) {
	nodes, err := vppahq.Limit(1).All(setContextOp(ctx, vppahq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{vendorprofilepostaladdresshistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vppahq *VendorProfilePostalAddressHistoryQuery) FirstX(ctx context.Context) *VendorProfilePostalAddressHistory {
	node, err := vppahq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VendorProfilePostalAddressHistory ID from the query.
// Returns a *NotFoundError when no VendorProfilePostalAddressHistory ID was found.
func (vppahq *VendorProfilePostalAddressHistoryQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = vppahq.Limit(1).IDs(setContextOp(ctx, vppahq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{vendorprofilepostaladdresshistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vppahq *VendorProfilePostalAddressHistoryQuery) FirstIDX(ctx context.Context) string {
	id, err := vppahq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VendorProfilePostalAddressHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one VendorProfilePostalAddressHistory entity is found.
// Returns a *NotFoundError when no VendorProfilePostalAddressHistory entities are found.
func (vppahq *VendorProfilePostalAddressHistoryQuery) Only(ctx context.Context) (*VendorProfilePostalAddressHistory, error) {
	nodes, err := vppahq.Limit(2).All(setContextOp(ctx, vppahq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{vendorprofilepostaladdresshistory.Label}
	default:
		return nil, &NotSingularError{vendorprofilepostaladdresshistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vppahq *VendorProfilePostalAddressHistoryQuery) OnlyX(ctx context.Context) *VendorProfilePostalAddressHistory {
	node, err := vppahq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VendorProfilePostalAddressHistory ID in the query.
// Returns a *NotSingularError when more than one VendorProfilePostalAddressHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (vppahq *VendorProfilePostalAddressHistoryQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = vppahq.Limit(2).IDs(setContextOp(ctx, vppahq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{vendorprofilepostaladdresshistory.Label}
	default:
		err = &NotSingularError{vendorprofilepostaladdresshistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vppahq *VendorProfilePostalAddressHistoryQuery) OnlyIDX(ctx context.Context) string {
	id, err := vppahq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VendorProfilePostalAddressHistories.
func (vppahq *VendorProfilePostalAddressHistoryQuery) All(ctx context.Context) ([]*VendorProfilePostalAddressHistory, error) {
	ctx = setContextOp(ctx, vppahq.ctx, ent.OpQueryAll)
	if err := vppahq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*VendorProfilePostalAddressHistory, *VendorProfilePostalAddressHistoryQuery]()
	return withInterceptors[[]*VendorProfilePostalAddressHistory](ctx, vppahq, qr, vppahq.inters)
}

// AllX is like All, but panics if an error occurs.
func (vppahq *VendorProfilePostalAddressHistoryQuery) AllX(ctx context.Context) []*VendorProfilePostalAddressHistory {
	nodes, err := vppahq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VendorProfilePostalAddressHistory IDs.
func (vppahq *VendorProfilePostalAddressHistoryQuery) IDs(ctx context.Context) (ids []string, err error) {
	if vppahq.ctx.Unique == nil && vppahq.path != nil {
		vppahq.Unique(true)
	}
	ctx = setContextOp(ctx, vppahq.ctx, ent.OpQueryIDs)
	if err = vppahq.Select(vendorprofilepostaladdresshistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vppahq *VendorProfilePostalAddressHistoryQuery) IDsX(ctx context.Context) []string {
	ids, err := vppahq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vppahq *VendorProfilePostalAddressHistoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, vppahq.ctx, ent.OpQueryCount)
	if err := vppahq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, vppahq, querierCount[*VendorProfilePostalAddressHistoryQuery](), vppahq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (vppahq *VendorProfilePostalAddressHistoryQuery) CountX(ctx context.Context) int {
	count, err := vppahq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vppahq *VendorProfilePostalAddressHistoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, vppahq.ctx, ent.OpQueryExist)
	switch _, err := vppahq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (vppahq *VendorProfilePostalAddressHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := vppahq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VendorProfilePostalAddressHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vppahq *VendorProfilePostalAddressHistoryQuery) Clone() *VendorProfilePostalAddressHistoryQuery {
	if vppahq == nil {
		return nil
	}
	return &VendorProfilePostalAddressHistoryQuery{
		config:     vppahq.config,
		ctx:        vppahq.ctx.Clone(),
		order:      append([]vendorprofilepostaladdresshistory.OrderOption{}, vppahq.order...),
		inters:     append([]Interceptor{}, vppahq.inters...),
		predicates: append([]predicate.VendorProfilePostalAddressHistory{}, vppahq.predicates...),
		// clone intermediate query.
		sql:  vppahq.sql.Clone(),
		path: vppahq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		HistoryTime time.Time `json:"history_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.VendorProfilePostalAddressHistory.Query().
//		GroupBy(vendorprofilepostaladdresshistory.FieldHistoryTime).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (vppahq *VendorProfilePostalAddressHistoryQuery) GroupBy(field string, fields ...string) *VendorProfilePostalAddressHistoryGroupBy {
	vppahq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &VendorProfilePostalAddressHistoryGroupBy{build: vppahq}
	grbuild.flds = &vppahq.ctx.Fields
	grbuild.label = vendorprofilepostaladdresshistory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		HistoryTime time.Time `json:"history_time,omitempty"`
//	}
//
//	client.VendorProfilePostalAddressHistory.Query().
//		Select(vendorprofilepostaladdresshistory.FieldHistoryTime).
//		Scan(ctx, &v)
func (vppahq *VendorProfilePostalAddressHistoryQuery) Select(fields ...string) *VendorProfilePostalAddressHistorySelect {
	vppahq.ctx.Fields = append(vppahq.ctx.Fields, fields...)
	sbuild := &VendorProfilePostalAddressHistorySelect{VendorProfilePostalAddressHistoryQuery: vppahq}
	sbuild.label = vendorprofilepostaladdresshistory.Label
	sbuild.flds, sbuild.scan = &vppahq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a VendorProfilePostalAddressHistorySelect configured with the given aggregations.
func (vppahq *VendorProfilePostalAddressHistoryQuery) Aggregate(fns ...AggregateFunc) *VendorProfilePostalAddressHistorySelect {
	return vppahq.Select().Aggregate(fns...)
}

func (vppahq *VendorProfilePostalAddressHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range vppahq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, vppahq); err != nil {
				return err
			}
		}
	}
	for _, f := range vppahq.ctx.Fields {
		if !vendorprofilepostaladdresshistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if vppahq.path != nil {
		prev, err := vppahq.path(ctx)
		if err != nil {
			return err
		}
		vppahq.sql = prev
	}
	return nil
}

func (vppahq *VendorProfilePostalAddressHistoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*VendorProfilePostalAddressHistory, error) {
	var (
		nodes = []*VendorProfilePostalAddressHistory{}
		_spec = vppahq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*VendorProfilePostalAddressHistory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &VendorProfilePostalAddressHistory{config: vppahq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = vppahq.schemaConfig.VendorProfilePostalAddressHistory
	ctx = internal.NewSchemaConfigContext(ctx, vppahq.schemaConfig)
	if len(vppahq.modifiers) > 0 {
		_spec.Modifiers = vppahq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, vppahq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	for i := range vppahq.loadTotal {
		if err := vppahq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (vppahq *VendorProfilePostalAddressHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vppahq.querySpec()
	_spec.Node.Schema = vppahq.schemaConfig.VendorProfilePostalAddressHistory
	ctx = internal.NewSchemaConfigContext(ctx, vppahq.schemaConfig)
	if len(vppahq.modifiers) > 0 {
		_spec.Modifiers = vppahq.modifiers
	}
	_spec.Node.Columns = vppahq.ctx.Fields
	if len(vppahq.ctx.Fields) > 0 {
		_spec.Unique = vppahq.ctx.Unique != nil && *vppahq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, vppahq.driver, _spec)
}

func (vppahq *VendorProfilePostalAddressHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(vendorprofilepostaladdresshistory.Table, vendorprofilepostaladdresshistory.Columns, sqlgraph.NewFieldSpec(vendorprofilepostaladdresshistory.FieldID, field.TypeString))
	_spec.From = vppahq.sql
	if unique := vppahq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if vppahq.path != nil {
		_spec.Unique = true
	}
	if fields := vppahq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vendorprofilepostaladdresshistory.FieldID)
		for i := range fields {
			if fields[i] != vendorprofilepostaladdresshistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := vppahq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vppahq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vppahq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vppahq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vppahq *VendorProfilePostalAddressHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vppahq.driver.Dialect())
	t1 := builder.Table(vendorprofilepostaladdresshistory.Table)
	columns := vppahq.ctx.Fields
	if len(columns) == 0 {
		columns = vendorprofilepostaladdresshistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vppahq.sql != nil {
		selector = vppahq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if vppahq.ctx.Unique != nil && *vppahq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(vppahq.schemaConfig.VendorProfilePostalAddressHistory)
	ctx = internal.NewSchemaConfigContext(ctx, vppahq.schemaConfig)
	selector.WithContext(ctx)
	for _, p := range vppahq.predicates {
		p(selector)
	}
	for _, p := range vppahq.order {
		p(selector)
	}
	if offset := vppahq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vppahq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// VendorProfilePostalAddressHistoryGroupBy is the group-by builder for VendorProfilePostalAddressHistory entities.
type VendorProfilePostalAddressHistoryGroupBy struct {
	selector
	build *VendorProfilePostalAddressHistoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vppahgb *VendorProfilePostalAddressHistoryGroupBy) Aggregate(fns ...AggregateFunc) *VendorProfilePostalAddressHistoryGroupBy {
	vppahgb.fns = append(vppahgb.fns, fns...)
	return vppahgb
}

// Scan applies the selector query and scans the result into the given value.
func (vppahgb *VendorProfilePostalAddressHistoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vppahgb.build.ctx, ent.OpQueryGroupBy)
	if err := vppahgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VendorProfilePostalAddressHistoryQuery, *VendorProfilePostalAddressHistoryGroupBy](ctx, vppahgb.build, vppahgb, vppahgb.build.inters, v)
}

func (vppahgb *VendorProfilePostalAddressHistoryGroupBy) sqlScan(ctx context.Context, root *VendorProfilePostalAddressHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(vppahgb.fns))
	for _, fn := range vppahgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*vppahgb.flds)+len(vppahgb.fns))
		for _, f := range *vppahgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*vppahgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vppahgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// VendorProfilePostalAddressHistorySelect is the builder for selecting fields of VendorProfilePostalAddressHistory entities.
type VendorProfilePostalAddressHistorySelect struct {
	*VendorProfilePostalAddressHistoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (vppahs *VendorProfilePostalAddressHistorySelect) Aggregate(fns ...AggregateFunc) *VendorProfilePostalAddressHistorySelect {
	vppahs.fns = append(vppahs.fns, fns...)
	return vppahs
}

// Scan applies the selector query and scans the result into the given value.
func (vppahs *VendorProfilePostalAddressHistorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vppahs.ctx, ent.OpQuerySelect)
	if err := vppahs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VendorProfilePostalAddressHistoryQuery, *VendorProfilePostalAddressHistorySelect](ctx, vppahs.VendorProfilePostalAddressHistoryQuery, vppahs, vppahs.inters, v)
}

func (vppahs *VendorProfilePostalAddressHistorySelect) sqlScan(ctx context.Context, root *VendorProfilePostalAddressHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(vppahs.fns))
	for _, fn := range vppahs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*vppahs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vppahs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
