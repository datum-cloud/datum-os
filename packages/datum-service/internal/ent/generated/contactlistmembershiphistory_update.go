// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contactlistmembershiphistory"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// ContactListMembershipHistoryUpdate is the builder for updating ContactListMembershipHistory entities.
type ContactListMembershipHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *ContactListMembershipHistoryMutation
}

// Where appends a list predicates to the ContactListMembershipHistoryUpdate builder.
func (clmhu *ContactListMembershipHistoryUpdate) Where(ps ...predicate.ContactListMembershipHistory) *ContactListMembershipHistoryUpdate {
	clmhu.mutation.Where(ps...)
	return clmhu
}

// SetUpdatedAt sets the "updated_at" field.
func (clmhu *ContactListMembershipHistoryUpdate) SetUpdatedAt(t time.Time) *ContactListMembershipHistoryUpdate {
	clmhu.mutation.SetUpdatedAt(t)
	return clmhu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (clmhu *ContactListMembershipHistoryUpdate) ClearUpdatedAt() *ContactListMembershipHistoryUpdate {
	clmhu.mutation.ClearUpdatedAt()
	return clmhu
}

// SetUpdatedBy sets the "updated_by" field.
func (clmhu *ContactListMembershipHistoryUpdate) SetUpdatedBy(s string) *ContactListMembershipHistoryUpdate {
	clmhu.mutation.SetUpdatedBy(s)
	return clmhu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (clmhu *ContactListMembershipHistoryUpdate) SetNillableUpdatedBy(s *string) *ContactListMembershipHistoryUpdate {
	if s != nil {
		clmhu.SetUpdatedBy(*s)
	}
	return clmhu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (clmhu *ContactListMembershipHistoryUpdate) ClearUpdatedBy() *ContactListMembershipHistoryUpdate {
	clmhu.mutation.ClearUpdatedBy()
	return clmhu
}

// SetDeletedAt sets the "deleted_at" field.
func (clmhu *ContactListMembershipHistoryUpdate) SetDeletedAt(t time.Time) *ContactListMembershipHistoryUpdate {
	clmhu.mutation.SetDeletedAt(t)
	return clmhu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (clmhu *ContactListMembershipHistoryUpdate) SetNillableDeletedAt(t *time.Time) *ContactListMembershipHistoryUpdate {
	if t != nil {
		clmhu.SetDeletedAt(*t)
	}
	return clmhu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (clmhu *ContactListMembershipHistoryUpdate) ClearDeletedAt() *ContactListMembershipHistoryUpdate {
	clmhu.mutation.ClearDeletedAt()
	return clmhu
}

// SetDeletedBy sets the "deleted_by" field.
func (clmhu *ContactListMembershipHistoryUpdate) SetDeletedBy(s string) *ContactListMembershipHistoryUpdate {
	clmhu.mutation.SetDeletedBy(s)
	return clmhu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (clmhu *ContactListMembershipHistoryUpdate) SetNillableDeletedBy(s *string) *ContactListMembershipHistoryUpdate {
	if s != nil {
		clmhu.SetDeletedBy(*s)
	}
	return clmhu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (clmhu *ContactListMembershipHistoryUpdate) ClearDeletedBy() *ContactListMembershipHistoryUpdate {
	clmhu.mutation.ClearDeletedBy()
	return clmhu
}

// Mutation returns the ContactListMembershipHistoryMutation object of the builder.
func (clmhu *ContactListMembershipHistoryUpdate) Mutation() *ContactListMembershipHistoryMutation {
	return clmhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clmhu *ContactListMembershipHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := clmhu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, clmhu.sqlSave, clmhu.mutation, clmhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clmhu *ContactListMembershipHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := clmhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clmhu *ContactListMembershipHistoryUpdate) Exec(ctx context.Context) error {
	_, err := clmhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clmhu *ContactListMembershipHistoryUpdate) ExecX(ctx context.Context) {
	if err := clmhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clmhu *ContactListMembershipHistoryUpdate) defaults() error {
	if _, ok := clmhu.mutation.UpdatedAt(); !ok && !clmhu.mutation.UpdatedAtCleared() {
		if contactlistmembershiphistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized contactlistmembershiphistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := contactlistmembershiphistory.UpdateDefaultUpdatedAt()
		clmhu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (clmhu *ContactListMembershipHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(contactlistmembershiphistory.Table, contactlistmembershiphistory.Columns, sqlgraph.NewFieldSpec(contactlistmembershiphistory.FieldID, field.TypeString))
	if ps := clmhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if clmhu.mutation.RefCleared() {
		_spec.ClearField(contactlistmembershiphistory.FieldRef, field.TypeString)
	}
	if clmhu.mutation.CreatedAtCleared() {
		_spec.ClearField(contactlistmembershiphistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := clmhu.mutation.UpdatedAt(); ok {
		_spec.SetField(contactlistmembershiphistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if clmhu.mutation.UpdatedAtCleared() {
		_spec.ClearField(contactlistmembershiphistory.FieldUpdatedAt, field.TypeTime)
	}
	if clmhu.mutation.CreatedByCleared() {
		_spec.ClearField(contactlistmembershiphistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := clmhu.mutation.UpdatedBy(); ok {
		_spec.SetField(contactlistmembershiphistory.FieldUpdatedBy, field.TypeString, value)
	}
	if clmhu.mutation.UpdatedByCleared() {
		_spec.ClearField(contactlistmembershiphistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := clmhu.mutation.DeletedAt(); ok {
		_spec.SetField(contactlistmembershiphistory.FieldDeletedAt, field.TypeTime, value)
	}
	if clmhu.mutation.DeletedAtCleared() {
		_spec.ClearField(contactlistmembershiphistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := clmhu.mutation.DeletedBy(); ok {
		_spec.SetField(contactlistmembershiphistory.FieldDeletedBy, field.TypeString, value)
	}
	if clmhu.mutation.DeletedByCleared() {
		_spec.ClearField(contactlistmembershiphistory.FieldDeletedBy, field.TypeString)
	}
	_spec.Node.Schema = clmhu.schemaConfig.ContactListMembershipHistory
	ctx = internal.NewSchemaConfigContext(ctx, clmhu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, clmhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactlistmembershiphistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	clmhu.mutation.done = true
	return n, nil
}

// ContactListMembershipHistoryUpdateOne is the builder for updating a single ContactListMembershipHistory entity.
type ContactListMembershipHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContactListMembershipHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (clmhuo *ContactListMembershipHistoryUpdateOne) SetUpdatedAt(t time.Time) *ContactListMembershipHistoryUpdateOne {
	clmhuo.mutation.SetUpdatedAt(t)
	return clmhuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (clmhuo *ContactListMembershipHistoryUpdateOne) ClearUpdatedAt() *ContactListMembershipHistoryUpdateOne {
	clmhuo.mutation.ClearUpdatedAt()
	return clmhuo
}

// SetUpdatedBy sets the "updated_by" field.
func (clmhuo *ContactListMembershipHistoryUpdateOne) SetUpdatedBy(s string) *ContactListMembershipHistoryUpdateOne {
	clmhuo.mutation.SetUpdatedBy(s)
	return clmhuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (clmhuo *ContactListMembershipHistoryUpdateOne) SetNillableUpdatedBy(s *string) *ContactListMembershipHistoryUpdateOne {
	if s != nil {
		clmhuo.SetUpdatedBy(*s)
	}
	return clmhuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (clmhuo *ContactListMembershipHistoryUpdateOne) ClearUpdatedBy() *ContactListMembershipHistoryUpdateOne {
	clmhuo.mutation.ClearUpdatedBy()
	return clmhuo
}

// SetDeletedAt sets the "deleted_at" field.
func (clmhuo *ContactListMembershipHistoryUpdateOne) SetDeletedAt(t time.Time) *ContactListMembershipHistoryUpdateOne {
	clmhuo.mutation.SetDeletedAt(t)
	return clmhuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (clmhuo *ContactListMembershipHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *ContactListMembershipHistoryUpdateOne {
	if t != nil {
		clmhuo.SetDeletedAt(*t)
	}
	return clmhuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (clmhuo *ContactListMembershipHistoryUpdateOne) ClearDeletedAt() *ContactListMembershipHistoryUpdateOne {
	clmhuo.mutation.ClearDeletedAt()
	return clmhuo
}

// SetDeletedBy sets the "deleted_by" field.
func (clmhuo *ContactListMembershipHistoryUpdateOne) SetDeletedBy(s string) *ContactListMembershipHistoryUpdateOne {
	clmhuo.mutation.SetDeletedBy(s)
	return clmhuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (clmhuo *ContactListMembershipHistoryUpdateOne) SetNillableDeletedBy(s *string) *ContactListMembershipHistoryUpdateOne {
	if s != nil {
		clmhuo.SetDeletedBy(*s)
	}
	return clmhuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (clmhuo *ContactListMembershipHistoryUpdateOne) ClearDeletedBy() *ContactListMembershipHistoryUpdateOne {
	clmhuo.mutation.ClearDeletedBy()
	return clmhuo
}

// Mutation returns the ContactListMembershipHistoryMutation object of the builder.
func (clmhuo *ContactListMembershipHistoryUpdateOne) Mutation() *ContactListMembershipHistoryMutation {
	return clmhuo.mutation
}

// Where appends a list predicates to the ContactListMembershipHistoryUpdate builder.
func (clmhuo *ContactListMembershipHistoryUpdateOne) Where(ps ...predicate.ContactListMembershipHistory) *ContactListMembershipHistoryUpdateOne {
	clmhuo.mutation.Where(ps...)
	return clmhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (clmhuo *ContactListMembershipHistoryUpdateOne) Select(field string, fields ...string) *ContactListMembershipHistoryUpdateOne {
	clmhuo.fields = append([]string{field}, fields...)
	return clmhuo
}

// Save executes the query and returns the updated ContactListMembershipHistory entity.
func (clmhuo *ContactListMembershipHistoryUpdateOne) Save(ctx context.Context) (*ContactListMembershipHistory, error) {
	if err := clmhuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, clmhuo.sqlSave, clmhuo.mutation, clmhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clmhuo *ContactListMembershipHistoryUpdateOne) SaveX(ctx context.Context) *ContactListMembershipHistory {
	node, err := clmhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (clmhuo *ContactListMembershipHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := clmhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clmhuo *ContactListMembershipHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := clmhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clmhuo *ContactListMembershipHistoryUpdateOne) defaults() error {
	if _, ok := clmhuo.mutation.UpdatedAt(); !ok && !clmhuo.mutation.UpdatedAtCleared() {
		if contactlistmembershiphistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized contactlistmembershiphistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := contactlistmembershiphistory.UpdateDefaultUpdatedAt()
		clmhuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (clmhuo *ContactListMembershipHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ContactListMembershipHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(contactlistmembershiphistory.Table, contactlistmembershiphistory.Columns, sqlgraph.NewFieldSpec(contactlistmembershiphistory.FieldID, field.TypeString))
	id, ok := clmhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ContactListMembershipHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := clmhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contactlistmembershiphistory.FieldID)
		for _, f := range fields {
			if !contactlistmembershiphistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != contactlistmembershiphistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := clmhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if clmhuo.mutation.RefCleared() {
		_spec.ClearField(contactlistmembershiphistory.FieldRef, field.TypeString)
	}
	if clmhuo.mutation.CreatedAtCleared() {
		_spec.ClearField(contactlistmembershiphistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := clmhuo.mutation.UpdatedAt(); ok {
		_spec.SetField(contactlistmembershiphistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if clmhuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(contactlistmembershiphistory.FieldUpdatedAt, field.TypeTime)
	}
	if clmhuo.mutation.CreatedByCleared() {
		_spec.ClearField(contactlistmembershiphistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := clmhuo.mutation.UpdatedBy(); ok {
		_spec.SetField(contactlistmembershiphistory.FieldUpdatedBy, field.TypeString, value)
	}
	if clmhuo.mutation.UpdatedByCleared() {
		_spec.ClearField(contactlistmembershiphistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := clmhuo.mutation.DeletedAt(); ok {
		_spec.SetField(contactlistmembershiphistory.FieldDeletedAt, field.TypeTime, value)
	}
	if clmhuo.mutation.DeletedAtCleared() {
		_spec.ClearField(contactlistmembershiphistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := clmhuo.mutation.DeletedBy(); ok {
		_spec.SetField(contactlistmembershiphistory.FieldDeletedBy, field.TypeString, value)
	}
	if clmhuo.mutation.DeletedByCleared() {
		_spec.ClearField(contactlistmembershiphistory.FieldDeletedBy, field.TypeString)
	}
	_spec.Node.Schema = clmhuo.schemaConfig.ContactListMembershipHistory
	ctx = internal.NewSchemaConfigContext(ctx, clmhuo.schemaConfig)
	_node = &ContactListMembershipHistory{config: clmhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, clmhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactlistmembershiphistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	clmhuo.mutation.done = true
	return _node, nil
}
