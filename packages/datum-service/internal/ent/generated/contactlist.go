// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datum-cloud/datum-os/internal/ent/generated/contactlist"
	"github.com/datum-cloud/datum-os/internal/ent/generated/organization"
)

// ContactList is the model entity for the ContactList schema.
type ContactList struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *string `json:"deleted_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// The organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the name of the list
	Name string `json:"name,omitempty"`
	// the visibility of the list, for the subscriber
	Visibility string `json:"visibility,omitempty"`
	// the friendly display name of the list
	DisplayName string `json:"display_name,omitempty"`
	// the description of the list
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContactListQuery when eager-loading is set.
	Edges        ContactListEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ContactListEdges holds the relations/edges for other nodes in the graph.
type ContactListEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Contacts holds the value of the contacts edge.
	Contacts []*Contact `json:"contacts,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// Integrations holds the value of the integrations edge.
	Integrations []*Integration `json:"integrations,omitempty"`
	// ContactListMembers holds the value of the contact_list_members edge.
	ContactListMembers []*ContactListMembership `json:"contact_list_members,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedContacts           map[string][]*Contact
	namedEvents             map[string][]*Event
	namedIntegrations       map[string][]*Integration
	namedContactListMembers map[string][]*ContactListMembership
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContactListEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ContactsOrErr returns the Contacts value or an error if the edge
// was not loaded in eager-loading.
func (e ContactListEdges) ContactsOrErr() ([]*Contact, error) {
	if e.loadedTypes[1] {
		return e.Contacts, nil
	}
	return nil, &NotLoadedError{edge: "contacts"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e ContactListEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[2] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// IntegrationsOrErr returns the Integrations value or an error if the edge
// was not loaded in eager-loading.
func (e ContactListEdges) IntegrationsOrErr() ([]*Integration, error) {
	if e.loadedTypes[3] {
		return e.Integrations, nil
	}
	return nil, &NotLoadedError{edge: "integrations"}
}

// ContactListMembersOrErr returns the ContactListMembers value or an error if the edge
// was not loaded in eager-loading.
func (e ContactListEdges) ContactListMembersOrErr() ([]*ContactListMembership, error) {
	if e.loadedTypes[4] {
		return e.ContactListMembers, nil
	}
	return nil, &NotLoadedError{edge: "contact_list_members"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ContactList) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case contactlist.FieldTags:
			values[i] = new([]byte)
		case contactlist.FieldID, contactlist.FieldCreatedBy, contactlist.FieldUpdatedBy, contactlist.FieldDeletedBy, contactlist.FieldMappingID, contactlist.FieldOwnerID, contactlist.FieldName, contactlist.FieldVisibility, contactlist.FieldDisplayName, contactlist.FieldDescription:
			values[i] = new(sql.NullString)
		case contactlist.FieldCreatedAt, contactlist.FieldUpdatedAt, contactlist.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ContactList fields.
func (cl *ContactList) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contactlist.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cl.ID = value.String
			}
		case contactlist.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cl.CreatedAt = value.Time
			}
		case contactlist.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cl.UpdatedAt = value.Time
			}
		case contactlist.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				cl.CreatedBy = value.String
			}
		case contactlist.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				cl.UpdatedBy = value.String
			}
		case contactlist.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cl.DeletedAt = new(time.Time)
				*cl.DeletedAt = value.Time
			}
		case contactlist.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				cl.DeletedBy = new(string)
				*cl.DeletedBy = value.String
			}
		case contactlist.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				cl.MappingID = value.String
			}
		case contactlist.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cl.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case contactlist.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				cl.OwnerID = value.String
			}
		case contactlist.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cl.Name = value.String
			}
		case contactlist.FieldVisibility:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field visibility", values[i])
			} else if value.Valid {
				cl.Visibility = string(value.String)
			}
		case contactlist.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				cl.DisplayName = value.String
			}
		case contactlist.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				cl.Description = value.String
			}
		default:
			cl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ContactList.
// This includes values selected through modifiers, order, etc.
func (cl *ContactList) Value(name string) (ent.Value, error) {
	return cl.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the ContactList entity.
func (cl *ContactList) QueryOwner() *OrganizationQuery {
	return NewContactListClient(cl.config).QueryOwner(cl)
}

// QueryContacts queries the "contacts" edge of the ContactList entity.
func (cl *ContactList) QueryContacts() *ContactQuery {
	return NewContactListClient(cl.config).QueryContacts(cl)
}

// QueryEvents queries the "events" edge of the ContactList entity.
func (cl *ContactList) QueryEvents() *EventQuery {
	return NewContactListClient(cl.config).QueryEvents(cl)
}

// QueryIntegrations queries the "integrations" edge of the ContactList entity.
func (cl *ContactList) QueryIntegrations() *IntegrationQuery {
	return NewContactListClient(cl.config).QueryIntegrations(cl)
}

// QueryContactListMembers queries the "contact_list_members" edge of the ContactList entity.
func (cl *ContactList) QueryContactListMembers() *ContactListMembershipQuery {
	return NewContactListClient(cl.config).QueryContactListMembers(cl)
}

// Update returns a builder for updating this ContactList.
// Note that you need to call ContactList.Unwrap() before calling this method if this ContactList
// was returned from a transaction, and the transaction was committed or rolled back.
func (cl *ContactList) Update() *ContactListUpdateOne {
	return NewContactListClient(cl.config).UpdateOne(cl)
}

// Unwrap unwraps the ContactList entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cl *ContactList) Unwrap() *ContactList {
	_tx, ok := cl.config.driver.(*txDriver)
	if !ok {
		panic("generated: ContactList is not a transactional entity")
	}
	cl.config.driver = _tx.drv
	return cl
}

// String implements the fmt.Stringer.
func (cl *ContactList) String() string {
	var builder strings.Builder
	builder.WriteString("ContactList(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(cl.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(cl.UpdatedBy)
	builder.WriteString(", ")
	if v := cl.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := cl.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(cl.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", cl.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(cl.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(cl.Name)
	builder.WriteString(", ")
	builder.WriteString("visibility=")
	builder.WriteString(fmt.Sprintf("%v", cl.Visibility))
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(cl.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(cl.Description)
	builder.WriteByte(')')
	return builder.String()
}

// NamedContacts returns the Contacts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cl *ContactList) NamedContacts(name string) ([]*Contact, error) {
	if cl.Edges.namedContacts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cl.Edges.namedContacts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cl *ContactList) appendNamedContacts(name string, edges ...*Contact) {
	if cl.Edges.namedContacts == nil {
		cl.Edges.namedContacts = make(map[string][]*Contact)
	}
	if len(edges) == 0 {
		cl.Edges.namedContacts[name] = []*Contact{}
	} else {
		cl.Edges.namedContacts[name] = append(cl.Edges.namedContacts[name], edges...)
	}
}

// NamedEvents returns the Events named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cl *ContactList) NamedEvents(name string) ([]*Event, error) {
	if cl.Edges.namedEvents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cl.Edges.namedEvents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cl *ContactList) appendNamedEvents(name string, edges ...*Event) {
	if cl.Edges.namedEvents == nil {
		cl.Edges.namedEvents = make(map[string][]*Event)
	}
	if len(edges) == 0 {
		cl.Edges.namedEvents[name] = []*Event{}
	} else {
		cl.Edges.namedEvents[name] = append(cl.Edges.namedEvents[name], edges...)
	}
}

// NamedIntegrations returns the Integrations named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cl *ContactList) NamedIntegrations(name string) ([]*Integration, error) {
	if cl.Edges.namedIntegrations == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cl.Edges.namedIntegrations[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cl *ContactList) appendNamedIntegrations(name string, edges ...*Integration) {
	if cl.Edges.namedIntegrations == nil {
		cl.Edges.namedIntegrations = make(map[string][]*Integration)
	}
	if len(edges) == 0 {
		cl.Edges.namedIntegrations[name] = []*Integration{}
	} else {
		cl.Edges.namedIntegrations[name] = append(cl.Edges.namedIntegrations[name], edges...)
	}
}

// NamedContactListMembers returns the ContactListMembers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cl *ContactList) NamedContactListMembers(name string) ([]*ContactListMembership, error) {
	if cl.Edges.namedContactListMembers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cl.Edges.namedContactListMembers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cl *ContactList) appendNamedContactListMembers(name string, edges ...*ContactListMembership) {
	if cl.Edges.namedContactListMembers == nil {
		cl.Edges.namedContactListMembers = make(map[string][]*ContactListMembership)
	}
	if len(edges) == 0 {
		cl.Edges.namedContactListMembers[name] = []*ContactListMembership{}
	} else {
		cl.Edges.namedContactListMembers[name] = append(cl.Edges.namedContactListMembers[name], edges...)
	}
}

// ContactLists is a parsable slice of ContactList.
type ContactLists []*ContactList
