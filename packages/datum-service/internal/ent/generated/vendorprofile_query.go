// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datum-cloud/datum-os/internal/ent/generated/organization"
	"github.com/datum-cloud/datum-os/internal/ent/generated/phonenumber"
	"github.com/datum-cloud/datum-os/internal/ent/generated/postaladdress"
	"github.com/datum-cloud/datum-os/internal/ent/generated/predicate"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendor"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofile"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilepaymentpreference"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilephonenumber"
	"github.com/datum-cloud/datum-os/internal/ent/generated/vendorprofilepostaladdress"

	"github.com/datum-cloud/datum-os/internal/ent/generated/internal"
)

// VendorProfileQuery is the builder for querying VendorProfile entities.
type VendorProfileQuery struct {
	config
	ctx                                   *QueryContext
	order                                 []vendorprofile.OrderOption
	inters                                []Interceptor
	predicates                            []predicate.VendorProfile
	withOwner                             *OrganizationQuery
	withPostalAddresses                   *PostalAddressQuery
	withPhoneNumbers                      *PhoneNumberQuery
	withPaymentPreferences                *VendorProfilePaymentPreferenceQuery
	withVendor                            *VendorQuery
	withVendorProfilePostalAddresses      *VendorProfilePostalAddressQuery
	withVendorProfilePhoneNumbers         *VendorProfilePhoneNumberQuery
	modifiers                             []func(*sql.Selector)
	loadTotal                             []func(context.Context, []*VendorProfile) error
	withNamedPostalAddresses              map[string]*PostalAddressQuery
	withNamedPhoneNumbers                 map[string]*PhoneNumberQuery
	withNamedPaymentPreferences           map[string]*VendorProfilePaymentPreferenceQuery
	withNamedVendorProfilePostalAddresses map[string]*VendorProfilePostalAddressQuery
	withNamedVendorProfilePhoneNumbers    map[string]*VendorProfilePhoneNumberQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VendorProfileQuery builder.
func (vpq *VendorProfileQuery) Where(ps ...predicate.VendorProfile) *VendorProfileQuery {
	vpq.predicates = append(vpq.predicates, ps...)
	return vpq
}

// Limit the number of records to be returned by this query.
func (vpq *VendorProfileQuery) Limit(limit int) *VendorProfileQuery {
	vpq.ctx.Limit = &limit
	return vpq
}

// Offset to start from.
func (vpq *VendorProfileQuery) Offset(offset int) *VendorProfileQuery {
	vpq.ctx.Offset = &offset
	return vpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vpq *VendorProfileQuery) Unique(unique bool) *VendorProfileQuery {
	vpq.ctx.Unique = &unique
	return vpq
}

// Order specifies how the records should be ordered.
func (vpq *VendorProfileQuery) Order(o ...vendorprofile.OrderOption) *VendorProfileQuery {
	vpq.order = append(vpq.order, o...)
	return vpq
}

// QueryOwner chains the current query on the "owner" edge.
func (vpq *VendorProfileQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: vpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vendorprofile.Table, vendorprofile.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vendorprofile.OwnerTable, vendorprofile.OwnerColumn),
		)
		schemaConfig := vpq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.VendorProfile
		fromU = sqlgraph.SetNeighbors(vpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPostalAddresses chains the current query on the "postal_addresses" edge.
func (vpq *VendorProfileQuery) QueryPostalAddresses() *PostalAddressQuery {
	query := (&PostalAddressClient{config: vpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vendorprofile.Table, vendorprofile.FieldID, selector),
			sqlgraph.To(postaladdress.Table, postaladdress.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, vendorprofile.PostalAddressesTable, vendorprofile.PostalAddressesPrimaryKey...),
		)
		schemaConfig := vpq.schemaConfig
		step.To.Schema = schemaConfig.PostalAddress
		step.Edge.Schema = schemaConfig.VendorProfilePostalAddress
		fromU = sqlgraph.SetNeighbors(vpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPhoneNumbers chains the current query on the "phone_numbers" edge.
func (vpq *VendorProfileQuery) QueryPhoneNumbers() *PhoneNumberQuery {
	query := (&PhoneNumberClient{config: vpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vendorprofile.Table, vendorprofile.FieldID, selector),
			sqlgraph.To(phonenumber.Table, phonenumber.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, vendorprofile.PhoneNumbersTable, vendorprofile.PhoneNumbersPrimaryKey...),
		)
		schemaConfig := vpq.schemaConfig
		step.To.Schema = schemaConfig.PhoneNumber
		step.Edge.Schema = schemaConfig.VendorProfilePhoneNumber
		fromU = sqlgraph.SetNeighbors(vpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPaymentPreferences chains the current query on the "payment_preferences" edge.
func (vpq *VendorProfileQuery) QueryPaymentPreferences() *VendorProfilePaymentPreferenceQuery {
	query := (&VendorProfilePaymentPreferenceClient{config: vpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vendorprofile.Table, vendorprofile.FieldID, selector),
			sqlgraph.To(vendorprofilepaymentpreference.Table, vendorprofilepaymentpreference.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vendorprofile.PaymentPreferencesTable, vendorprofile.PaymentPreferencesColumn),
		)
		schemaConfig := vpq.schemaConfig
		step.To.Schema = schemaConfig.VendorProfilePaymentPreference
		step.Edge.Schema = schemaConfig.VendorProfilePaymentPreference
		fromU = sqlgraph.SetNeighbors(vpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVendor chains the current query on the "vendor" edge.
func (vpq *VendorProfileQuery) QueryVendor() *VendorQuery {
	query := (&VendorClient{config: vpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vendorprofile.Table, vendorprofile.FieldID, selector),
			sqlgraph.To(vendor.Table, vendor.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, vendorprofile.VendorTable, vendorprofile.VendorColumn),
		)
		schemaConfig := vpq.schemaConfig
		step.To.Schema = schemaConfig.Vendor
		step.Edge.Schema = schemaConfig.VendorProfile
		fromU = sqlgraph.SetNeighbors(vpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVendorProfilePostalAddresses chains the current query on the "vendor_profile_postal_addresses" edge.
func (vpq *VendorProfileQuery) QueryVendorProfilePostalAddresses() *VendorProfilePostalAddressQuery {
	query := (&VendorProfilePostalAddressClient{config: vpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vendorprofile.Table, vendorprofile.FieldID, selector),
			sqlgraph.To(vendorprofilepostaladdress.Table, vendorprofilepostaladdress.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, vendorprofile.VendorProfilePostalAddressesTable, vendorprofile.VendorProfilePostalAddressesColumn),
		)
		schemaConfig := vpq.schemaConfig
		step.To.Schema = schemaConfig.VendorProfilePostalAddress
		step.Edge.Schema = schemaConfig.VendorProfilePostalAddress
		fromU = sqlgraph.SetNeighbors(vpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVendorProfilePhoneNumbers chains the current query on the "vendor_profile_phone_numbers" edge.
func (vpq *VendorProfileQuery) QueryVendorProfilePhoneNumbers() *VendorProfilePhoneNumberQuery {
	query := (&VendorProfilePhoneNumberClient{config: vpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vendorprofile.Table, vendorprofile.FieldID, selector),
			sqlgraph.To(vendorprofilephonenumber.Table, vendorprofilephonenumber.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, vendorprofile.VendorProfilePhoneNumbersTable, vendorprofile.VendorProfilePhoneNumbersColumn),
		)
		schemaConfig := vpq.schemaConfig
		step.To.Schema = schemaConfig.VendorProfilePhoneNumber
		step.Edge.Schema = schemaConfig.VendorProfilePhoneNumber
		fromU = sqlgraph.SetNeighbors(vpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first VendorProfile entity from the query.
// Returns a *NotFoundError when no VendorProfile was found.
func (vpq *VendorProfileQuery) First(ctx context.Context) (*VendorProfile, error) {
	nodes, err := vpq.Limit(1).All(setContextOp(ctx, vpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{vendorprofile.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vpq *VendorProfileQuery) FirstX(ctx context.Context) *VendorProfile {
	node, err := vpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VendorProfile ID from the query.
// Returns a *NotFoundError when no VendorProfile ID was found.
func (vpq *VendorProfileQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = vpq.Limit(1).IDs(setContextOp(ctx, vpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{vendorprofile.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vpq *VendorProfileQuery) FirstIDX(ctx context.Context) string {
	id, err := vpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VendorProfile entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one VendorProfile entity is found.
// Returns a *NotFoundError when no VendorProfile entities are found.
func (vpq *VendorProfileQuery) Only(ctx context.Context) (*VendorProfile, error) {
	nodes, err := vpq.Limit(2).All(setContextOp(ctx, vpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{vendorprofile.Label}
	default:
		return nil, &NotSingularError{vendorprofile.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vpq *VendorProfileQuery) OnlyX(ctx context.Context) *VendorProfile {
	node, err := vpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VendorProfile ID in the query.
// Returns a *NotSingularError when more than one VendorProfile ID is found.
// Returns a *NotFoundError when no entities are found.
func (vpq *VendorProfileQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = vpq.Limit(2).IDs(setContextOp(ctx, vpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{vendorprofile.Label}
	default:
		err = &NotSingularError{vendorprofile.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vpq *VendorProfileQuery) OnlyIDX(ctx context.Context) string {
	id, err := vpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VendorProfiles.
func (vpq *VendorProfileQuery) All(ctx context.Context) ([]*VendorProfile, error) {
	ctx = setContextOp(ctx, vpq.ctx, ent.OpQueryAll)
	if err := vpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*VendorProfile, *VendorProfileQuery]()
	return withInterceptors[[]*VendorProfile](ctx, vpq, qr, vpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (vpq *VendorProfileQuery) AllX(ctx context.Context) []*VendorProfile {
	nodes, err := vpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VendorProfile IDs.
func (vpq *VendorProfileQuery) IDs(ctx context.Context) (ids []string, err error) {
	if vpq.ctx.Unique == nil && vpq.path != nil {
		vpq.Unique(true)
	}
	ctx = setContextOp(ctx, vpq.ctx, ent.OpQueryIDs)
	if err = vpq.Select(vendorprofile.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vpq *VendorProfileQuery) IDsX(ctx context.Context) []string {
	ids, err := vpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vpq *VendorProfileQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, vpq.ctx, ent.OpQueryCount)
	if err := vpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, vpq, querierCount[*VendorProfileQuery](), vpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (vpq *VendorProfileQuery) CountX(ctx context.Context) int {
	count, err := vpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vpq *VendorProfileQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, vpq.ctx, ent.OpQueryExist)
	switch _, err := vpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (vpq *VendorProfileQuery) ExistX(ctx context.Context) bool {
	exist, err := vpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VendorProfileQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vpq *VendorProfileQuery) Clone() *VendorProfileQuery {
	if vpq == nil {
		return nil
	}
	return &VendorProfileQuery{
		config:                           vpq.config,
		ctx:                              vpq.ctx.Clone(),
		order:                            append([]vendorprofile.OrderOption{}, vpq.order...),
		inters:                           append([]Interceptor{}, vpq.inters...),
		predicates:                       append([]predicate.VendorProfile{}, vpq.predicates...),
		withOwner:                        vpq.withOwner.Clone(),
		withPostalAddresses:              vpq.withPostalAddresses.Clone(),
		withPhoneNumbers:                 vpq.withPhoneNumbers.Clone(),
		withPaymentPreferences:           vpq.withPaymentPreferences.Clone(),
		withVendor:                       vpq.withVendor.Clone(),
		withVendorProfilePostalAddresses: vpq.withVendorProfilePostalAddresses.Clone(),
		withVendorProfilePhoneNumbers:    vpq.withVendorProfilePhoneNumbers.Clone(),
		// clone intermediate query.
		sql:  vpq.sql.Clone(),
		path: vpq.path,
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (vpq *VendorProfileQuery) WithOwner(opts ...func(*OrganizationQuery)) *VendorProfileQuery {
	query := (&OrganizationClient{config: vpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vpq.withOwner = query
	return vpq
}

// WithPostalAddresses tells the query-builder to eager-load the nodes that are connected to
// the "postal_addresses" edge. The optional arguments are used to configure the query builder of the edge.
func (vpq *VendorProfileQuery) WithPostalAddresses(opts ...func(*PostalAddressQuery)) *VendorProfileQuery {
	query := (&PostalAddressClient{config: vpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vpq.withPostalAddresses = query
	return vpq
}

// WithPhoneNumbers tells the query-builder to eager-load the nodes that are connected to
// the "phone_numbers" edge. The optional arguments are used to configure the query builder of the edge.
func (vpq *VendorProfileQuery) WithPhoneNumbers(opts ...func(*PhoneNumberQuery)) *VendorProfileQuery {
	query := (&PhoneNumberClient{config: vpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vpq.withPhoneNumbers = query
	return vpq
}

// WithPaymentPreferences tells the query-builder to eager-load the nodes that are connected to
// the "payment_preferences" edge. The optional arguments are used to configure the query builder of the edge.
func (vpq *VendorProfileQuery) WithPaymentPreferences(opts ...func(*VendorProfilePaymentPreferenceQuery)) *VendorProfileQuery {
	query := (&VendorProfilePaymentPreferenceClient{config: vpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vpq.withPaymentPreferences = query
	return vpq
}

// WithVendor tells the query-builder to eager-load the nodes that are connected to
// the "vendor" edge. The optional arguments are used to configure the query builder of the edge.
func (vpq *VendorProfileQuery) WithVendor(opts ...func(*VendorQuery)) *VendorProfileQuery {
	query := (&VendorClient{config: vpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vpq.withVendor = query
	return vpq
}

// WithVendorProfilePostalAddresses tells the query-builder to eager-load the nodes that are connected to
// the "vendor_profile_postal_addresses" edge. The optional arguments are used to configure the query builder of the edge.
func (vpq *VendorProfileQuery) WithVendorProfilePostalAddresses(opts ...func(*VendorProfilePostalAddressQuery)) *VendorProfileQuery {
	query := (&VendorProfilePostalAddressClient{config: vpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vpq.withVendorProfilePostalAddresses = query
	return vpq
}

// WithVendorProfilePhoneNumbers tells the query-builder to eager-load the nodes that are connected to
// the "vendor_profile_phone_numbers" edge. The optional arguments are used to configure the query builder of the edge.
func (vpq *VendorProfileQuery) WithVendorProfilePhoneNumbers(opts ...func(*VendorProfilePhoneNumberQuery)) *VendorProfileQuery {
	query := (&VendorProfilePhoneNumberClient{config: vpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vpq.withVendorProfilePhoneNumbers = query
	return vpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.VendorProfile.Query().
//		GroupBy(vendorprofile.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (vpq *VendorProfileQuery) GroupBy(field string, fields ...string) *VendorProfileGroupBy {
	vpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &VendorProfileGroupBy{build: vpq}
	grbuild.flds = &vpq.ctx.Fields
	grbuild.label = vendorprofile.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.VendorProfile.Query().
//		Select(vendorprofile.FieldCreatedAt).
//		Scan(ctx, &v)
func (vpq *VendorProfileQuery) Select(fields ...string) *VendorProfileSelect {
	vpq.ctx.Fields = append(vpq.ctx.Fields, fields...)
	sbuild := &VendorProfileSelect{VendorProfileQuery: vpq}
	sbuild.label = vendorprofile.Label
	sbuild.flds, sbuild.scan = &vpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a VendorProfileSelect configured with the given aggregations.
func (vpq *VendorProfileQuery) Aggregate(fns ...AggregateFunc) *VendorProfileSelect {
	return vpq.Select().Aggregate(fns...)
}

func (vpq *VendorProfileQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range vpq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, vpq); err != nil {
				return err
			}
		}
	}
	for _, f := range vpq.ctx.Fields {
		if !vendorprofile.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if vpq.path != nil {
		prev, err := vpq.path(ctx)
		if err != nil {
			return err
		}
		vpq.sql = prev
	}
	if vendorprofile.Policy == nil {
		return errors.New("generated: uninitialized vendorprofile.Policy (forgotten import generated/runtime?)")
	}
	if err := vendorprofile.Policy.EvalQuery(ctx, vpq); err != nil {
		return err
	}
	return nil
}

func (vpq *VendorProfileQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*VendorProfile, error) {
	var (
		nodes       = []*VendorProfile{}
		_spec       = vpq.querySpec()
		loadedTypes = [7]bool{
			vpq.withOwner != nil,
			vpq.withPostalAddresses != nil,
			vpq.withPhoneNumbers != nil,
			vpq.withPaymentPreferences != nil,
			vpq.withVendor != nil,
			vpq.withVendorProfilePostalAddresses != nil,
			vpq.withVendorProfilePhoneNumbers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*VendorProfile).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &VendorProfile{config: vpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = vpq.schemaConfig.VendorProfile
	ctx = internal.NewSchemaConfigContext(ctx, vpq.schemaConfig)
	if len(vpq.modifiers) > 0 {
		_spec.Modifiers = vpq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, vpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := vpq.withOwner; query != nil {
		if err := vpq.loadOwner(ctx, query, nodes, nil,
			func(n *VendorProfile, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := vpq.withPostalAddresses; query != nil {
		if err := vpq.loadPostalAddresses(ctx, query, nodes,
			func(n *VendorProfile) { n.Edges.PostalAddresses = []*PostalAddress{} },
			func(n *VendorProfile, e *PostalAddress) { n.Edges.PostalAddresses = append(n.Edges.PostalAddresses, e) }); err != nil {
			return nil, err
		}
	}
	if query := vpq.withPhoneNumbers; query != nil {
		if err := vpq.loadPhoneNumbers(ctx, query, nodes,
			func(n *VendorProfile) { n.Edges.PhoneNumbers = []*PhoneNumber{} },
			func(n *VendorProfile, e *PhoneNumber) { n.Edges.PhoneNumbers = append(n.Edges.PhoneNumbers, e) }); err != nil {
			return nil, err
		}
	}
	if query := vpq.withPaymentPreferences; query != nil {
		if err := vpq.loadPaymentPreferences(ctx, query, nodes,
			func(n *VendorProfile) { n.Edges.PaymentPreferences = []*VendorProfilePaymentPreference{} },
			func(n *VendorProfile, e *VendorProfilePaymentPreference) {
				n.Edges.PaymentPreferences = append(n.Edges.PaymentPreferences, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := vpq.withVendor; query != nil {
		if err := vpq.loadVendor(ctx, query, nodes, nil,
			func(n *VendorProfile, e *Vendor) { n.Edges.Vendor = e }); err != nil {
			return nil, err
		}
	}
	if query := vpq.withVendorProfilePostalAddresses; query != nil {
		if err := vpq.loadVendorProfilePostalAddresses(ctx, query, nodes,
			func(n *VendorProfile) { n.Edges.VendorProfilePostalAddresses = []*VendorProfilePostalAddress{} },
			func(n *VendorProfile, e *VendorProfilePostalAddress) {
				n.Edges.VendorProfilePostalAddresses = append(n.Edges.VendorProfilePostalAddresses, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := vpq.withVendorProfilePhoneNumbers; query != nil {
		if err := vpq.loadVendorProfilePhoneNumbers(ctx, query, nodes,
			func(n *VendorProfile) { n.Edges.VendorProfilePhoneNumbers = []*VendorProfilePhoneNumber{} },
			func(n *VendorProfile, e *VendorProfilePhoneNumber) {
				n.Edges.VendorProfilePhoneNumbers = append(n.Edges.VendorProfilePhoneNumbers, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range vpq.withNamedPostalAddresses {
		if err := vpq.loadPostalAddresses(ctx, query, nodes,
			func(n *VendorProfile) { n.appendNamedPostalAddresses(name) },
			func(n *VendorProfile, e *PostalAddress) { n.appendNamedPostalAddresses(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range vpq.withNamedPhoneNumbers {
		if err := vpq.loadPhoneNumbers(ctx, query, nodes,
			func(n *VendorProfile) { n.appendNamedPhoneNumbers(name) },
			func(n *VendorProfile, e *PhoneNumber) { n.appendNamedPhoneNumbers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range vpq.withNamedPaymentPreferences {
		if err := vpq.loadPaymentPreferences(ctx, query, nodes,
			func(n *VendorProfile) { n.appendNamedPaymentPreferences(name) },
			func(n *VendorProfile, e *VendorProfilePaymentPreference) { n.appendNamedPaymentPreferences(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range vpq.withNamedVendorProfilePostalAddresses {
		if err := vpq.loadVendorProfilePostalAddresses(ctx, query, nodes,
			func(n *VendorProfile) { n.appendNamedVendorProfilePostalAddresses(name) },
			func(n *VendorProfile, e *VendorProfilePostalAddress) {
				n.appendNamedVendorProfilePostalAddresses(name, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range vpq.withNamedVendorProfilePhoneNumbers {
		if err := vpq.loadVendorProfilePhoneNumbers(ctx, query, nodes,
			func(n *VendorProfile) { n.appendNamedVendorProfilePhoneNumbers(name) },
			func(n *VendorProfile, e *VendorProfilePhoneNumber) { n.appendNamedVendorProfilePhoneNumbers(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range vpq.loadTotal {
		if err := vpq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (vpq *VendorProfileQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*VendorProfile, init func(*VendorProfile), assign func(*VendorProfile, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*VendorProfile)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (vpq *VendorProfileQuery) loadPostalAddresses(ctx context.Context, query *PostalAddressQuery, nodes []*VendorProfile, init func(*VendorProfile), assign func(*VendorProfile, *PostalAddress)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*VendorProfile)
	nids := make(map[string]map[*VendorProfile]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(vendorprofile.PostalAddressesTable)
		joinT.Schema(vpq.schemaConfig.VendorProfilePostalAddress)
		s.Join(joinT).On(s.C(postaladdress.FieldID), joinT.C(vendorprofile.PostalAddressesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(vendorprofile.PostalAddressesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(vendorprofile.PostalAddressesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*VendorProfile]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*PostalAddress](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "postal_addresses" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (vpq *VendorProfileQuery) loadPhoneNumbers(ctx context.Context, query *PhoneNumberQuery, nodes []*VendorProfile, init func(*VendorProfile), assign func(*VendorProfile, *PhoneNumber)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*VendorProfile)
	nids := make(map[string]map[*VendorProfile]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(vendorprofile.PhoneNumbersTable)
		joinT.Schema(vpq.schemaConfig.VendorProfilePhoneNumber)
		s.Join(joinT).On(s.C(phonenumber.FieldID), joinT.C(vendorprofile.PhoneNumbersPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(vendorprofile.PhoneNumbersPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(vendorprofile.PhoneNumbersPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*VendorProfile]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*PhoneNumber](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "phone_numbers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (vpq *VendorProfileQuery) loadPaymentPreferences(ctx context.Context, query *VendorProfilePaymentPreferenceQuery, nodes []*VendorProfile, init func(*VendorProfile), assign func(*VendorProfile, *VendorProfilePaymentPreference)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*VendorProfile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(vendorprofilepaymentpreference.FieldVendorProfileID)
	}
	query.Where(predicate.VendorProfilePaymentPreference(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(vendorprofile.PaymentPreferencesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.VendorProfileID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "vendor_profile_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (vpq *VendorProfileQuery) loadVendor(ctx context.Context, query *VendorQuery, nodes []*VendorProfile, init func(*VendorProfile), assign func(*VendorProfile, *Vendor)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*VendorProfile)
	for i := range nodes {
		fk := nodes[i].VendorID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(vendor.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "vendor_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (vpq *VendorProfileQuery) loadVendorProfilePostalAddresses(ctx context.Context, query *VendorProfilePostalAddressQuery, nodes []*VendorProfile, init func(*VendorProfile), assign func(*VendorProfile, *VendorProfilePostalAddress)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*VendorProfile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(vendorprofilepostaladdress.FieldVendorProfileID)
	}
	query.Where(predicate.VendorProfilePostalAddress(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(vendorprofile.VendorProfilePostalAddressesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.VendorProfileID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "vendor_profile_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (vpq *VendorProfileQuery) loadVendorProfilePhoneNumbers(ctx context.Context, query *VendorProfilePhoneNumberQuery, nodes []*VendorProfile, init func(*VendorProfile), assign func(*VendorProfile, *VendorProfilePhoneNumber)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*VendorProfile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(vendorprofilephonenumber.FieldVendorProfileID)
	}
	query.Where(predicate.VendorProfilePhoneNumber(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(vendorprofile.VendorProfilePhoneNumbersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.VendorProfileID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "vendor_profile_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (vpq *VendorProfileQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vpq.querySpec()
	_spec.Node.Schema = vpq.schemaConfig.VendorProfile
	ctx = internal.NewSchemaConfigContext(ctx, vpq.schemaConfig)
	if len(vpq.modifiers) > 0 {
		_spec.Modifiers = vpq.modifiers
	}
	_spec.Node.Columns = vpq.ctx.Fields
	if len(vpq.ctx.Fields) > 0 {
		_spec.Unique = vpq.ctx.Unique != nil && *vpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, vpq.driver, _spec)
}

func (vpq *VendorProfileQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(vendorprofile.Table, vendorprofile.Columns, sqlgraph.NewFieldSpec(vendorprofile.FieldID, field.TypeString))
	_spec.From = vpq.sql
	if unique := vpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if vpq.path != nil {
		_spec.Unique = true
	}
	if fields := vpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vendorprofile.FieldID)
		for i := range fields {
			if fields[i] != vendorprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if vpq.withOwner != nil {
			_spec.Node.AddColumnOnce(vendorprofile.FieldOwnerID)
		}
		if vpq.withVendor != nil {
			_spec.Node.AddColumnOnce(vendorprofile.FieldVendorID)
		}
	}
	if ps := vpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vpq *VendorProfileQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vpq.driver.Dialect())
	t1 := builder.Table(vendorprofile.Table)
	columns := vpq.ctx.Fields
	if len(columns) == 0 {
		columns = vendorprofile.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vpq.sql != nil {
		selector = vpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if vpq.ctx.Unique != nil && *vpq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(vpq.schemaConfig.VendorProfile)
	ctx = internal.NewSchemaConfigContext(ctx, vpq.schemaConfig)
	selector.WithContext(ctx)
	for _, p := range vpq.predicates {
		p(selector)
	}
	for _, p := range vpq.order {
		p(selector)
	}
	if offset := vpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedPostalAddresses tells the query-builder to eager-load the nodes that are connected to the "postal_addresses"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (vpq *VendorProfileQuery) WithNamedPostalAddresses(name string, opts ...func(*PostalAddressQuery)) *VendorProfileQuery {
	query := (&PostalAddressClient{config: vpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if vpq.withNamedPostalAddresses == nil {
		vpq.withNamedPostalAddresses = make(map[string]*PostalAddressQuery)
	}
	vpq.withNamedPostalAddresses[name] = query
	return vpq
}

// WithNamedPhoneNumbers tells the query-builder to eager-load the nodes that are connected to the "phone_numbers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (vpq *VendorProfileQuery) WithNamedPhoneNumbers(name string, opts ...func(*PhoneNumberQuery)) *VendorProfileQuery {
	query := (&PhoneNumberClient{config: vpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if vpq.withNamedPhoneNumbers == nil {
		vpq.withNamedPhoneNumbers = make(map[string]*PhoneNumberQuery)
	}
	vpq.withNamedPhoneNumbers[name] = query
	return vpq
}

// WithNamedPaymentPreferences tells the query-builder to eager-load the nodes that are connected to the "payment_preferences"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (vpq *VendorProfileQuery) WithNamedPaymentPreferences(name string, opts ...func(*VendorProfilePaymentPreferenceQuery)) *VendorProfileQuery {
	query := (&VendorProfilePaymentPreferenceClient{config: vpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if vpq.withNamedPaymentPreferences == nil {
		vpq.withNamedPaymentPreferences = make(map[string]*VendorProfilePaymentPreferenceQuery)
	}
	vpq.withNamedPaymentPreferences[name] = query
	return vpq
}

// WithNamedVendorProfilePostalAddresses tells the query-builder to eager-load the nodes that are connected to the "vendor_profile_postal_addresses"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (vpq *VendorProfileQuery) WithNamedVendorProfilePostalAddresses(name string, opts ...func(*VendorProfilePostalAddressQuery)) *VendorProfileQuery {
	query := (&VendorProfilePostalAddressClient{config: vpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if vpq.withNamedVendorProfilePostalAddresses == nil {
		vpq.withNamedVendorProfilePostalAddresses = make(map[string]*VendorProfilePostalAddressQuery)
	}
	vpq.withNamedVendorProfilePostalAddresses[name] = query
	return vpq
}

// WithNamedVendorProfilePhoneNumbers tells the query-builder to eager-load the nodes that are connected to the "vendor_profile_phone_numbers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (vpq *VendorProfileQuery) WithNamedVendorProfilePhoneNumbers(name string, opts ...func(*VendorProfilePhoneNumberQuery)) *VendorProfileQuery {
	query := (&VendorProfilePhoneNumberClient{config: vpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if vpq.withNamedVendorProfilePhoneNumbers == nil {
		vpq.withNamedVendorProfilePhoneNumbers = make(map[string]*VendorProfilePhoneNumberQuery)
	}
	vpq.withNamedVendorProfilePhoneNumbers[name] = query
	return vpq
}

// VendorProfileGroupBy is the group-by builder for VendorProfile entities.
type VendorProfileGroupBy struct {
	selector
	build *VendorProfileQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vpgb *VendorProfileGroupBy) Aggregate(fns ...AggregateFunc) *VendorProfileGroupBy {
	vpgb.fns = append(vpgb.fns, fns...)
	return vpgb
}

// Scan applies the selector query and scans the result into the given value.
func (vpgb *VendorProfileGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vpgb.build.ctx, ent.OpQueryGroupBy)
	if err := vpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VendorProfileQuery, *VendorProfileGroupBy](ctx, vpgb.build, vpgb, vpgb.build.inters, v)
}

func (vpgb *VendorProfileGroupBy) sqlScan(ctx context.Context, root *VendorProfileQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(vpgb.fns))
	for _, fn := range vpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*vpgb.flds)+len(vpgb.fns))
		for _, f := range *vpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*vpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// VendorProfileSelect is the builder for selecting fields of VendorProfile entities.
type VendorProfileSelect struct {
	*VendorProfileQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (vps *VendorProfileSelect) Aggregate(fns ...AggregateFunc) *VendorProfileSelect {
	vps.fns = append(vps.fns, fns...)
	return vps
}

// Scan applies the selector query and scans the result into the given value.
func (vps *VendorProfileSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vps.ctx, ent.OpQuerySelect)
	if err := vps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VendorProfileQuery, *VendorProfileSelect](ctx, vps.VendorProfileQuery, vps, vps.inters, v)
}

func (vps *VendorProfileSelect) sqlScan(ctx context.Context, root *VendorProfileQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(vps.fns))
	for _, fn := range vps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*vps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
