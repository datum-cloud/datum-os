// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: datum/os/vendormanager/v1/vendors_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Vendors_CreateVendor_FullMethodName = "/datum.os.vendormanager.v1.Vendors/CreateVendor"
	Vendors_GetVendor_FullMethodName    = "/datum.os.vendormanager.v1.Vendors/GetVendor"
	Vendors_ListVendors_FullMethodName  = "/datum.os.vendormanager.v1.Vendors/ListVendors"
	Vendors_UpdateVendor_FullMethodName = "/datum.os.vendormanager.v1.Vendors/UpdateVendor"
	Vendors_DeleteVendor_FullMethodName = "/datum.os.vendormanager.v1.Vendors/DeleteVendor"
)

// VendorsClient is the client API for Vendors service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VendorsClient interface {
	CreateVendor(ctx context.Context, in *CreateVendorRequest, opts ...grpc.CallOption) (*Vendor, error)
	GetVendor(ctx context.Context, in *GetVendorRequest, opts ...grpc.CallOption) (*Vendor, error)
	ListVendors(ctx context.Context, in *ListVendorsRequest, opts ...grpc.CallOption) (*ListVendorsResponse, error)
	UpdateVendor(ctx context.Context, in *UpdateVendorRequest, opts ...grpc.CallOption) (*Vendor, error)
	DeleteVendor(ctx context.Context, in *DeleteVendorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type vendorsClient struct {
	cc grpc.ClientConnInterface
}

func NewVendorsClient(cc grpc.ClientConnInterface) VendorsClient {
	return &vendorsClient{cc}
}

func (c *vendorsClient) CreateVendor(ctx context.Context, in *CreateVendorRequest, opts ...grpc.CallOption) (*Vendor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vendor)
	err := c.cc.Invoke(ctx, Vendors_CreateVendor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsClient) GetVendor(ctx context.Context, in *GetVendorRequest, opts ...grpc.CallOption) (*Vendor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vendor)
	err := c.cc.Invoke(ctx, Vendors_GetVendor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsClient) ListVendors(ctx context.Context, in *ListVendorsRequest, opts ...grpc.CallOption) (*ListVendorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVendorsResponse)
	err := c.cc.Invoke(ctx, Vendors_ListVendors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsClient) UpdateVendor(ctx context.Context, in *UpdateVendorRequest, opts ...grpc.CallOption) (*Vendor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vendor)
	err := c.cc.Invoke(ctx, Vendors_UpdateVendor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsClient) DeleteVendor(ctx context.Context, in *DeleteVendorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Vendors_DeleteVendor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VendorsServer is the server API for Vendors service.
// All implementations must embed UnimplementedVendorsServer
// for forward compatibility.
type VendorsServer interface {
	CreateVendor(context.Context, *CreateVendorRequest) (*Vendor, error)
	GetVendor(context.Context, *GetVendorRequest) (*Vendor, error)
	ListVendors(context.Context, *ListVendorsRequest) (*ListVendorsResponse, error)
	UpdateVendor(context.Context, *UpdateVendorRequest) (*Vendor, error)
	DeleteVendor(context.Context, *DeleteVendorRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedVendorsServer()
}

// UnimplementedVendorsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVendorsServer struct{}

func (UnimplementedVendorsServer) CreateVendor(context.Context, *CreateVendorRequest) (*Vendor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVendor not implemented")
}
func (UnimplementedVendorsServer) GetVendor(context.Context, *GetVendorRequest) (*Vendor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVendor not implemented")
}
func (UnimplementedVendorsServer) ListVendors(context.Context, *ListVendorsRequest) (*ListVendorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVendors not implemented")
}
func (UnimplementedVendorsServer) UpdateVendor(context.Context, *UpdateVendorRequest) (*Vendor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVendor not implemented")
}
func (UnimplementedVendorsServer) DeleteVendor(context.Context, *DeleteVendorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVendor not implemented")
}
func (UnimplementedVendorsServer) mustEmbedUnimplementedVendorsServer() {}
func (UnimplementedVendorsServer) testEmbeddedByValue()                 {}

// UnsafeVendorsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VendorsServer will
// result in compilation errors.
type UnsafeVendorsServer interface {
	mustEmbedUnimplementedVendorsServer()
}

func RegisterVendorsServer(s grpc.ServiceRegistrar, srv VendorsServer) {
	// If the following call pancis, it indicates UnimplementedVendorsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Vendors_ServiceDesc, srv)
}

func _Vendors_CreateVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVendorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorsServer).CreateVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vendors_CreateVendor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorsServer).CreateVendor(ctx, req.(*CreateVendorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vendors_GetVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVendorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorsServer).GetVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vendors_GetVendor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorsServer).GetVendor(ctx, req.(*GetVendorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vendors_ListVendors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVendorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorsServer).ListVendors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vendors_ListVendors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorsServer).ListVendors(ctx, req.(*ListVendorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vendors_UpdateVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVendorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorsServer).UpdateVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vendors_UpdateVendor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorsServer).UpdateVendor(ctx, req.(*UpdateVendorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vendors_DeleteVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVendorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorsServer).DeleteVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vendors_DeleteVendor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorsServer).DeleteVendor(ctx, req.(*DeleteVendorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vendors_ServiceDesc is the grpc.ServiceDesc for Vendors service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vendors_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datum.os.vendormanager.v1.Vendors",
	HandlerType: (*VendorsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVendor",
			Handler:    _Vendors_CreateVendor_Handler,
		},
		{
			MethodName: "GetVendor",
			Handler:    _Vendors_GetVendor_Handler,
		},
		{
			MethodName: "ListVendors",
			Handler:    _Vendors_ListVendors_Handler,
		},
		{
			MethodName: "UpdateVendor",
			Handler:    _Vendors_UpdateVendor_Handler,
		},
		{
			MethodName: "DeleteVendor",
			Handler:    _Vendors_DeleteVendor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datum/os/vendormanager/v1/vendors_service.proto",
}
