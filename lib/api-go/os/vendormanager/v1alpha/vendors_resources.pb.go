// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: datum/os/vendormanager/v1alpha/vendors_resources.proto

package v1alpha

import (
	annotations "google.golang.org/genproto/googleapis/api/annotations"
	phone_number "google.golang.org/genproto/googleapis/type/phone_number"
	postaladdress "google.golang.org/genproto/googleapis/type/postaladdress"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// VendorType is the type of Vendor.
type VendorType int32

const (
	// VendorType is not specified.
	VendorType_VENDOR_TYPE_UNSPECIFIED VendorType = 0
	// Vendor is a person.
	VendorType_VENDOR_TYPE_PERSON VendorType = 1
	// Vendor is a corporation.
	VendorType_VENDOR_TYPE_CORPORATION VendorType = 2
)

// Enum value maps for VendorType.
var (
	VendorType_name = map[int32]string{
		0: "VENDOR_TYPE_UNSPECIFIED",
		1: "VENDOR_TYPE_PERSON",
		2: "VENDOR_TYPE_CORPORATION",
	}
	VendorType_value = map[string]int32{
		"VENDOR_TYPE_UNSPECIFIED": 0,
		"VENDOR_TYPE_PERSON":      1,
		"VENDOR_TYPE_CORPORATION": 2,
	}
)

func (x VendorType) Enum() *VendorType {
	p := new(VendorType)
	*p = x
	return p
}

func (x VendorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VendorType) Descriptor() protoreflect.EnumDescriptor {
	return file_datum_os_vendormanager_v1alpha_vendors_resources_proto_enumTypes[0].Descriptor()
}

func (VendorType) Type() protoreflect.EnumType {
	return &file_datum_os_vendormanager_v1alpha_vendors_resources_proto_enumTypes[0]
}

func (x VendorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VendorType.Descriptor instead.
func (VendorType) EnumDescriptor() ([]byte, []int) {
	return file_datum_os_vendormanager_v1alpha_vendors_resources_proto_rawDescGZIP(), []int{0}
}

// OnboardingState is the state of a Vendor's onboarding process.
type OnboardingState int32

const (
	// OnboardingState is not specified.
	OnboardingState_ONBOARDING_STATE_UNSPECIFIED OnboardingState = 0
	// OnboardingState is pending. The vendor is pending approval. No invoices can be created until the vendor is approved.
	OnboardingState_ONBOARDING_STATE_PENDING OnboardingState = 1
	// OnboardingState is active. The vendor is active and can have invoices created. Invoices will be paid out to the vendor.
	OnboardingState_ONBOARDING_STATE_ACTIVE OnboardingState = 2
	// OnboardingState is inactive. The vendor is inactive and cannot have invoices created. Existing invoices will be allowed to be paid out.
	OnboardingState_ONBOARDING_STATE_INACTIVE OnboardingState = 3
)

// Enum value maps for OnboardingState.
var (
	OnboardingState_name = map[int32]string{
		0: "ONBOARDING_STATE_UNSPECIFIED",
		1: "ONBOARDING_STATE_PENDING",
		2: "ONBOARDING_STATE_ACTIVE",
		3: "ONBOARDING_STATE_INACTIVE",
	}
	OnboardingState_value = map[string]int32{
		"ONBOARDING_STATE_UNSPECIFIED": 0,
		"ONBOARDING_STATE_PENDING":     1,
		"ONBOARDING_STATE_ACTIVE":      2,
		"ONBOARDING_STATE_INACTIVE":    3,
	}
)

func (x OnboardingState) Enum() *OnboardingState {
	p := new(OnboardingState)
	*p = x
	return p
}

func (x OnboardingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnboardingState) Descriptor() protoreflect.EnumDescriptor {
	return file_datum_os_vendormanager_v1alpha_vendors_resources_proto_enumTypes[1].Descriptor()
}

func (OnboardingState) Type() protoreflect.EnumType {
	return &file_datum_os_vendormanager_v1alpha_vendors_resources_proto_enumTypes[1]
}

func (x OnboardingState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnboardingState.Descriptor instead.
func (OnboardingState) EnumDescriptor() ([]byte, []int) {
	return file_datum_os_vendormanager_v1alpha_vendors_resources_proto_rawDescGZIP(), []int{1}
}

// PaymentMethod is the payment method of a Vendor.
type PaymentMethod int32

const (
	// PaymentMethod is not specified.
	PaymentMethod_PAYMENT_METHOD_UNSPECIFIED PaymentMethod = 0
	// PaymentMethod is domestic wire transfer.
	PaymentMethod_PAYMENT_METHOD_DOMESTIC_WIRE_TRANSFER PaymentMethod = 1
	// PaymentMethod is international wire transfer.
	PaymentMethod_PAYMENT_METHOD_INTERNATIONAL_WIRE_TRANSFER PaymentMethod = 2
	// PaymentMethod is Automated Clearing House (ACH) transfer.
	PaymentMethod_PAYMENT_METHOD_ACH PaymentMethod = 3
	// PaymentMethod is a credit card.
	PaymentMethod_PAYMENT_METHOD_CREDIT_CARD PaymentMethod = 4
)

// Enum value maps for PaymentMethod.
var (
	PaymentMethod_name = map[int32]string{
		0: "PAYMENT_METHOD_UNSPECIFIED",
		1: "PAYMENT_METHOD_DOMESTIC_WIRE_TRANSFER",
		2: "PAYMENT_METHOD_INTERNATIONAL_WIRE_TRANSFER",
		3: "PAYMENT_METHOD_ACH",
		4: "PAYMENT_METHOD_CREDIT_CARD",
	}
	PaymentMethod_value = map[string]int32{
		"PAYMENT_METHOD_UNSPECIFIED":                 0,
		"PAYMENT_METHOD_DOMESTIC_WIRE_TRANSFER":      1,
		"PAYMENT_METHOD_INTERNATIONAL_WIRE_TRANSFER": 2,
		"PAYMENT_METHOD_ACH":                         3,
		"PAYMENT_METHOD_CREDIT_CARD":                 4,
	}
)

func (x PaymentMethod) Enum() *PaymentMethod {
	p := new(PaymentMethod)
	*p = x
	return p
}

func (x PaymentMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_datum_os_vendormanager_v1alpha_vendors_resources_proto_enumTypes[2].Descriptor()
}

func (PaymentMethod) Type() protoreflect.EnumType {
	return &file_datum_os_vendormanager_v1alpha_vendors_resources_proto_enumTypes[2]
}

func (x PaymentMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentMethod.Descriptor instead.
func (PaymentMethod) EnumDescriptor() ([]byte, []int) {
	return file_datum_os_vendormanager_v1alpha_vendors_resources_proto_rawDescGZIP(), []int{2}
}

// TaxIDType is the type of tax id of a Vendor.
type TaxIDType int32

const (
	// TaxIDType is not specified.
	TaxIDType_TAX_ID_TYPE_UNSPECIFIED TaxIDType = 0
	// TaxIDType is a SSN.
	TaxIDType_TAX_ID_TYPE_SSN TaxIDType = 1
	// TaxIDType is a EIN.
	TaxIDType_TAX_ID_TYPE_EIN TaxIDType = 2
	// TaxIDType is an ATIN.
	TaxIDType_TAX_ID_TYPE_ATIN TaxIDType = 3
	// TaxIDType is an ITIN.
	TaxIDType_TAX_ID_TYPE_ITIN TaxIDType = 4
)

// Enum value maps for TaxIDType.
var (
	TaxIDType_name = map[int32]string{
		0: "TAX_ID_TYPE_UNSPECIFIED",
		1: "TAX_ID_TYPE_SSN",
		2: "TAX_ID_TYPE_EIN",
		3: "TAX_ID_TYPE_ATIN",
		4: "TAX_ID_TYPE_ITIN",
	}
	TaxIDType_value = map[string]int32{
		"TAX_ID_TYPE_UNSPECIFIED": 0,
		"TAX_ID_TYPE_SSN":         1,
		"TAX_ID_TYPE_EIN":         2,
		"TAX_ID_TYPE_ATIN":        3,
		"TAX_ID_TYPE_ITIN":        4,
	}
)

func (x TaxIDType) Enum() *TaxIDType {
	p := new(TaxIDType)
	*p = x
	return p
}

func (x TaxIDType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaxIDType) Descriptor() protoreflect.EnumDescriptor {
	return file_datum_os_vendormanager_v1alpha_vendors_resources_proto_enumTypes[3].Descriptor()
}

func (TaxIDType) Type() protoreflect.EnumType {
	return &file_datum_os_vendormanager_v1alpha_vendors_resources_proto_enumTypes[3]
}

func (x TaxIDType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaxIDType.Descriptor instead.
func (TaxIDType) EnumDescriptor() ([]byte, []int) {
	return file_datum_os_vendormanager_v1alpha_vendors_resources_proto_rawDescGZIP(), []int{3}
}

// Vendor is a resource representing a Vendor.
type Vendor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of this Vendor.
	// Format: vendors/{vendor}
	// Format: organizations/{organization}/vendors/{vendor}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The resource ID of this Vendor within its parent resource.
	VendorId string `protobuf:"bytes,2,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	// Server assigned unique identifier for the Vendor. The value
	// is a UUID4 string and guaranteed to remain unchanged until the resource is
	// deleted.
	Uid string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	// Human-readable display name of this Vendor that you can modify.
	// The maximum length is 63 characters.
	DisplayName string `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Annotations is an unstructured key-value map stored with a Vendor that
	// may be set by external tools to store and retrieve arbitrary metadata.
	// They are not queryable and should be preserved when modifying objects.
	Annotations map[string]string `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Labels is an unstructured key-value map stored with a Vendor that
	// may be set by external tools to enable platform features which identify
	// Vendors via label selections.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. The time when the Vendor is created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The last time that the Vendor is updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. For a deleted resource, the deletion time. It is only
	// populated as a response to a Delete request.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. If set, there are currently changes in flight to the Vendor.
	Reconciling bool `protobuf:"varint,10,opt,name=reconciling,proto3" json:"reconciling,omitempty"`
	// This checksum is computed by the server based on the value of
	// other fields, and might be sent on update requests to ensure the client has
	// an up-to-date value before proceeding.
	Etag string `protobuf:"bytes,11,opt,name=etag,proto3" json:"etag,omitempty"`
	// The specification of the Vendor.
	Spec *Vendor_Spec `protobuf:"bytes,12,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *Vendor) Reset() {
	*x = Vendor{}
	mi := &file_datum_os_vendormanager_v1alpha_vendors_resources_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vendor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vendor) ProtoMessage() {}

func (x *Vendor) ProtoReflect() protoreflect.Message {
	mi := &file_datum_os_vendormanager_v1alpha_vendors_resources_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vendor.ProtoReflect.Descriptor instead.
func (*Vendor) Descriptor() ([]byte, []int) {
	return file_datum_os_vendormanager_v1alpha_vendors_resources_proto_rawDescGZIP(), []int{0}
}

func (x *Vendor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vendor) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *Vendor) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Vendor) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Vendor) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Vendor) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Vendor) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Vendor) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Vendor) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Vendor) GetReconciling() bool {
	if x != nil {
		return x.Reconciling
	}
	return false
}

func (x *Vendor) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *Vendor) GetSpec() *Vendor_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// Spec is the specification of a Vendor.
type Vendor_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of Vendor as defined by the VendorType enum.
	Type VendorType `protobuf:"varint,1,opt,name=type,proto3,enum=datum.os.vendormanager.v1alpha.VendorType" json:"type,omitempty"`
	// The profile of the Vendor.
	Profile *Vendor_Profile `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
	// The onboarding state of the Vendor. Defaults to ONBOARDING_STATE_PENDING on creation.
	// (-- api-linter: core::0216::state-field-output-only=disabled
	//
	//	aip.dev/not-precedent: We are modeling our Vendor APIs from Square's Vendor APIs.
	//	The 'state' of a Vendor is not output only. It is settable by the user. --)
	State OnboardingState `protobuf:"varint,3,opt,name=state,proto3,enum=datum.os.vendormanager.v1alpha.OnboardingState" json:"state,omitempty"`
}

func (x *Vendor_Spec) Reset() {
	*x = Vendor_Spec{}
	mi := &file_datum_os_vendormanager_v1alpha_vendors_resources_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vendor_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vendor_Spec) ProtoMessage() {}

func (x *Vendor_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_datum_os_vendormanager_v1alpha_vendors_resources_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vendor_Spec.ProtoReflect.Descriptor instead.
func (*Vendor_Spec) Descriptor() ([]byte, []int) {
	return file_datum_os_vendormanager_v1alpha_vendors_resources_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Vendor_Spec) GetType() VendorType {
	if x != nil {
		return x.Type
	}
	return VendorType_VENDOR_TYPE_UNSPECIFIED
}

func (x *Vendor_Spec) GetProfile() *Vendor_Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *Vendor_Spec) GetState() OnboardingState {
	if x != nil {
		return x.State
	}
	return OnboardingState_ONBOARDING_STATE_UNSPECIFIED
}

// Profile is the profile of a Vendor.
type Vendor_Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Vendor.
	//
	// Types that are assignable to Name:
	//
	//	*Vendor_Profile_Person
	//	*Vendor_Profile_Corporation
	Name isVendor_Profile_Name `protobuf_oneof:"name"`
	// The type of corporation (e.g. LLC, S-Corp, C-Corp, Other).
	CorporationType string `protobuf:"bytes,4,opt,name=corporation_type,json=corporationType,proto3" json:"corporation_type,omitempty"`
	// The DBA (Doing Business As) name of the corporation.
	CorporationDba string `protobuf:"bytes,5,opt,name=corporation_dba,json=corporationDba,proto3" json:"corporation_dba,omitempty"`
	// The description of the corporation or contractor and the services it provides.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// The URL of the website of the corporation or contractor.
	WebsiteUri string `protobuf:"bytes,8,opt,name=website_uri,json=websiteUri,proto3" json:"website_uri,omitempty"`
	// The physical address of the person or corporation.
	Addresses []*postaladdress.PostalAddress `protobuf:"bytes,9,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// The phone number of the person or corporation.
	PhoneNumbers []*phone_number.PhoneNumber `protobuf:"bytes,10,rep,name=phone_numbers,json=phoneNumbers,proto3" json:"phone_numbers,omitempty"`
	// The payment preference of the Vendor.
	PaymentPreference []*Vendor_PaymentPreference `protobuf:"bytes,11,rep,name=payment_preference,json=paymentPreference,proto3" json:"payment_preference,omitempty"`
	// The tax information of the person or corporation.
	TaxInfo *Vendor_TaxInfo `protobuf:"bytes,12,opt,name=tax_info,json=taxInfo,proto3" json:"tax_info,omitempty"`
}

func (x *Vendor_Profile) Reset() {
	*x = Vendor_Profile{}
	mi := &file_datum_os_vendormanager_v1alpha_vendors_resources_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vendor_Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vendor_Profile) ProtoMessage() {}

func (x *Vendor_Profile) ProtoReflect() protoreflect.Message {
	mi := &file_datum_os_vendormanager_v1alpha_vendors_resources_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vendor_Profile.ProtoReflect.Descriptor instead.
func (*Vendor_Profile) Descriptor() ([]byte, []int) {
	return file_datum_os_vendormanager_v1alpha_vendors_resources_proto_rawDescGZIP(), []int{0, 3}
}

func (m *Vendor_Profile) GetName() isVendor_Profile_Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (x *Vendor_Profile) GetPerson() string {
	if x, ok := x.GetName().(*Vendor_Profile_Person); ok {
		return x.Person
	}
	return ""
}

func (x *Vendor_Profile) GetCorporation() string {
	if x, ok := x.GetName().(*Vendor_Profile_Corporation); ok {
		return x.Corporation
	}
	return ""
}

func (x *Vendor_Profile) GetCorporationType() string {
	if x != nil {
		return x.CorporationType
	}
	return ""
}

func (x *Vendor_Profile) GetCorporationDba() string {
	if x != nil {
		return x.CorporationDba
	}
	return ""
}

func (x *Vendor_Profile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Vendor_Profile) GetWebsiteUri() string {
	if x != nil {
		return x.WebsiteUri
	}
	return ""
}

func (x *Vendor_Profile) GetAddresses() []*postaladdress.PostalAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Vendor_Profile) GetPhoneNumbers() []*phone_number.PhoneNumber {
	if x != nil {
		return x.PhoneNumbers
	}
	return nil
}

func (x *Vendor_Profile) GetPaymentPreference() []*Vendor_PaymentPreference {
	if x != nil {
		return x.PaymentPreference
	}
	return nil
}

func (x *Vendor_Profile) GetTaxInfo() *Vendor_TaxInfo {
	if x != nil {
		return x.TaxInfo
	}
	return nil
}

type isVendor_Profile_Name interface {
	isVendor_Profile_Name()
}

type Vendor_Profile_Person struct {
	// The name of the person.
	Person string `protobuf:"bytes,2,opt,name=person,proto3,oneof"`
}

type Vendor_Profile_Corporation struct {
	// The name of the corporation.
	Corporation string `protobuf:"bytes,3,opt,name=corporation,proto3,oneof"`
}

func (*Vendor_Profile_Person) isVendor_Profile_Name() {}

func (*Vendor_Profile_Corporation) isVendor_Profile_Name() {}

// PaymentPreference is the payment preference of a Vendor.
type Vendor_PaymentPreference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is this the preferred payment method?
	Preferred bool `protobuf:"varint,1,opt,name=preferred,proto3" json:"preferred,omitempty"`
	// The payment method of the Vendor.
	Method PaymentMethod `protobuf:"varint,2,opt,name=method,proto3,enum=datum.os.vendormanager.v1alpha.PaymentMethod" json:"method,omitempty"`
}

func (x *Vendor_PaymentPreference) Reset() {
	*x = Vendor_PaymentPreference{}
	mi := &file_datum_os_vendormanager_v1alpha_vendors_resources_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vendor_PaymentPreference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vendor_PaymentPreference) ProtoMessage() {}

func (x *Vendor_PaymentPreference) ProtoReflect() protoreflect.Message {
	mi := &file_datum_os_vendormanager_v1alpha_vendors_resources_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vendor_PaymentPreference.ProtoReflect.Descriptor instead.
func (*Vendor_PaymentPreference) Descriptor() ([]byte, []int) {
	return file_datum_os_vendormanager_v1alpha_vendors_resources_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Vendor_PaymentPreference) GetPreferred() bool {
	if x != nil {
		return x.Preferred
	}
	return false
}

func (x *Vendor_PaymentPreference) GetMethod() PaymentMethod {
	if x != nil {
		return x.Method
	}
	return PaymentMethod_PAYMENT_METHOD_UNSPECIFIED
}

// TaxInfo is the tax information of a Vendor.
type Vendor_TaxInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tax id of the person or corporation.
	TaxId string `protobuf:"bytes,1,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	// The tax id type of the person or corporation.
	TaxIdType TaxIDType `protobuf:"varint,2,opt,name=tax_id_type,json=taxIdType,proto3,enum=datum.os.vendormanager.v1alpha.TaxIDType" json:"tax_id_type,omitempty"`
}

func (x *Vendor_TaxInfo) Reset() {
	*x = Vendor_TaxInfo{}
	mi := &file_datum_os_vendormanager_v1alpha_vendors_resources_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vendor_TaxInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vendor_TaxInfo) ProtoMessage() {}

func (x *Vendor_TaxInfo) ProtoReflect() protoreflect.Message {
	mi := &file_datum_os_vendormanager_v1alpha_vendors_resources_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vendor_TaxInfo.ProtoReflect.Descriptor instead.
func (*Vendor_TaxInfo) Descriptor() ([]byte, []int) {
	return file_datum_os_vendormanager_v1alpha_vendors_resources_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Vendor_TaxInfo) GetTaxId() string {
	if x != nil {
		return x.TaxId
	}
	return ""
}

func (x *Vendor_TaxInfo) GetTaxIdType() TaxIDType {
	if x != nil {
		return x.TaxIdType
	}
	return TaxIDType_TAX_ID_TYPE_UNSPECIFIED
}

var file_datum_os_vendormanager_v1alpha_vendors_resources_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.OneofOptions)(nil),
		ExtensionType: ([]annotations.FieldBehavior)(nil),
		Field:         1053,
		Name:          "datum.os.vendormanager.v1alpha.oneof_behavior",
		Tag:           "varint,1053,rep,packed,name=oneof_behavior,enum=google.api.FieldBehavior",
		Filename:      "datum/os/vendormanager/v1alpha/vendors_resources.proto",
	},
}

// Extension fields to descriptorpb.OneofOptions.
var (
	// repeated google.api.FieldBehavior oneof_behavior = 1053;
	E_OneofBehavior = &file_datum_os_vendormanager_v1alpha_vendors_resources_proto_extTypes[0]
)

var File_datum_os_vendormanager_v1alpha_vendors_resources_proto protoreflect.FileDescriptor

var file_datum_os_vendormanager_v1alpha_vendors_resources_proto_rawDesc = []byte{
	0x0a, 0x36, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x2f, 0x6f, 0x73, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x2e,
	0x6f, 0x73, 0x2e, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x0f, 0x0a, 0x06, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe0, 0x41, 0x08, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41,
	0x03, 0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x26,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x64, 0x61,
	0x74, 0x75, 0x6d, 0x2e, 0x6f, 0x73, 0x2e, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x6f,
	0x73, 0x2e, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x44, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x61,
	0x74, 0x75, 0x6d, 0x2e, 0x6f, 0x73, 0x2e, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xe6,
	0x01, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x6f, 0x73,
	0x2e, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x64, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x6f, 0x73, 0x2e, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x64, 0x61, 0x74,
	0x75, 0x6d, 0x2e, 0x6f, 0x73, 0x2e, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc1, 0x04, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0b, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x10, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0f, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x62, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0e, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x62, 0x61, 0x12,
	0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x69, 0x12, 0x3d, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x6c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x61,
	0x74, 0x75, 0x6d, 0x2e, 0x6f, 0x73, 0x2e, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4e, 0x0a,
	0x08, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x6f, 0x73, 0x2e, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x74, 0x61, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0c, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0xea, 0x41, 0x01, 0x02, 0x1a, 0x82, 0x01, 0x0a, 0x11,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x6f, 0x73, 0x2e,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x1a, 0x75, 0x0a, 0x07, 0x54, 0x61, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x06, 0x74,
	0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x5f, 0x69,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x64,
	0x61, 0x74, 0x75, 0x6d, 0x2e, 0x6f, 0x73, 0x2e, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x61,
	0x78, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x74, 0x61,
	0x78, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x6e, 0xea, 0x41, 0x6b, 0x0a, 0x14, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x12, 0x10, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x7d, 0x12, 0x2d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x7d, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x7d, 0x2a, 0x07, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x32, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x52, 0x01, 0x01, 0x2a, 0x5e, 0x0a, 0x0a, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x45,
	0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x50, 0x4f, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x2a, 0x8d, 0x01, 0x0a, 0x0f, 0x4f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x4f,
	0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4f,
	0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x4e, 0x42, 0x4f,
	0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x2a, 0xc2, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x44, 0x4f, 0x4d, 0x45,
	0x53, 0x54, 0x49, 0x43, 0x5f, 0x57, 0x49, 0x52, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x57, 0x49, 0x52, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x41, 0x43, 0x48, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x43,
	0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x04, 0x2a, 0x7e, 0x0a, 0x09,
	0x54, 0x61, 0x78, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x58,
	0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x58, 0x5f, 0x49, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x53, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x41, 0x58, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x49, 0x4e, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x58, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x54, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x58, 0x5f, 0x49, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x54, 0x49, 0x4e, 0x10, 0x04, 0x3a, 0x60, 0x0a, 0x0e,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x9d, 0x08,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52,
	0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x42, 0x37,
	0x5a, 0x35, 0x67, 0x6f, 0x2e, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f,
	0x73, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_datum_os_vendormanager_v1alpha_vendors_resources_proto_rawDescOnce sync.Once
	file_datum_os_vendormanager_v1alpha_vendors_resources_proto_rawDescData = file_datum_os_vendormanager_v1alpha_vendors_resources_proto_rawDesc
)

func file_datum_os_vendormanager_v1alpha_vendors_resources_proto_rawDescGZIP() []byte {
	file_datum_os_vendormanager_v1alpha_vendors_resources_proto_rawDescOnce.Do(func() {
		file_datum_os_vendormanager_v1alpha_vendors_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_datum_os_vendormanager_v1alpha_vendors_resources_proto_rawDescData)
	})
	return file_datum_os_vendormanager_v1alpha_vendors_resources_proto_rawDescData
}

var file_datum_os_vendormanager_v1alpha_vendors_resources_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_datum_os_vendormanager_v1alpha_vendors_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_datum_os_vendormanager_v1alpha_vendors_resources_proto_goTypes = []any{
	(VendorType)(0),                     // 0: datum.os.vendormanager.v1alpha.VendorType
	(OnboardingState)(0),                // 1: datum.os.vendormanager.v1alpha.OnboardingState
	(PaymentMethod)(0),                  // 2: datum.os.vendormanager.v1alpha.PaymentMethod
	(TaxIDType)(0),                      // 3: datum.os.vendormanager.v1alpha.TaxIDType
	(*Vendor)(nil),                      // 4: datum.os.vendormanager.v1alpha.Vendor
	nil,                                 // 5: datum.os.vendormanager.v1alpha.Vendor.AnnotationsEntry
	nil,                                 // 6: datum.os.vendormanager.v1alpha.Vendor.LabelsEntry
	(*Vendor_Spec)(nil),                 // 7: datum.os.vendormanager.v1alpha.Vendor.Spec
	(*Vendor_Profile)(nil),              // 8: datum.os.vendormanager.v1alpha.Vendor.Profile
	(*Vendor_PaymentPreference)(nil),    // 9: datum.os.vendormanager.v1alpha.Vendor.PaymentPreference
	(*Vendor_TaxInfo)(nil),              // 10: datum.os.vendormanager.v1alpha.Vendor.TaxInfo
	(*timestamppb.Timestamp)(nil),       // 11: google.protobuf.Timestamp
	(*postaladdress.PostalAddress)(nil), // 12: google.type.PostalAddress
	(*phone_number.PhoneNumber)(nil),    // 13: google.type.PhoneNumber
	(*descriptorpb.OneofOptions)(nil),   // 14: google.protobuf.OneofOptions
	(annotations.FieldBehavior)(0),      // 15: google.api.FieldBehavior
}
var file_datum_os_vendormanager_v1alpha_vendors_resources_proto_depIdxs = []int32{
	5,  // 0: datum.os.vendormanager.v1alpha.Vendor.annotations:type_name -> datum.os.vendormanager.v1alpha.Vendor.AnnotationsEntry
	6,  // 1: datum.os.vendormanager.v1alpha.Vendor.labels:type_name -> datum.os.vendormanager.v1alpha.Vendor.LabelsEntry
	11, // 2: datum.os.vendormanager.v1alpha.Vendor.create_time:type_name -> google.protobuf.Timestamp
	11, // 3: datum.os.vendormanager.v1alpha.Vendor.update_time:type_name -> google.protobuf.Timestamp
	11, // 4: datum.os.vendormanager.v1alpha.Vendor.delete_time:type_name -> google.protobuf.Timestamp
	7,  // 5: datum.os.vendormanager.v1alpha.Vendor.spec:type_name -> datum.os.vendormanager.v1alpha.Vendor.Spec
	0,  // 6: datum.os.vendormanager.v1alpha.Vendor.Spec.type:type_name -> datum.os.vendormanager.v1alpha.VendorType
	8,  // 7: datum.os.vendormanager.v1alpha.Vendor.Spec.profile:type_name -> datum.os.vendormanager.v1alpha.Vendor.Profile
	1,  // 8: datum.os.vendormanager.v1alpha.Vendor.Spec.state:type_name -> datum.os.vendormanager.v1alpha.OnboardingState
	12, // 9: datum.os.vendormanager.v1alpha.Vendor.Profile.addresses:type_name -> google.type.PostalAddress
	13, // 10: datum.os.vendormanager.v1alpha.Vendor.Profile.phone_numbers:type_name -> google.type.PhoneNumber
	9,  // 11: datum.os.vendormanager.v1alpha.Vendor.Profile.payment_preference:type_name -> datum.os.vendormanager.v1alpha.Vendor.PaymentPreference
	10, // 12: datum.os.vendormanager.v1alpha.Vendor.Profile.tax_info:type_name -> datum.os.vendormanager.v1alpha.Vendor.TaxInfo
	2,  // 13: datum.os.vendormanager.v1alpha.Vendor.PaymentPreference.method:type_name -> datum.os.vendormanager.v1alpha.PaymentMethod
	3,  // 14: datum.os.vendormanager.v1alpha.Vendor.TaxInfo.tax_id_type:type_name -> datum.os.vendormanager.v1alpha.TaxIDType
	14, // 15: datum.os.vendormanager.v1alpha.oneof_behavior:extendee -> google.protobuf.OneofOptions
	15, // 16: datum.os.vendormanager.v1alpha.oneof_behavior:type_name -> google.api.FieldBehavior
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	16, // [16:17] is the sub-list for extension type_name
	15, // [15:16] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_datum_os_vendormanager_v1alpha_vendors_resources_proto_init() }
func file_datum_os_vendormanager_v1alpha_vendors_resources_proto_init() {
	if File_datum_os_vendormanager_v1alpha_vendors_resources_proto != nil {
		return
	}
	file_datum_os_vendormanager_v1alpha_vendors_resources_proto_msgTypes[4].OneofWrappers = []any{
		(*Vendor_Profile_Person)(nil),
		(*Vendor_Profile_Corporation)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_datum_os_vendormanager_v1alpha_vendors_resources_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_datum_os_vendormanager_v1alpha_vendors_resources_proto_goTypes,
		DependencyIndexes: file_datum_os_vendormanager_v1alpha_vendors_resources_proto_depIdxs,
		EnumInfos:         file_datum_os_vendormanager_v1alpha_vendors_resources_proto_enumTypes,
		MessageInfos:      file_datum_os_vendormanager_v1alpha_vendors_resources_proto_msgTypes,
		ExtensionInfos:    file_datum_os_vendormanager_v1alpha_vendors_resources_proto_extTypes,
	}.Build()
	File_datum_os_vendormanager_v1alpha_vendors_resources_proto = out.File
	file_datum_os_vendormanager_v1alpha_vendors_resources_proto_rawDesc = nil
	file_datum_os_vendormanager_v1alpha_vendors_resources_proto_goTypes = nil
	file_datum_os_vendormanager_v1alpha_vendors_resources_proto_depIdxs = nil
}
